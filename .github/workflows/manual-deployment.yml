name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      deploy_frontend:
        description: 'Deploy Flutter frontend'
        required: true
        default: false
        type: boolean
      run_tests:
        description: 'Run tests before deployment'
        required: true
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  SAM_CLI_TELEMETRY: 0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_tests == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov boto3 moto

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'

      - name: Install Flutter dependencies
        run: |
          cd frontend
          flutter pub get

      - name: Run Flutter tests
        run: |
          cd frontend
          flutter test

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.environment == 'production' && secrets.AWS_ACCESS_KEY_ID_PROD || secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.environment == 'production' && secrets.AWS_SECRET_ACCESS_KEY_PROD || secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "STACK_NAME=order-receiver-production" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.SAM_DEPLOYMENT_BUCKET_PROD }}" >> $GITHUB_ENV
            echo "SECRET_KEY=${{ secrets.SECRET_KEY_PROD }}" >> $GITHUB_ENV
            echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS_PROD }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "STACK_NAME=order-receiver-staging" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.SAM_DEPLOYMENT_BUCKET_STAGING }}" >> $GITHUB_ENV
            echo "SECRET_KEY=${{ secrets.SECRET_KEY_STAGING }}" >> $GITHUB_ENV
            echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS_STAGING }}" >> $GITHUB_ENV
          else
            echo "STACK_NAME=order-receiver-dev" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.SAM_DEPLOYMENT_BUCKET_DEV }}" >> $GITHUB_ENV
            echo "SECRET_KEY=${{ secrets.SECRET_KEY_DEV }}" >> $GITHUB_ENV
            echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS_DEV }}" >> $GITHUB_ENV
          fi

      - name: Build SAM application
        run: |
          cd infrastructure
          sam build --use-container

      - name: Deploy to ${{ github.event.inputs.environment }}
        run: |
          cd infrastructure
          sam deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --s3-bucket ${{ env.S3_BUCKET }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --parameter-overrides \
              Environment=${{ github.event.inputs.environment }} \
              SecretKey=${{ env.SECRET_KEY }} \
              CorsOrigins=${{ env.CORS_ORIGINS }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: ${{ github.event.inputs.deploy_frontend == 'true' && github.event.inputs.environment == 'production' }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'

      - name: Install Flutter dependencies
        run: |
          cd frontend
          flutter pub get

      - name: Build Flutter web
        run: |
          cd frontend
          flutter build web --release

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync frontend/build/web s3://${{ secrets.WEB_S3_BUCKET }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
