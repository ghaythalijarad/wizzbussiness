name: Performance Testing

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production
      duration:
        description: 'Test duration in minutes'
        required: true
        default: '5'
        type: string
      concurrent_users:
        description: 'Number of concurrent users'
        required: true
        default: '10'
        type: string

jobs:
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install locust boto3 requests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.environment == 'production' && secrets.AWS_ACCESS_KEY_ID_PROD || secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.environment == 'production' && secrets.AWS_SECRET_ACCESS_KEY_PROD || secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get API Gateway URL
        run: |
          STACK_NAME="order-receiver-${{ github.event.inputs.environment }}"
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Create Locust test file
        run: |
          cat > locustfile.py << 'EOF'
          from locust import HttpUser, task, between
          import json
          import random
          import string

          class ApiUser(HttpUser):
              wait_time = between(1, 3)
              
              def on_start(self):
                  # Register a test user
                  self.email = f"test_{''.join(random.choices(string.ascii_lowercase, k=8))}@example.com"
                  self.password = "TestPassword123!"
                  
                  response = self.client.post("/auth/register", json={
                      "email": self.email,
                      "password": self.password,
                      "username": f"testuser{''.join(random.choices(string.ascii_lowercase, k=5))}"
                  })
                  
                  if response.status_code == 200:
                      # Login to get token
                      login_response = self.client.post("/auth/login", json={
                          "email": self.email,
                          "password": self.password
                      })
                      if login_response.status_code == 200:
                          self.token = login_response.json().get("token")
                          self.headers = {"Authorization": f"Bearer {self.token}"}
                      else:
                          self.headers = {}
                  else:
                      self.headers = {}

              @task(3)
              def get_orders(self):
                  self.client.get("/api/orders", headers=getattr(self, 'headers', {}))

              @task(2)
              def create_order(self):
                  order_data = {
                      "customer_name": f"Customer {random.randint(1, 1000)}",
                      "items": [
                          {
                              "name": f"Item {random.randint(1, 100)}",
                              "quantity": random.randint(1, 5),
                              "price": round(random.uniform(5.0, 50.0), 2)
                          }
                      ],
                      "total_amount": round(random.uniform(10.0, 100.0), 2)
                  }
                  self.client.post("/api/orders", json=order_data, headers=getattr(self, 'headers', {}))

              @task(1)
              def get_analytics(self):
                  self.client.get("/api/analytics/summary", headers=getattr(self, 'headers', {}))

              @task(1)
              def health_check(self):
                  self.client.get("/health")
          EOF

      - name: Run load test
        run: |
          locust \
            --host=${{ env.API_URL }} \
            --users=${{ github.event.inputs.concurrent_users }} \
            --spawn-rate=2 \
            --run-time=${{ github.event.inputs.duration }}m \
            --headless \
            --html=load_test_report.html \
            --csv=load_test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results-${{ github.event.inputs.environment }}
          path: |
            load_test_report.html
            load_test_*.csv

  frontend-performance:
    name: Frontend Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'

      - name: Configure AWS credentials (for API URL)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Select environment and get API URL
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            STACK_NAME="order-receiver-production"
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" = "staging" ]; then
            STACK_NAME="order-receiver-staging"
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            STACK_NAME="order-receiver-dev"
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Build Flutter web (with dart-defines)
        run: |
          cd frontend
          flutter pub get
          flutter build web --release \
            --dart-define=AUTH_MODE=cognito \
            --dart-define=COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }} \
            --dart-define=APP_CLIENT_ID=${{ secrets.APP_CLIENT_ID }} \
            --dart-define=COGNITO_REGION=us-east-1 \
            --dart-define=ENVIRONMENT=$ENVIRONMENT \
            --dart-define=API_URL=$API_URL

      - name: Start local server
        run: |
          cd frontend/build/web
          python -m http.server 8000 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          lhci autorun \
            --upload.target=filesystem \
            --upload.outputDir=./lighthouse-reports \
            --collect.url=http://localhost:8000 \
            --collect.numberOfRuns=3

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-reports
          path: lighthouse-reports/
