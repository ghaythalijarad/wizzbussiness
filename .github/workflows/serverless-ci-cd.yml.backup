name: Serverless CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/serverless ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  test-backend:
    name: Test Backend Functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend

  validate-serverless-config:
    name: Validate Serverless Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Validate Serverless configuration
        run: |
          cd backend
          serverless print

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Get Flutter dependencies
        run: |
          cd frontend
          flutter pub get

      - name: Run Flutter tests
        run: |
          cd frontend
          flutter test test/simple_auth_test.dart test/simple_api_test.dart test/basic_widget_test.dart

  build-and-deploy-dev:
    name: Deploy to Development
    needs: [test-lambda-functions, validate-sam-template, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/serverless'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build SAM application
        run: |
          cd backend
          sam build --template template.yaml

      - name: Deploy to Development
        run: |
          cd backend
          sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name order-receiver-serverless-dev \
            --parameter-overrides Environment=dev CorsOrigins="*" \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Get API Gateway URL
        id: get-api-url
        run: |
          cd backend
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name order-receiver-serverless-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "Development API URL: $API_URL"

      - name: Deploy Frontend to S3
        run: |
          cd frontend
          flutter build web
          aws s3 sync build/web/ s3://${{ secrets.DEV_BUCKET_NAME }}/ --delete

      - name: Test deployment
        run: |
          echo "Testing API deployment..."
          curl -f "${{ steps.get-api-url.outputs.api_url }}health" || exit 1
          curl -f "${{ steps.get-api-url.outputs.api_url }}auth/health" || exit 1

  build-and-deploy-staging:
    name: Deploy to Staging
    needs: [test-lambda-functions, validate-sam-template, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build SAM application
        run: |
          cd backend
          sam build --template template.yaml

      - name: Deploy to Staging
        run: |
          cd backend
          sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name order-receiver-serverless-staging \
            --parameter-overrides Environment=staging CorsOrigins="https://staging.yourdomain.com" \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Get API Gateway URL
        id: get-api-url
        run: |
          cd backend
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name order-receiver-serverless-staging \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "Staging API URL: $API_URL"

      - name: Deploy Frontend to S3
        run: |
          cd frontend
          flutter build web
          aws s3 sync build/web/ s3://${{ secrets.STAGING_BUCKET_NAME }}/ --delete

      - name: Run integration tests against staging
        run: |
          echo "Testing staging deployment..."
          curl -f "${{ steps.get-api-url.outputs.api_url }}health" || exit 1
          curl -f "${{ steps.get-api-url.outputs.api_url }}auth/health" || exit 1
          
          # Test business registration endpoint
          curl -f -X POST "${{ steps.get-api-url.outputs.api_url }}auth/register-business" \
            -H "Content-Type: application/json" \
            -d '{"cognito_user_id":"test","email":"invalid"}' \
            | grep -q "Missing field" || exit 1

  deploy-production:
    name: Deploy to Production
    needs: build-and-deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build SAM application
        run: |
          cd backend
          sam build --template template.yaml

      - name: Deploy to Production
        run: |
          cd backend
          sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name order-receiver-serverless-prod \
            --parameter-overrides Environment=prod CorsOrigins="https://yourdomain.com" \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Get API Gateway URL
        id: get-api-url
        run: |
          cd backend
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name order-receiver-serverless-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "Production API URL: $API_URL"

      - name: Deploy Frontend to S3
        run: |
          cd frontend
          flutter build web
          aws s3 sync build/web/ s3://${{ secrets.PROD_BUCKET_NAME }}/ --delete

      - name: Validate production deployment
        run: |
          echo "Validating production deployment..."
          curl -f "${{ steps.get-api-url.outputs.api_url }}health" || exit 1
          curl -f "${{ steps.get-api-url.outputs.api_url }}auth/health" || exit 1

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "API URL: ${{ steps.get-api-url.outputs.api_url }}"
          echo "Frontend URL: https://${{ secrets.PROD_BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
