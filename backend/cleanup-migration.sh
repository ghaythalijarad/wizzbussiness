#!/bin/bash

# Migration cleanup script for FastAPI to Lambda migration
set -e

echo "🧹 Order Receiver Backend Migration Cleanup"
echo "==========================================="
echo ""

# Get the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

echo "📁 Current directory: $(pwd)"
echo ""

# Function to prompt for confirmation
confirm() {
    read -p "$1 (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

echo "🔍 Migration Cleanup Tasks:"
echo "1. Archive FastAPI app directory"
echo "2. Update .gitignore for serverless files"
echo "3. Create serverless-specific environment file"
echo "4. Validate serverless configuration"
echo "5. Run tests on new Lambda functions"
echo ""

# Task 1: Archive FastAPI app directory
if [ -d "app" ]; then
    echo "📦 Task 1: Archive FastAPI app directory"
    if confirm "Archive the FastAPI app directory to app-legacy?"; then
        if [ -d "app-legacy" ]; then
            echo "⚠️  app-legacy already exists. Removing it first..."
            rm -rf app-legacy
        fi
        mv app app-legacy
        echo "✅ FastAPI app directory archived to app-legacy"
    else
        echo "⏭️  Skipping FastAPI app archival"
    fi
    echo ""
else
    echo "✅ Task 1: FastAPI app directory already removed"
    echo ""
fi

# Task 2: Update .gitignore
echo "📝 Task 2: Update .gitignore for serverless files"
if [ ! -f ".gitignore" ]; then
    touch .gitignore
fi

# Add serverless-specific entries to .gitignore
cat >> .gitignore << 'EOF'

# Serverless Framework
.serverless/
.serverless_plugins/

# AWS SAM
.aws-sam/
samconfig.toml

# Node.js (for Serverless Framework)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.env
.venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Testing
.pytest_cache/
.coverage
htmlcov/

# Legacy FastAPI app
app-legacy/
EOF

echo "✅ .gitignore updated with serverless entries"
echo ""

# Task 3: Create serverless environment file
echo "🔧 Task 3: Create serverless environment configuration"
cat > .env.serverless << 'EOF'
# Serverless Backend Environment Configuration
# Copy this file to .env and update values for your deployment

# AWS Configuration
AWS_REGION=us-east-1
AWS_PROFILE=default

# Environment Settings
ENVIRONMENT=dev
LOG_LEVEL=INFO

# DynamoDB Configuration (auto-generated by serverless framework)
# DYNAMODB_TABLE_NAME=order-receiver-businesses-dev

# CORS Configuration (for development)
CORS_ORIGINS=*

# API Gateway Configuration
# API_GATEWAY_STAGE=dev

# Monitoring Configuration
ENABLE_XRAY_TRACING=true
ENABLE_METRICS=true

# Local Development
SERVERLESS_OFFLINE_PORT=3000
EOF

echo "✅ Created .env.serverless template"
echo ""

# Task 4: Validate serverless configuration
echo "🔍 Task 4: Validate serverless configuration"

# Check if serverless.yml is valid
if command -v serverless &> /dev/null; then
    echo "Validating serverless.yml..."
    if serverless print > /dev/null 2>&1; then
        echo "✅ serverless.yml is valid"
    else
        echo "❌ serverless.yml has issues. Please check the configuration."
    fi
else
    echo "⚠️  Serverless Framework not installed. Skipping validation."
    echo "   Install with: npm install -g serverless"
fi

# Check if SAM template is valid
if command -v sam &> /dev/null; then
    echo "Validating template.yaml..."
    if sam validate > /dev/null 2>&1; then
        echo "✅ template.yaml is valid"
    else
        echo "❌ template.yaml has issues. Please check the configuration."
    fi
else
    echo "⚠️  SAM CLI not installed. Skipping validation."
    echo "   Install with: pip install aws-sam-cli"
fi

echo ""

# Task 5: Run tests
echo "🧪 Task 5: Run Lambda function tests"
if confirm "Run tests on the new Lambda functions?"; then
    if [ -f "tests/test_lambda_functions.py" ]; then
        echo "Installing test dependencies..."
        pip install -r requirements.txt > /dev/null 2>&1
        
        echo "Running Lambda function tests..."
        python -m pytest tests/test_lambda_functions.py -v
        
        if [ $? -eq 0 ]; then
            echo "✅ All Lambda function tests passed"
        else
            echo "❌ Some tests failed. Please check the test output above."
        fi
    else
        echo "❌ Test file not found: tests/test_lambda_functions.py"
    fi
else
    echo "⏭️  Skipping tests"
fi

echo ""
echo "📋 Migration Cleanup Summary"
echo "============================"
echo ""
echo "✅ Migration from FastAPI to AWS Lambda completed!"
echo ""
echo "📁 File Structure:"
echo "   ├── lambda_functions/"
echo "   │   ├── auth_lambda.py          (Pure Lambda handlers)"
echo "   │   ├── health_lambda.py        (Pure Lambda handlers)"
echo "   │   ├── dynamodb_business_service.py"
echo "   │   ├── requirements-lambda.txt (Serverless dependencies)"
echo "   │   └── legacy/                 (Old FastAPI handlers)"
echo "   ├── serverless.yml              (Serverless Framework config)"
echo "   ├── template.yaml               (AWS SAM config)"
echo "   ├── package.json                (Node.js dependencies)"
echo "   ├── deploy.sh                   (Serverless deployment)"
echo "   ├── deploy-sam.sh               (SAM deployment)"
echo "   └── tests/test_lambda_functions.py (Lambda tests)"
echo ""
echo "🚀 Next Steps:"
echo "1. Install Node.js dependencies: npm install"
echo "2. Configure AWS credentials: aws configure"
echo "3. Deploy to development: ./deploy.sh dev"
echo "4. Test endpoints: curl https://your-api-endpoint/health"
echo "5. Update frontend to use new API endpoints"
echo ""
echo "📚 Documentation:"
echo "   - README-SERVERLESS.md: Complete serverless documentation"
echo "   - MIGRATION_GUIDE.md: Detailed migration information"
echo ""
echo "🔧 Troubleshooting:"
echo "   - View logs: serverless logs -f health --stage dev"
echo "   - Local testing: npm run local"
echo "   - Remove deployment: serverless remove --stage dev"
echo ""
echo "🎉 Migration completed successfully!"
