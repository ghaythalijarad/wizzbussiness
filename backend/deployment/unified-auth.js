/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 156:
/***/ ((module) => {

/**
 * Obliterator ForEach Function
 * =============================
 *
 * Helper function used to easily iterate over mixed values.
 */

/**
 * Constants.
 */
var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined',
    SYMBOL_SUPPORT = typeof Symbol !== 'undefined';

/**
 * Function able to iterate over almost any iterable JS value.
 *
 * @param  {any}      iterable - Iterable value.
 * @param  {function} callback - Callback function.
 */
function forEach(iterable, callback) {
  var iterator, k, i, l, s;

  if (!iterable)
    throw new Error('obliterator/forEach: invalid iterable.');

  if (typeof callback !== 'function')
    throw new Error('obliterator/forEach: expecting a callback.');

  // The target is an array or a string or function arguments
  if (
    Array.isArray(iterable) ||
    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
    typeof iterable === 'string' ||
    iterable.toString() === '[object Arguments]'
  ) {
    for (i = 0, l = iterable.length; i < l; i++)
      callback(iterable[i], i);
    return;
  }

  // The target has a #.forEach method
  if (typeof iterable.forEach === 'function') {
    iterable.forEach(callback);
    return;
  }

  // The target is iterable
  if (
    SYMBOL_SUPPORT &&
    Symbol.iterator in iterable &&
    typeof iterable.next !== 'function'
  ) {
    iterable = iterable[Symbol.iterator]();
  }

  // The target is an iterator
  if (typeof iterable.next === 'function') {
    iterator = iterable;
    i = 0;

    while ((s = iterator.next(), s.done !== true)) {
      callback(s.value, i);
      i++;
    }

    return;
  }

  // The target is a plain object
  for (k in iterable) {
    if (iterable.hasOwnProperty(k)) {
      callback(iterable[k], k);
    }
  }

  return;
}

/**
 * Same function as the above `forEach` but will yield `null` when the target
 * does not have keys.
 *
 * @param  {any}      iterable - Iterable value.
 * @param  {function} callback - Callback function.
 */
forEach.forEachWithNullKeys = function(iterable, callback) {
  var iterator, k, i, l, s;

  if (!iterable)
    throw new Error('obliterator/forEachWithNullKeys: invalid iterable.');

  if (typeof callback !== 'function')
    throw new Error('obliterator/forEachWithNullKeys: expecting a callback.');

  // The target is an array or a string or function arguments
  if (
    Array.isArray(iterable) ||
    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
    typeof iterable === 'string' ||
    iterable.toString() === '[object Arguments]'
  ) {
    for (i = 0, l = iterable.length; i < l; i++)
      callback(iterable[i], null);
    return;
  }

  // The target is a Set
  if (iterable instanceof Set) {
    iterable.forEach(function(value) {
      callback(value, null);
    });
    return;
  }

  // The target has a #.forEach method
  if (typeof iterable.forEach === 'function') {
    iterable.forEach(callback);
    return;
  }

  // The target is iterable
  if (
    SYMBOL_SUPPORT &&
    Symbol.iterator in iterable &&
    typeof iterable.next !== 'function'
  ) {
    iterable = iterable[Symbol.iterator]();
  }

  // The target is an iterator
  if (typeof iterable.next === 'function') {
    iterator = iterable;
    i = 0;

    while ((s = iterator.next(), s.done !== true)) {
      callback(s.value, null);
      i++;
    }

    return;
  }

  // The target is a plain object
  for (k in iterable) {
    if (iterable.hasOwnProperty(k)) {
      callback(iterable[k], k);
    }
  }

  return;
};

/**
 * Exporting.
 */
module.exports = forEach;


/***/ }),

/***/ 181:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 244:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setCredentialFeature: () => (/* binding */ setCredentialFeature)
/* harmony export */ });
function setCredentialFeature(credentials, feature, value) {
    if (!credentials.$source) {
        credentials.$source = {};
    }
    credentials.$source[feature] = value;
    return credentials;
}


/***/ }),

/***/ 427:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  endpointMiddleware: () => (/* reexport */ endpointMiddleware),
  endpointMiddlewareOptions: () => (/* reexport */ endpointMiddlewareOptions),
  getEndpointFromInstructions: () => (/* reexport */ getEndpointFromInstructions),
  getEndpointPlugin: () => (/* reexport */ getEndpointPlugin),
  resolveEndpointConfig: () => (/* reexport */ resolveEndpointConfig),
  resolveEndpointRequiredConfig: () => (/* reexport */ resolveEndpointRequiredConfig),
  resolveParams: () => (/* reexport */ resolveParams),
  toEndpointV1: () => (/* reexport */ toEndpointV1)
});

;// ./node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js
const resolveParamsForS3 = async (endpointParams) => {
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    }
    if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
            throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
    }
    else if (!isDnsCompatibleBucketName(bucket) ||
        (bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:")) ||
        bucket.toLowerCase() !== bucket ||
        bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
    }
    if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
    }
    return endpointParams;
};
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
const DOT_PATTERN = /\./;
const S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
const isArnBucketName = (bucketName) => {
    const [arn, partition, service, , , bucket] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = Boolean(isArn && partition && service && bucket);
    if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    }
    return isValidArn;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js
const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
    const configProvider = async () => {
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
            return configValue();
        }
        return configValue;
    };
    if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
            const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
            const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
            return configValue;
        };
    }
    if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
            const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
            const configValue = credentials?.accountId ?? credentials?.AccountId;
            return configValue;
        };
    }
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
            if (config.isCustomEndpoint === false) {
                return undefined;
            }
            const endpoint = await configProvider();
            if (endpoint && typeof endpoint === "object") {
                if ("url" in endpoint) {
                    return endpoint.url.href;
                }
                if ("hostname" in endpoint) {
                    const { protocol, hostname, port, path } = endpoint;
                    return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
                }
            }
            return endpoint;
        };
    }
    return configProvider;
};

// EXTERNAL MODULE: ./node_modules/@smithy/node-config-provider/dist-es/index.js + 5 modules
var dist_es = __webpack_require__(9987);
// EXTERNAL MODULE: ./node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 14 modules
var shared_ini_file_loader_dist_es = __webpack_require__(3054);
;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointUrlConfig.js

const ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
const CONFIG_ENDPOINT_URL = "endpoint_url";
const getEndpointUrlConfig = (serviceId) => ({
    environmentVariableSelector: (env) => {
        const serviceSuffixParts = serviceId.split(" ").map((w) => w.toUpperCase());
        const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
            return serviceEndpointUrl;
        const endpointUrl = env[ENV_ENDPOINT_URL];
        if (endpointUrl)
            return endpointUrl;
        return undefined;
    },
    configFileSelector: (profile, config) => {
        if (config && profile.services) {
            const servicesSection = config[["services", profile.services].join(shared_ini_file_loader_dist_es.CONFIG_PREFIX_SEPARATOR)];
            if (servicesSection) {
                const servicePrefixParts = serviceId.split(" ").map((w) => w.toLowerCase());
                const endpointUrl = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(shared_ini_file_loader_dist_es.CONFIG_PREFIX_SEPARATOR)];
                if (endpointUrl)
                    return endpointUrl;
            }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl)
            return endpointUrl;
        return undefined;
    },
    default: undefined,
});

;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.js


const getEndpointFromConfig = async (serviceId) => (0,dist_es.loadConfig)(getEndpointUrlConfig(serviceId ?? ""))();

// EXTERNAL MODULE: ./node_modules/@smithy/url-parser/dist-es/index.js + 1 modules
var url_parser_dist_es = __webpack_require__(2641);
;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js

const toEndpointV1 = (endpoint) => {
    if (typeof endpoint === "object") {
        if ("url" in endpoint) {
            return (0,url_parser_dist_es.parseUrl)(endpoint.url);
        }
        return endpoint;
    }
    return (0,url_parser_dist_es.parseUrl)(endpoint);
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js




const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
    if (!clientConfig.isCustomEndpoint) {
        let endpointFromConfig;
        if (clientConfig.serviceConfiguredEndpoint) {
            endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
        }
        else {
            endpointFromConfig = await getEndpointFromConfig(clientConfig.serviceId);
        }
        if (endpointFromConfig) {
            clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
            clientConfig.isCustomEndpoint = true;
        }
    }
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
    }
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
};
const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
            case "staticContextParams":
                endpointParams[name] = instruction.value;
                break;
            case "contextParams":
                endpointParams[name] = commandInput[instruction.name];
                break;
            case "clientContextParams":
            case "builtInParams":
                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
                break;
            case "operationContextParams":
                endpointParams[name] = instruction.get(commandInput);
                break;
            default:
                throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
    }
    if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
    }
    if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
    }
    return endpointParams;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js



;// ./node_modules/@smithy/core/dist-es/setFeature.js
function setFeature(context, feature, value) {
    if (!context.__smithy_context) {
        context.__smithy_context = {
            features: {},
        };
    }
    else if (!context.__smithy_context.features) {
        context.__smithy_context.features = {};
    }
    context.__smithy_context.features[feature] = value;
}

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js



const endpointMiddleware = ({ config, instructions, }) => {
    return (next, context) => async (args) => {
        if (config.isCustomEndpoint) {
            setFeature(context, "ENDPOINT_OVERRIDE", "N");
        }
        const endpoint = await getEndpointFromInstructions(args.input, {
            getEndpointParameterInstructions() {
                return instructions;
            },
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
            context["signing_region"] = authScheme.signingRegion;
            context["signing_service"] = authScheme.signingName;
            const smithyContext = (0,util_middleware_dist_es.getSmithyContext)(context);
            const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
            if (httpAuthOption) {
                httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
                    signing_region: authScheme.signingRegion,
                    signingRegion: authScheme.signingRegion,
                    signing_service: authScheme.signingName,
                    signingName: authScheme.signingName,
                    signingRegionSet: authScheme.signingRegionSet,
                }, authScheme.properties);
            }
        }
        return next({
            ...args,
        });
    };
};

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-serde/dist-es/index.js + 3 modules
var middleware_serde_dist_es = __webpack_require__(1208);
;// ./node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js


const endpointMiddlewareOptions = {
    step: "serialize",
    tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: middleware_serde_dist_es.serializerMiddlewareOption.name,
};
const getEndpointPlugin = (config, instructions) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(endpointMiddleware({
            config,
            instructions,
        }), endpointMiddlewareOptions);
    },
});

;// ./node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js



const resolveEndpointConfig = (input) => {
    const tls = input.tls ?? true;
    const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;
    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0,util_middleware_dist_es.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    const resolvedConfig = Object.assign(input, {
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0,util_middleware_dist_es.normalizeProvider)(useDualstackEndpoint ?? false),
        useFipsEndpoint: (0,util_middleware_dist_es.normalizeProvider)(useFipsEndpoint ?? false),
    });
    let configuredEndpointPromise = undefined;
    resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
            configuredEndpointPromise = getEndpointFromConfig(input.serviceId);
        }
        return configuredEndpointPromise;
    };
    return resolvedConfig;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointRequiredConfig.js
const resolveEndpointRequiredConfig = (input) => {
    const { endpoint } = input;
    if (endpoint === undefined) {
        input.endpoint = async () => {
            throw new Error("@smithy/middleware-endpoint: (default endpointRuleSet) endpoint is not set - you must configure an endpoint.");
        };
    }
    return input;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/index.js








/***/ }),

/***/ 612:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultIdentityProviderConfig: () => (/* binding */ DefaultIdentityProviderConfig)
/* harmony export */ });
class DefaultIdentityProviderConfig {
    constructor(config) {
        this.authSchemes = new Map();
        for (const [key, value] of Object.entries(config)) {
            if (value !== undefined) {
                this.authSchemes.set(key, value);
            }
        }
    }
    getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
    }
}


/***/ }),

/***/ 643:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  EndpointError: () => (/* reexport */ dist_es.EndpointError),
  awsEndpointFunctions: () => (/* reexport */ awsEndpointFunctions),
  getUserAgentPrefix: () => (/* reexport */ getUserAgentPrefix),
  isIpAddress: () => (/* reexport */ dist_es.isIpAddress),
  partition: () => (/* reexport */ partition),
  resolveDefaultAwsRegionalEndpointsConfig: () => (/* reexport */ resolveDefaultAwsRegionalEndpointsConfig),
  resolveEndpoint: () => (/* reexport */ dist_es.resolveEndpoint),
  setPartitionInfo: () => (/* reexport */ setPartitionInfo),
  toEndpointV1: () => (/* reexport */ toEndpointV1),
  useDefaultPartitionInfo: () => (/* reexport */ useDefaultPartitionInfo)
});

// EXTERNAL MODULE: ./node_modules/@smithy/util-endpoints/dist-es/index.js + 35 modules
var dist_es = __webpack_require__(8545);
;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js


const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
    if (allowSubDomains) {
        for (const label of value.split(".")) {
            if (!isVirtualHostableS3Bucket(label)) {
                return false;
            }
        }
        return true;
    }
    if (!(0,dist_es.isValidHostLabel)(value)) {
        return false;
    }
    if (value.length < 3 || value.length > 63) {
        return false;
    }
    if (value !== value.toLowerCase()) {
        return false;
    }
    if ((0,dist_es.isIpAddress)(value)) {
        return false;
    }
    return true;
};

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js
const ARN_DELIMITER = ":";
const RESOURCE_DELIMITER = "/";
const parseArn = (value) => {
    const segments = value.split(ARN_DELIMITER);
    if (segments.length < 6)
        return null;
    const [arn, partition, service, region, accountId, ...resourcePath] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
        return null;
    const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
    return {
        partition,
        service,
        region,
        accountId,
        resourceId,
    };
};

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json
const partitions_namespaceObject = /*#__PURE__*/JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il|mx)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-east-2":{"description":"Asia Pacific (Taipei)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"ap-southeast-5":{"description":"Asia Pacific (Malaysia)"},"ap-southeast-7":{"description":"Asia Pacific (Thailand)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"ca-west-1":{"description":"Canada West (Calgary)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"mx-central-1":{"description":"Mexico (Central)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-e-global":{"description":"AWS ISOE (Europe) global region"},"eu-isoe-west-1":{"description":"EU ISOE West"}}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-f-global":{"description":"AWS ISOF global region"},"us-isof-east-1":{"description":"US ISOF EAST"},"us-isof-south-1":{"description":"US ISOF SOUTH"}}},{"id":"aws-eusc","outputs":{"dnsSuffix":"amazonaws.eu","dualStackDnsSuffix":"amazonaws.eu","implicitGlobalRegion":"eusc-de-east-1","name":"aws-eusc","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eusc\\\\-(de)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"eusc-de-east-1":{"description":"EU (Germany)"}}}],"version":"1.1"}');
;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js

let selectedPartitionsInfo = partitions_namespaceObject;
let selectedUserAgentPrefix = "";
const partition = (value) => {
    const { partitions } = selectedPartitionsInfo;
    for (const partition of partitions) {
        const { regions, outputs } = partition;
        for (const [region, regionData] of Object.entries(regions)) {
            if (region === value) {
                return {
                    ...outputs,
                    ...regionData,
                };
            }
        }
    }
    for (const partition of partitions) {
        const { regionRegex, outputs } = partition;
        if (new RegExp(regionRegex).test(value)) {
            return {
                ...outputs,
            };
        }
    }
    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === "aws");
    if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex," +
            " and default partition with id 'aws' doesn't exist.");
    }
    return {
        ...DEFAULT_PARTITION.outputs,
    };
};
const setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
};
const useDefaultPartitionInfo = () => {
    setPartitionInfo(partitions_namespaceObject, "");
};
const getUserAgentPrefix = () => selectedUserAgentPrefix;

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/aws.js




const awsEndpointFunctions = {
    isVirtualHostableS3Bucket: isVirtualHostableS3Bucket,
    parseArn: parseArn,
    partition: partition,
};
dist_es.customEndpointFunctions.aws = awsEndpointFunctions;

// EXTERNAL MODULE: ./node_modules/@smithy/url-parser/dist-es/index.js + 1 modules
var url_parser_dist_es = __webpack_require__(2641);
;// ./node_modules/@aws-sdk/util-endpoints/dist-es/resolveDefaultAwsRegionalEndpointsConfig.js

const resolveDefaultAwsRegionalEndpointsConfig = (input) => {
    if (typeof input.endpointProvider !== "function") {
        throw new Error("@aws-sdk/util-endpoint - endpointProvider and endpoint missing in config for this client.");
    }
    const { endpoint } = input;
    if (endpoint === undefined) {
        input.endpoint = async () => {
            return toEndpointV1(input.endpointProvider({
                Region: typeof input.region === "function" ? await input.region() : input.region,
                UseDualStack: typeof input.useDualstackEndpoint === "function"
                    ? await input.useDualstackEndpoint()
                    : input.useDualstackEndpoint,
                UseFIPS: typeof input.useFipsEndpoint === "function" ? await input.useFipsEndpoint() : input.useFipsEndpoint,
                Endpoint: undefined,
            }, { logger: input.logger }));
        };
    }
    return input;
};
const toEndpointV1 = (endpoint) => (0,url_parser_dist_es.parseUrl)(endpoint.url);

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js







;// ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js








/***/ }),

/***/ 649:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   contentLengthMiddleware: () => (/* binding */ contentLengthMiddleware),
/* harmony export */   contentLengthMiddlewareOptions: () => (/* binding */ contentLengthMiddlewareOptions),
/* harmony export */   getContentLengthPlugin: () => (/* binding */ getContentLengthPlugin)
/* harmony export */ });
/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3608);

const CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    return (next) => async (args) => {
        const request = args.request;
        if (_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
            const { body, headers } = request;
            if (body &&
                Object.keys(headers)
                    .map((str) => str.toLowerCase())
                    .indexOf(CONTENT_LENGTH_HEADER) === -1) {
                try {
                    const length = bodyLengthChecker(body);
                    request.headers = {
                        ...request.headers,
                        [CONTENT_LENGTH_HEADER]: String(length),
                    };
                }
                catch (error) {
                }
            }
        }
        return next({
            ...args,
            request,
        });
    };
}
const contentLengthMiddlewareOptions = {
    step: "build",
    tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
    name: "contentLengthMiddleware",
    override: true,
};
const getContentLengthPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    },
});


/***/ }),

/***/ 857:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 904:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ENV_ACCOUNT_ID: () => (/* reexport */ ENV_ACCOUNT_ID),
  ENV_CREDENTIAL_SCOPE: () => (/* reexport */ ENV_CREDENTIAL_SCOPE),
  ENV_EXPIRATION: () => (/* reexport */ ENV_EXPIRATION),
  ENV_KEY: () => (/* reexport */ ENV_KEY),
  ENV_SECRET: () => (/* reexport */ ENV_SECRET),
  ENV_SESSION: () => (/* reexport */ ENV_SESSION),
  fromEnv: () => (/* reexport */ fromEnv)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
var setCredentialFeature = __webpack_require__(244);
// EXTERNAL MODULE: ./node_modules/@smithy/property-provider/dist-es/index.js + 6 modules
var dist_es = __webpack_require__(8112);
;// ./node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js


const ENV_KEY = "AWS_ACCESS_KEY_ID";
const ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
const ENV_SESSION = "AWS_SESSION_TOKEN";
const ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
const ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
const ENV_ACCOUNT_ID = "AWS_ACCOUNT_ID";
const fromEnv = (init) => async () => {
    init?.logger?.debug("@aws-sdk/credential-provider-env - fromEnv");
    const accessKeyId = process.env[ENV_KEY];
    const secretAccessKey = process.env[ENV_SECRET];
    const sessionToken = process.env[ENV_SESSION];
    const expiry = process.env[ENV_EXPIRATION];
    const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
    const accountId = process.env[ENV_ACCOUNT_ID];
    if (accessKeyId && secretAccessKey) {
        const credentials = {
            accessKeyId,
            secretAccessKey,
            ...(sessionToken && { sessionToken }),
            ...(expiry && { expiration: new Date(expiry) }),
            ...(credentialScope && { credentialScope }),
            ...(accountId && { accountId }),
        };
        (0,setCredentialFeature.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS", "g");
        return credentials;
    }
    throw new dist_es.CredentialsProviderError("Unable to find environment variable credentials.", { logger: init?.logger });
};

;// ./node_modules/@aws-sdk/credential-provider-env/dist-es/index.js



/***/ }),

/***/ 931:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   GetItemCommand: () => (/* binding */ GetItemCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class GetItemCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "GetItem", {})
    .n("DynamoDBClient", "GetItemCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_GetItemCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_GetItemCommand)
    .build() {
}


/***/ }),

/***/ 1095:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getHostHeaderPlugin: () => (/* binding */ getHostHeaderPlugin),
/* harmony export */   hostHeaderMiddleware: () => (/* binding */ hostHeaderMiddleware),
/* harmony export */   hostHeaderMiddlewareOptions: () => (/* binding */ hostHeaderMiddlewareOptions),
/* harmony export */   resolveHostHeaderConfig: () => (/* binding */ resolveHostHeaderConfig)
/* harmony export */ });
/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3608);

function resolveHostHeaderConfig(input) {
    return input;
}
const hostHeaderMiddleware = (options) => (next) => async (args) => {
    if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request))
        return next(args);
    const { request } = args;
    const { handlerProtocol = "" } = options.requestHandler.metadata || {};
    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
    }
    else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
            host += `:${request.port}`;
        request.headers["host"] = host;
    }
    return next(args);
};
const hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: ["HOST"],
    override: true,
};
const getHostHeaderPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    },
});


/***/ }),

/***/ 1208:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  deserializerMiddleware: () => (/* reexport */ deserializerMiddleware),
  deserializerMiddlewareOption: () => (/* reexport */ deserializerMiddlewareOption),
  getSerdePlugin: () => (/* reexport */ getSerdePlugin),
  serializerMiddleware: () => (/* reexport */ serializerMiddleware),
  serializerMiddlewareOption: () => (/* reexport */ serializerMiddlewareOption)
});

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var dist_es = __webpack_require__(3608);
;// ./node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js

const deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
    const { response } = await next(args);
    try {
        const parsed = await deserializer(response, options);
        return {
            response,
            output: parsed,
        };
    }
    catch (error) {
        Object.defineProperty(error, "$response", {
            value: response,
        });
        if (!("$metadata" in error)) {
            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
            try {
                error.message += "\n  " + hint;
            }
            catch (e) {
                if (!context.logger || context.logger?.constructor?.name === "NoOpLogger") {
                    console.warn(hint);
                }
                else {
                    context.logger?.warn?.(hint);
                }
            }
            if (typeof error.$responseBodyText !== "undefined") {
                if (error.$response) {
                    error.$response.body = error.$responseBodyText;
                }
            }
            try {
                if (dist_es.HttpResponse.isInstance(response)) {
                    const { headers = {} } = response;
                    const headerEntries = Object.entries(headers);
                    error.$metadata = {
                        httpStatusCode: response.statusCode,
                        requestId: findHeader(/^x-[\w-]+-request-?id$/, headerEntries),
                        extendedRequestId: findHeader(/^x-[\w-]+-id-2$/, headerEntries),
                        cfId: findHeader(/^x-[\w-]+-cf-id$/, headerEntries),
                    };
                }
            }
            catch (e) {
            }
        }
        throw error;
    }
};
const findHeader = (pattern, headers) => {
    return (headers.find(([k]) => {
        return k.match(pattern);
    }) || [void 0, void 1])[1];
};

;// ./node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js
const serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
    const endpointConfig = options;
    const endpoint = context.endpointV2?.url && endpointConfig.urlParser
        ? async () => endpointConfig.urlParser(context.endpointV2.url)
        : endpointConfig.endpoint;
    if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
    }
    const request = await serializer(args.input, { ...options, endpoint });
    return next({
        ...args,
        request,
    });
};

;// ./node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js


const deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: ["DESERIALIZER"],
    override: true,
};
const serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: ["SERIALIZER"],
    override: true,
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: (commandStack) => {
            commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
            commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
        },
    };
}

;// ./node_modules/@smithy/middleware-serde/dist-es/index.js





/***/ }),

/***/ 1278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.jwtDecode = exports.InvalidTokenError = void 0;
class InvalidTokenError extends Error {
}
exports.InvalidTokenError = InvalidTokenError;
InvalidTokenError.prototype.name = "InvalidTokenError";
function b64DecodeUnicode(str) {
    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {
        let code = p.charCodeAt(0).toString(16).toUpperCase();
        if (code.length < 2) {
            code = "0" + code;
        }
        return "%" + code;
    }));
}
function base64UrlDecode(str) {
    let output = str.replace(/-/g, "+").replace(/_/g, "/");
    switch (output.length % 4) {
        case 0:
            break;
        case 2:
            output += "==";
            break;
        case 3:
            output += "=";
            break;
        default:
            throw new Error("base64 string is not of the correct length");
    }
    try {
        return b64DecodeUnicode(output);
    }
    catch (err) {
        return atob(output);
    }
}
function jwtDecode(token, options) {
    if (typeof token !== "string") {
        throw new InvalidTokenError("Invalid token specified: must be a string");
    }
    options || (options = {});
    const pos = options.header === true ? 0 : 1;
    const part = token.split(".")[pos];
    if (typeof part !== "string") {
        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);
    }
    let decoded;
    try {
        decoded = base64UrlDecode(part);
    }
    catch (e) {
        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);
    }
    try {
        return JSON.parse(decoded);
    }
    catch (e) {
        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);
    }
}
exports.jwtDecode = jwtDecode;


/***/ }),

/***/ 1429:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Mnemonist LRUCache
 * ===================
 *
 * JavaScript implementation of the LRU Cache data structure. To save up
 * memory and allocations this implementation represents its underlying
 * doubly-linked list as static arrays and pointers. Thus, memory is allocated
 * only once at instantiation and JS objects are never created to serve as
 * pointers. This also means this implementation does not trigger too many
 * garbage collections.
 *
 * Note that to save up memory, a LRU Cache can be implemented using a singly
 * linked list by storing predecessors' pointers as hashmap values.
 * However, this means more hashmap lookups and would probably slow the whole
 * thing down. What's more, pointers are not the things taking most space in
 * memory.
 */
var Iterator = __webpack_require__(2766),
    forEach = __webpack_require__(156),
    typed = __webpack_require__(5384),
    iterables = __webpack_require__(9938);

/**
 * LRUCache.
 *
 * @constructor
 * @param {function} Keys     - Array class for storing keys.
 * @param {function} Values   - Array class for storing values.
 * @param {number}   capacity - Desired capacity.
 */
function LRUCache(Keys, Values, capacity) {
  if (arguments.length < 2) {
    capacity = Keys;
    Keys = null;
    Values = null;
  }

  this.capacity = capacity;

  if (typeof this.capacity !== 'number' || this.capacity <= 0)
    throw new Error('mnemonist/lru-cache: capacity should be positive number.');

  var PointerArray = typed.getPointerArray(capacity);

  this.forward = new PointerArray(capacity);
  this.backward = new PointerArray(capacity);
  this.K = typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);
  this.V = typeof Values === 'function' ? new Values(capacity) : new Array(capacity);

  // Properties
  this.size = 0;
  this.head = 0;
  this.tail = 0;
  this.items = {};
}

/**
 * Method used to clear the structure.
 *
 * @return {undefined}
 */
LRUCache.prototype.clear = function() {
  this.size = 0;
  this.head = 0;
  this.tail = 0;
  this.items = {};
};

/**
 * Method used to splay a value on top.
 *
 * @param  {number}   pointer - Pointer of the value to splay on top.
 * @return {LRUCache}
 */
LRUCache.prototype.splayOnTop = function(pointer) {
  var oldHead = this.head;

  if (this.head === pointer)
    return this;

  var previous = this.backward[pointer],
      next = this.forward[pointer];

  if (this.tail === pointer) {
    this.tail = previous;
  }
  else {
    this.backward[next] = previous;
  }

  this.forward[previous] = next;

  this.backward[oldHead] = pointer;
  this.head = pointer;
  this.forward[pointer] = oldHead;

  return this;
};

/**
 * Method used to set the value for the given key in the cache.
 *
 * @param  {any} key   - Key.
 * @param  {any} value - Value.
 * @return {undefined}
 */
LRUCache.prototype.set = function(key, value) {

  // The key already exists, we just need to update the value and splay on top
  var pointer = this.items[key];

  if (typeof pointer !== 'undefined') {
    this.splayOnTop(pointer);
    this.V[pointer] = value;

    return;
  }

  // The cache is not yet full
  if (this.size < this.capacity) {
    pointer = this.size++;
  }

  // Cache is full, we need to drop the last value
  else {
    pointer = this.tail;
    this.tail = this.backward[pointer];
    delete this.items[this.K[pointer]];
  }

  // Storing key & value
  this.items[key] = pointer;
  this.K[pointer] = key;
  this.V[pointer] = value;

  // Moving the item at the front of the list
  this.forward[pointer] = this.head;
  this.backward[this.head] = pointer;
  this.head = pointer;
};

/**
 * Method used to set the value for the given key in the cache
 *
 * @param  {any} key   - Key.
 * @param  {any} value - Value.
 * @return {{evicted: boolean, key: any, value: any}} An object containing the
 * key and value of an item that was overwritten or evicted in the set
 * operation, as well as a boolean indicating whether it was evicted due to
 * limited capacity. Return value is null if nothing was evicted or overwritten
 * during the set operation.
 */
LRUCache.prototype.setpop = function(key, value) {
  var oldValue = null;
  var oldKey = null;
  // The key already exists, we just need to update the value and splay on top
  var pointer = this.items[key];

  if (typeof pointer !== 'undefined') {
    this.splayOnTop(pointer);
    oldValue = this.V[pointer];
    this.V[pointer] = value;
    return {evicted: false, key: key, value: oldValue};
  }

  // The cache is not yet full
  if (this.size < this.capacity) {
    pointer = this.size++;
  }

  // Cache is full, we need to drop the last value
  else {
    pointer = this.tail;
    this.tail = this.backward[pointer];
    oldValue = this.V[pointer];
    oldKey = this.K[pointer];
    delete this.items[this.K[pointer]];
  }

  // Storing key & value
  this.items[key] = pointer;
  this.K[pointer] = key;
  this.V[pointer] = value;

  // Moving the item at the front of the list
  this.forward[pointer] = this.head;
  this.backward[this.head] = pointer;
  this.head = pointer;

  // Return object if eviction took place, otherwise return null
  if (oldKey) {
    return {evicted: true, key: oldKey, value: oldValue};
  }
  else {
    return null;
  }
};

/**
 * Method used to check whether the key exists in the cache.
 *
 * @param  {any} key   - Key.
 * @return {boolean}
 */
LRUCache.prototype.has = function(key) {
  return key in this.items;
};

/**
 * Method used to get the value attached to the given key. Will move the
 * related key to the front of the underlying linked list.
 *
 * @param  {any} key   - Key.
 * @return {any}
 */
LRUCache.prototype.get = function(key) {
  var pointer = this.items[key];

  if (typeof pointer === 'undefined')
    return;

  this.splayOnTop(pointer);

  return this.V[pointer];
};

/**
 * Method used to get the value attached to the given key. Does not modify
 * the ordering of the underlying linked list.
 *
 * @param  {any} key   - Key.
 * @return {any}
 */
LRUCache.prototype.peek = function(key) {
    var pointer = this.items[key];

    if (typeof pointer === 'undefined')
        return;

    return this.V[pointer];
};

/**
 * Method used to iterate over the cache's entries using a callback.
 *
 * @param  {function}  callback - Function to call for each item.
 * @param  {object}    scope    - Optional scope.
 * @return {undefined}
 */
LRUCache.prototype.forEach = function(callback, scope) {
  scope = arguments.length > 1 ? scope : this;

  var i = 0,
      l = this.size;

  var pointer = this.head,
      keys = this.K,
      values = this.V,
      forward = this.forward;

  while (i < l) {

    callback.call(scope, values[pointer], keys[pointer], this);
    pointer = forward[pointer];

    i++;
  }
};

/**
 * Method used to create an iterator over the cache's keys from most
 * recently used to least recently used.
 *
 * @return {Iterator}
 */
LRUCache.prototype.keys = function() {
  var i = 0,
      l = this.size;

  var pointer = this.head,
      keys = this.K,
      forward = this.forward;

  return new Iterator(function() {
    if (i >= l)
      return {done: true};

    var key = keys[pointer];

    i++;

    if (i < l)
      pointer = forward[pointer];

    return {
      done: false,
      value: key
    };
  });
};

/**
 * Method used to create an iterator over the cache's values from most
 * recently used to least recently used.
 *
 * @return {Iterator}
 */
LRUCache.prototype.values = function() {
  var i = 0,
      l = this.size;

  var pointer = this.head,
      values = this.V,
      forward = this.forward;

  return new Iterator(function() {
    if (i >= l)
      return {done: true};

    var value = values[pointer];

    i++;

    if (i < l)
      pointer = forward[pointer];

    return {
      done: false,
      value: value
    };
  });
};

/**
 * Method used to create an iterator over the cache's entries from most
 * recently used to least recently used.
 *
 * @return {Iterator}
 */
LRUCache.prototype.entries = function() {
  var i = 0,
      l = this.size;

  var pointer = this.head,
      keys = this.K,
      values = this.V,
      forward = this.forward;

  return new Iterator(function() {
    if (i >= l)
      return {done: true};

    var key = keys[pointer],
        value = values[pointer];

    i++;

    if (i < l)
      pointer = forward[pointer];

    return {
      done: false,
      value: [key, value]
    };
  });
};

/**
 * Attaching the #.entries method to Symbol.iterator if possible.
 */
if (typeof Symbol !== 'undefined')
  LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;

/**
 * Convenience known methods.
 */
LRUCache.prototype.inspect = function() {
  var proxy = new Map();

  var iterator = this.entries(),
      step;

  while ((step = iterator.next(), !step.done))
    proxy.set(step.value[0], step.value[1]);

  // Trick so that node displays the name of the constructor
  Object.defineProperty(proxy, 'constructor', {
    value: LRUCache,
    enumerable: false
  });

  return proxy;
};

if (typeof Symbol !== 'undefined')
  LRUCache.prototype[Symbol.for('nodejs.util.inspect.custom')] = LRUCache.prototype.inspect;

/**
 * Static @.from function taking an arbitrary iterable & converting it into
 * a structure.
 *
 * @param  {Iterable} iterable - Target iterable.
 * @param  {function} Keys     - Array class for storing keys.
 * @param  {function} Values   - Array class for storing values.
 * @param  {number}   capacity - Cache's capacity.
 * @return {LRUCache}
 */
LRUCache.from = function(iterable, Keys, Values, capacity) {
  if (arguments.length < 2) {
    capacity = iterables.guessLength(iterable);

    if (typeof capacity !== 'number')
      throw new Error('mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.');
  }
  else if (arguments.length === 2) {
    capacity = Keys;
    Keys = null;
    Values = null;
  }

  var cache = new LRUCache(Keys, Values, capacity);

  forEach(iterable, function(value, key) {
    cache.set(key, value);
  });

  return cache;
};

/**
 * Exporting.
 */
module.exports = LRUCache;


/***/ }),

/***/ 1570:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   QueryCommand: () => (/* binding */ QueryCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class QueryCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "Query", {})
    .n("DynamoDBClient", "QueryCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_QueryCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_QueryCommand)
    .build() {
}


/***/ }),

/***/ 1691:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   TransactWriteItemsCommand: () => (/* binding */ TransactWriteItemsCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class TransactWriteItemsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArnList: {
        type: "operationContextParams",
        get: (input) => input?.TransactItems?.map((obj) => [obj?.ConditionCheck?.TableName, obj?.Put?.TableName, obj?.Delete?.TableName, obj?.Update?.TableName].filter((i) => i)).flat(),
    },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "TransactWriteItems", {})
    .n("DynamoDBClient", "TransactWriteItemsCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_TransactWriteItemsCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_TransactWriteItemsCommand)
    .build() {
}


/***/ }),

/***/ 1701:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hash: () => (/* binding */ Hash)
/* harmony export */ });
/* harmony import */ var _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9290);
/* harmony import */ var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3197);
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(181);
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6982);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);




class Hash {
    constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
    }
    update(toHash, encoding) {
        this.hash.update((0,_smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(castSourceData(toHash, encoding)));
    }
    digest() {
        return Promise.resolve(this.hash.digest());
    }
    reset() {
        this.hash = this.secret
            ? (0,crypto__WEBPACK_IMPORTED_MODULE_3__.createHmac)(this.algorithmIdentifier, castSourceData(this.secret))
            : (0,crypto__WEBPACK_IMPORTED_MODULE_3__.createHash)(this.algorithmIdentifier);
    }
}
function castSourceData(toCast, encoding) {
    if (buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(toCast)) {
        return toCast;
    }
    if (typeof toCast === "string") {
        return (0,_smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromString)(toCast, encoding);
    }
    if (ArrayBuffer.isView(toCast)) {
        return (0,_smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
    }
    return (0,_smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromArrayBuffer)(toCast);
}


/***/ }),

/***/ 1908:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   PutItemCommand: () => (/* binding */ PutItemCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class PutItemCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "PutItem", {})
    .n("DynamoDBClient", "PutItemCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_PutItemCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_PutItemCommand)
    .build() {
}


/***/ }),

/***/ 1919:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadRestJsonErrorCode: () => (/* binding */ loadRestJsonErrorCode),
/* harmony export */   parseJsonBody: () => (/* binding */ parseJsonBody),
/* harmony export */   parseJsonErrorBody: () => (/* binding */ parseJsonErrorBody)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8218);

const parseJsonBody = (streamBody, context) => (0,_common__WEBPACK_IMPORTED_MODULE_0__.collectBodyString)(streamBody, context).then((encoded) => {
    if (encoded.length) {
        try {
            return JSON.parse(encoded);
        }
        catch (e) {
            if (e?.name === "SyntaxError") {
                Object.defineProperty(e, "$responseBodyText", {
                    value: encoded,
                });
            }
            throw e;
        }
    }
    return {};
});
const parseJsonErrorBody = async (errorBody, context) => {
    const value = await parseJsonBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data && typeof data === "object") {
        const codeKey = findKey(data, "code");
        if (codeKey && data[codeKey] !== undefined) {
            return sanitizeErrorCode(data[codeKey]);
        }
        if (data["__type"] !== undefined) {
            return sanitizeErrorCode(data["__type"]);
        }
    }
};


/***/ }),

/***/ 1943:
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ 2203:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 2404:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  getHttpAuthSchemeEndpointRuleSetPlugin: () => (/* binding */ getHttpAuthSchemeEndpointRuleSetPlugin),
  httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => (/* binding */ httpAuthSchemeEndpointRuleSetMiddlewareOptions)
});

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/resolveAuthOptions.js
const resolveAuthOptions = (candidateAuthOptions, authSchemePreference) => {
    if (!authSchemePreference || authSchemePreference.length === 0) {
        return candidateAuthOptions;
    }
    const preferredAuthOptions = [];
    for (const preferredSchemeName of authSchemePreference) {
        for (const candidateAuthOption of candidateAuthOptions) {
            const candidateAuthSchemeName = candidateAuthOption.schemeId.split("#")[1];
            if (candidateAuthSchemeName === preferredSchemeName) {
                preferredAuthOptions.push(candidateAuthOption);
            }
        }
    }
    for (const candidateAuthOption of candidateAuthOptions) {
        if (!preferredAuthOptions.find(({ schemeId }) => schemeId === candidateAuthOption.schemeId)) {
            preferredAuthOptions.push(candidateAuthOption);
        }
    }
    return preferredAuthOptions;
};

;// ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js



function convertHttpAuthSchemesToMap(httpAuthSchemes) {
    const map = new Map();
    for (const scheme of httpAuthSchemes) {
        map.set(scheme.schemeId, scheme);
    }
    return map;
}
const httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {
    const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
    const authSchemePreference = config.authSchemePreference ? await config.authSchemePreference() : [];
    const resolvedOptions = resolveAuthOptions(options, authSchemePreference);
    const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
    const smithyContext = (0,util_middleware_dist_es.getSmithyContext)(context);
    const failureReasons = [];
    for (const option of resolvedOptions) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
            failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
            continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
        if (!identityProvider) {
            failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
            continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
            httpAuthOption: option,
            identity: await identityProvider(option.identityProperties),
            signer: scheme.signer,
        };
        break;
    }
    if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
    }
    return next(args);
};

;// ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js

const httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
    step: "serialize",
    tags: ["HTTP_AUTH_SCHEME"],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: "endpointV2Middleware",
};
const getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider, }) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
            httpAuthSchemeParametersProvider,
            identityProviderConfigProvider,
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
    },
});


/***/ }),

/***/ 2531:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   escapeUri: () => (/* binding */ escapeUri)
/* harmony export */ });
const escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
const hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;


/***/ }),

/***/ 2587:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  NIL: () => (/* reexport */ nil),
  parse: () => (/* reexport */ esm_node_parse),
  stringify: () => (/* reexport */ esm_node_stringify),
  v1: () => (/* reexport */ esm_node_v1),
  v3: () => (/* reexport */ esm_node_v3),
  v4: () => (/* reexport */ esm_node_v4),
  v5: () => (/* reexport */ esm_node_v5),
  validate: () => (/* reexport */ esm_node_validate),
  version: () => (/* reexport */ esm_node_version)
});

// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6982);
var external_crypto_default = /*#__PURE__*/__webpack_require__.n(external_crypto_);
;// ./node_modules/uuid/dist/esm-node/rng.js

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    external_crypto_default().randomFillSync(rnds8Pool);
    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
;// ./node_modules/uuid/dist/esm-node/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);
;// ./node_modules/uuid/dist/esm-node/validate.js


function validate(uuid) {
  return typeof uuid === 'string' && regex.test(uuid);
}

/* harmony default export */ const esm_node_validate = (validate);
;// ./node_modules/uuid/dist/esm-node/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!esm_node_validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_node_stringify = (stringify);
;// ./node_modules/uuid/dist/esm-node/v1.js

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || esm_node_stringify(b);
}

/* harmony default export */ const esm_node_v1 = (v1);
;// ./node_modules/uuid/dist/esm-node/parse.js


function parse(uuid) {
  if (!esm_node_validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ const esm_node_parse = (parse);
;// ./node_modules/uuid/dist/esm-node/v35.js



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = esm_node_parse(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return esm_node_stringify(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
;// ./node_modules/uuid/dist/esm-node/md5.js


function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return external_crypto_default().createHash('md5').update(bytes).digest();
}

/* harmony default export */ const esm_node_md5 = (md5);
;// ./node_modules/uuid/dist/esm-node/v3.js


const v3 = v35('v3', 0x30, esm_node_md5);
/* harmony default export */ const esm_node_v3 = (v3);
;// ./node_modules/uuid/dist/esm-node/v4.js



function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return esm_node_stringify(rnds);
}

/* harmony default export */ const esm_node_v4 = (v4);
;// ./node_modules/uuid/dist/esm-node/sha1.js


function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return external_crypto_default().createHash('sha1').update(bytes).digest();
}

/* harmony default export */ const esm_node_sha1 = (sha1);
;// ./node_modules/uuid/dist/esm-node/v5.js


const v5 = v35('v5', 0x50, esm_node_sha1);
/* harmony default export */ const esm_node_v5 = (v5);
;// ./node_modules/uuid/dist/esm-node/nil.js
/* harmony default export */ const nil = ('00000000-0000-0000-0000-000000000000');
;// ./node_modules/uuid/dist/esm-node/version.js


function version(uuid) {
  if (!esm_node_validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ const esm_node_version = (version);
;// ./node_modules/uuid/dist/esm-node/index.js










/***/ }),

/***/ 2641:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  parseUrl: () => (/* binding */ parseUrl)
});

;// ./node_modules/@smithy/querystring-parser/dist-es/index.js
function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
        for (const pair of querystring.split("&")) {
            let [key, value = null] = pair.split("=");
            key = decodeURIComponent(key);
            if (value) {
                value = decodeURIComponent(value);
            }
            if (!(key in query)) {
                query[key] = value;
            }
            else if (Array.isArray(query[key])) {
                query[key].push(value);
            }
            else {
                query[key] = [query[key], value];
            }
        }
    }
    return query;
}

;// ./node_modules/@smithy/url-parser/dist-es/index.js

const parseUrl = (url) => {
    if (typeof url === "string") {
        return parseUrl(new URL(url));
    }
    const { hostname, pathname, port, protocol, search } = url;
    let query;
    if (search) {
        query = parseQueryString(search);
    }
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
        query,
    };
};


/***/ }),

/***/ 2692:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   UpdateItemCommand: () => (/* binding */ UpdateItemCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class UpdateItemCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateItem", {})
    .n("DynamoDBClient", "UpdateItemCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_UpdateItemCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_UpdateItemCommand)
    .build() {
}


/***/ }),

/***/ 2701:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ChecksumStream: () => (/* reexport */ ChecksumStream),
  Uint8ArrayBlobAdapter: () => (/* reexport */ Uint8ArrayBlobAdapter),
  createBufferedReadable: () => (/* reexport */ createBufferedReadable_createBufferedReadable),
  createChecksumStream: () => (/* reexport */ createChecksumStream_createChecksumStream),
  getAwsChunkedEncodingStream: () => (/* reexport */ getAwsChunkedEncodingStream),
  headStream: () => (/* reexport */ headStream_headStream),
  isBlob: () => (/* reexport */ isBlob),
  isReadableStream: () => (/* reexport */ isReadableStream),
  sdkStreamMixin: () => (/* reexport */ sdk_stream_mixin_sdkStreamMixin),
  splitStream: () => (/* reexport */ splitStream_splitStream)
});

// EXTERNAL MODULE: ./node_modules/@smithy/util-base64/dist-es/index.js + 2 modules
var dist_es = __webpack_require__(4572);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/index.js + 3 modules
var util_utf8_dist_es = __webpack_require__(3197);
;// ./node_modules/@smithy/util-stream/dist-es/blob/transforms.js



function transformToString(payload, encoding = "utf-8") {
    if (encoding === "base64") {
        return (0,dist_es.toBase64)(payload);
    }
    return (0,util_utf8_dist_es.toUtf8)(payload);
}
function transformFromString(str, encoding) {
    if (encoding === "base64") {
        return Uint8ArrayBlobAdapter.mutate((0,dist_es.fromBase64)(str));
    }
    return Uint8ArrayBlobAdapter.mutate((0,util_utf8_dist_es.fromUtf8)(str));
}

;// ./node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js

class Uint8ArrayBlobAdapter extends Uint8Array {
    static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
            case "string":
                return transformFromString(source, encoding);
            default:
                throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
    }
    static mutate(source) {
        Object.setPrototypeOf(source, Uint8ArrayBlobAdapter.prototype);
        return source;
    }
    transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
    }
}

// EXTERNAL MODULE: external "stream"
var external_stream_ = __webpack_require__(2203);
;// ./node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.js


class ChecksumStream extends external_stream_.Duplex {
    constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder, }) {
        super();
        if (typeof source.pipe === "function") {
            this.source = source;
        }
        else {
            throw new Error(`@smithy/util-stream: unsupported source type ${source?.constructor?.name ?? source} in ChecksumStream.`);
        }
        this.base64Encoder = base64Encoder ?? dist_es.toBase64;
        this.expectedChecksum = expectedChecksum;
        this.checksum = checksum;
        this.checksumSourceLocation = checksumSourceLocation;
        this.source.pipe(this);
    }
    _read(size) { }
    _write(chunk, encoding, callback) {
        try {
            this.checksum.update(chunk);
            this.push(chunk);
        }
        catch (e) {
            return callback(e);
        }
        return callback();
    }
    async _final(callback) {
        try {
            const digest = await this.checksum.digest();
            const received = this.base64Encoder(digest);
            if (this.expectedChecksum !== received) {
                return callback(new Error(`Checksum mismatch: expected "${this.expectedChecksum}" but received "${received}"` +
                    ` in response header "${this.checksumSourceLocation}".`));
            }
        }
        catch (e) {
            return callback(e);
        }
        this.push(null);
        return callback();
    }
}

;// ./node_modules/@smithy/util-stream/dist-es/stream-type-check.js
const isReadableStream = (stream) => typeof ReadableStream === "function" &&
    (stream?.constructor?.name === ReadableStream.name || stream instanceof ReadableStream);
const isBlob = (blob) => {
    return typeof Blob === "function" && (blob?.constructor?.name === Blob.name || blob instanceof Blob);
};

;// ./node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.browser.js
const ReadableStreamRef = typeof ReadableStream === "function" ? ReadableStream : function () { };
class ChecksumStream_browser_ChecksumStream extends ReadableStreamRef {
}

;// ./node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.browser.js



const createChecksumStream = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder, }) => {
    if (!isReadableStream(source)) {
        throw new Error(`@smithy/util-stream: unsupported source type ${source?.constructor?.name ?? source} in ChecksumStream.`);
    }
    const encoder = base64Encoder ?? dist_es.toBase64;
    if (typeof TransformStream !== "function") {
        throw new Error("@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.");
    }
    const transform = new TransformStream({
        start() { },
        async transform(chunk, controller) {
            checksum.update(chunk);
            controller.enqueue(chunk);
        },
        async flush(controller) {
            const digest = await checksum.digest();
            const received = encoder(digest);
            if (expectedChecksum !== received) {
                const error = new Error(`Checksum mismatch: expected "${expectedChecksum}" but received "${received}"` +
                    ` in response header "${checksumSourceLocation}".`);
                controller.error(error);
            }
            else {
                controller.terminate();
            }
        },
    });
    source.pipeThrough(transform);
    const readable = transform.readable;
    Object.setPrototypeOf(readable, ChecksumStream_browser_ChecksumStream.prototype);
    return readable;
};

;// ./node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.js



function createChecksumStream_createChecksumStream(init) {
    if (typeof ReadableStream === "function" && isReadableStream(init.source)) {
        return createChecksumStream(init);
    }
    return new ChecksumStream(init);
}

;// external "node:stream"
const external_node_stream_namespaceObject = require("node:stream");
;// ./node_modules/@smithy/util-stream/dist-es/ByteArrayCollector.js
class ByteArrayCollector {
    constructor(allocByteArray) {
        this.allocByteArray = allocByteArray;
        this.byteLength = 0;
        this.byteArrays = [];
    }
    push(byteArray) {
        this.byteArrays.push(byteArray);
        this.byteLength += byteArray.byteLength;
    }
    flush() {
        if (this.byteArrays.length === 1) {
            const bytes = this.byteArrays[0];
            this.reset();
            return bytes;
        }
        const aggregation = this.allocByteArray(this.byteLength);
        let cursor = 0;
        for (let i = 0; i < this.byteArrays.length; ++i) {
            const bytes = this.byteArrays[i];
            aggregation.set(bytes, cursor);
            cursor += bytes.byteLength;
        }
        this.reset();
        return aggregation;
    }
    reset() {
        this.byteArrays = [];
        this.byteLength = 0;
    }
}

;// ./node_modules/@smithy/util-stream/dist-es/createBufferedReadableStream.js

function createBufferedReadableStream(upstream, size, logger) {
    const reader = upstream.getReader();
    let streamBufferingLoggedWarning = false;
    let bytesSeen = 0;
    const buffers = ["", new ByteArrayCollector((size) => new Uint8Array(size))];
    let mode = -1;
    const pull = async (controller) => {
        const { value, done } = await reader.read();
        const chunk = value;
        if (done) {
            if (mode !== -1) {
                const remainder = flush(buffers, mode);
                if (sizeOf(remainder) > 0) {
                    controller.enqueue(remainder);
                }
            }
            controller.close();
        }
        else {
            const chunkMode = modeOf(chunk, false);
            if (mode !== chunkMode) {
                if (mode >= 0) {
                    controller.enqueue(flush(buffers, mode));
                }
                mode = chunkMode;
            }
            if (mode === -1) {
                controller.enqueue(chunk);
                return;
            }
            const chunkSize = sizeOf(chunk);
            bytesSeen += chunkSize;
            const bufferSize = sizeOf(buffers[mode]);
            if (chunkSize >= size && bufferSize === 0) {
                controller.enqueue(chunk);
            }
            else {
                const newSize = merge(buffers, mode, chunk);
                if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
                    streamBufferingLoggedWarning = true;
                    logger?.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
                }
                if (newSize >= size) {
                    controller.enqueue(flush(buffers, mode));
                }
                else {
                    await pull(controller);
                }
            }
        }
    };
    return new ReadableStream({
        pull,
    });
}
const createBufferedReadable = createBufferedReadableStream;
function merge(buffers, mode, chunk) {
    switch (mode) {
        case 0:
            buffers[0] += chunk;
            return sizeOf(buffers[0]);
        case 1:
        case 2:
            buffers[mode].push(chunk);
            return sizeOf(buffers[mode]);
    }
}
function flush(buffers, mode) {
    switch (mode) {
        case 0:
            const s = buffers[0];
            buffers[0] = "";
            return s;
        case 1:
        case 2:
            return buffers[mode].flush();
    }
    throw new Error(`@smithy/util-stream - invalid index ${mode} given to flush()`);
}
function sizeOf(chunk) {
    return chunk?.byteLength ?? chunk?.length ?? 0;
}
function modeOf(chunk, allowBuffer = true) {
    if (allowBuffer && typeof Buffer !== "undefined" && chunk instanceof Buffer) {
        return 2;
    }
    if (chunk instanceof Uint8Array) {
        return 1;
    }
    if (typeof chunk === "string") {
        return 0;
    }
    return -1;
}

;// ./node_modules/@smithy/util-stream/dist-es/createBufferedReadable.js




function createBufferedReadable_createBufferedReadable(upstream, size, logger) {
    if (isReadableStream(upstream)) {
        return createBufferedReadableStream(upstream, size, logger);
    }
    const downstream = new external_node_stream_namespaceObject.Readable({ read() { } });
    let streamBufferingLoggedWarning = false;
    let bytesSeen = 0;
    const buffers = [
        "",
        new ByteArrayCollector((size) => new Uint8Array(size)),
        new ByteArrayCollector((size) => Buffer.from(new Uint8Array(size))),
    ];
    let mode = -1;
    upstream.on("data", (chunk) => {
        const chunkMode = modeOf(chunk, true);
        if (mode !== chunkMode) {
            if (mode >= 0) {
                downstream.push(flush(buffers, mode));
            }
            mode = chunkMode;
        }
        if (mode === -1) {
            downstream.push(chunk);
            return;
        }
        const chunkSize = sizeOf(chunk);
        bytesSeen += chunkSize;
        const bufferSize = sizeOf(buffers[mode]);
        if (chunkSize >= size && bufferSize === 0) {
            downstream.push(chunk);
        }
        else {
            const newSize = merge(buffers, mode, chunk);
            if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
                streamBufferingLoggedWarning = true;
                logger?.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
            }
            if (newSize >= size) {
                downstream.push(flush(buffers, mode));
            }
        }
    });
    upstream.on("end", () => {
        if (mode !== -1) {
            const remainder = flush(buffers, mode);
            if (sizeOf(remainder) > 0) {
                downstream.push(remainder);
            }
        }
        downstream.push(null);
    });
    return downstream;
}

;// ./node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js

const getAwsChunkedEncodingStream = (readableStream, options) => {
    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
    const checksumRequired = base64Encoder !== undefined &&
        checksumAlgorithmFn !== undefined &&
        checksumLocationName !== undefined &&
        streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const awsChunkedEncodingStream = new external_stream_.Readable({ read: () => { } });
    readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r\n`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
    });
    readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r\n`);
        if (checksumRequired) {
            const checksum = base64Encoder(await digest);
            awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r\n`);
            awsChunkedEncodingStream.push(`\r\n`);
        }
        awsChunkedEncodingStream.push(null);
    });
    return awsChunkedEncodingStream;
};

;// ./node_modules/@smithy/util-stream/dist-es/headStream.browser.js
async function headStream(stream, bytes) {
    let byteLengthCounter = 0;
    const chunks = [];
    const reader = stream.getReader();
    let isDone = false;
    while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
            chunks.push(value);
            byteLengthCounter += value?.byteLength ?? 0;
        }
        if (byteLengthCounter >= bytes) {
            break;
        }
        isDone = done;
    }
    reader.releaseLock();
    const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
    let offset = 0;
    for (const chunk of chunks) {
        if (chunk.byteLength > collected.byteLength - offset) {
            collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
            break;
        }
        else {
            collected.set(chunk, offset);
        }
        offset += chunk.length;
    }
    return collected;
}

;// ./node_modules/@smithy/util-stream/dist-es/headStream.js



const headStream_headStream = (stream, bytes) => {
    if (isReadableStream(stream)) {
        return headStream(stream, bytes);
    }
    return new Promise((resolve, reject) => {
        const collector = new Collector();
        collector.limit = bytes;
        stream.pipe(collector);
        stream.on("error", (err) => {
            collector.end();
            reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function () {
            const bytes = new Uint8Array(Buffer.concat(this.buffers));
            resolve(bytes);
        });
    });
};
class Collector extends external_stream_.Writable {
    constructor() {
        super(...arguments);
        this.buffers = [];
        this.limit = Infinity;
        this.bytesBuffered = 0;
    }
    _write(chunk, encoding, callback) {
        this.buffers.push(chunk);
        this.bytesBuffered += chunk.byteLength ?? 0;
        if (this.bytesBuffered >= this.limit) {
            const excess = this.bytesBuffered - this.limit;
            const tailBuffer = this.buffers[this.buffers.length - 1];
            this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);
            this.emit("finish");
        }
        callback();
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/node-http-handler/dist-es/index.js + 14 modules
var node_http_handler_dist_es = __webpack_require__(5310);
// EXTERNAL MODULE: ./node_modules/@smithy/util-buffer-from/dist-es/index.js
var util_buffer_from_dist_es = __webpack_require__(9290);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var protocol_http_dist_es = __webpack_require__(3608);
// EXTERNAL MODULE: ./node_modules/@smithy/querystring-builder/dist-es/index.js
var querystring_builder_dist_es = __webpack_require__(5901);
;// ./node_modules/@smithy/fetch-http-handler/dist-es/create-request.js
function createRequest(url, requestOptions) {
    return new Request(url, requestOptions);
}

;// ./node_modules/@smithy/fetch-http-handler/dist-es/request-timeout.js
function request_timeout_requestTimeout(timeoutInMs = 0) {
    return new Promise((resolve, reject) => {
        if (timeoutInMs) {
            setTimeout(() => {
                const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
                timeoutError.name = "TimeoutError";
                reject(timeoutError);
            }, timeoutInMs);
        }
    });
}

;// ./node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js




const keepAliveSupport = {
    supported: undefined,
};
class FetchHttpHandler {
    static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
            return instanceOrOptions;
        }
        return new FetchHttpHandler(instanceOrOptions);
    }
    constructor(options) {
        if (typeof options === "function") {
            this.configProvider = options().then((opts) => opts || {});
        }
        else {
            this.config = options ?? {};
            this.configProvider = Promise.resolve(this.config);
        }
        if (keepAliveSupport.supported === undefined) {
            keepAliveSupport.supported = Boolean(typeof Request !== "undefined" && "keepalive" in createRequest("https://[::1]"));
        }
    }
    destroy() {
    }
    async handle(request, { abortSignal, requestTimeout } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
        }
        const requestTimeoutInMs = requestTimeout ?? this.config.requestTimeout;
        const keepAlive = this.config.keepAlive === true;
        const credentials = this.config.credentials;
        if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = (0,querystring_builder_dist_es.buildQueryString)(request.query || {});
        if (queryString) {
            path += `?${queryString}`;
        }
        if (request.fragment) {
            path += `#${request.fragment}`;
        }
        let auth = "";
        if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}@`;
        }
        const { port, method } = request;
        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? undefined : request.body;
        const requestOptions = {
            body,
            headers: new Headers(request.headers),
            method: method,
            credentials,
        };
        if (this.config?.cache) {
            requestOptions.cache = this.config.cache;
        }
        if (body) {
            requestOptions.duplex = "half";
        }
        if (typeof AbortController !== "undefined") {
            requestOptions.signal = abortSignal;
        }
        if (keepAliveSupport.supported) {
            requestOptions.keepalive = keepAlive;
        }
        if (typeof this.config.requestInit === "function") {
            Object.assign(requestOptions, this.config.requestInit(request));
        }
        let removeSignalEventListener = () => { };
        const fetchRequest = createRequest(url, requestOptions);
        const raceOfPromises = [
            fetch(fetchRequest).then((response) => {
                const fetchHeaders = response.headers;
                const transformedHeaders = {};
                for (const pair of fetchHeaders.entries()) {
                    transformedHeaders[pair[0]] = pair[1];
                }
                const hasReadableStream = response.body != undefined;
                if (!hasReadableStream) {
                    return response.blob().then((body) => ({
                        response: new protocol_http_dist_es.HttpResponse({
                            headers: transformedHeaders,
                            reason: response.statusText,
                            statusCode: response.status,
                            body,
                        }),
                    }));
                }
                return {
                    response: new protocol_http_dist_es.HttpResponse({
                        headers: transformedHeaders,
                        reason: response.statusText,
                        statusCode: response.status,
                        body: response.body,
                    }),
                };
            }),
            request_timeout_requestTimeout(requestTimeoutInMs),
        ];
        if (abortSignal) {
            raceOfPromises.push(new Promise((resolve, reject) => {
                const onAbort = () => {
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    reject(abortError);
                };
                if (typeof abortSignal.addEventListener === "function") {
                    const signal = abortSignal;
                    signal.addEventListener("abort", onAbort, { once: true });
                    removeSignalEventListener = () => signal.removeEventListener("abort", onAbort);
                }
                else {
                    abortSignal.onabort = onAbort;
                }
            }));
        }
        return Promise.race(raceOfPromises).finally(removeSignalEventListener);
    }
    updateHttpClientConfig(key, value) {
        this.config = undefined;
        this.configProvider = this.configProvider.then((config) => {
            config[key] = value;
            return config;
        });
    }
    httpHandlerConfigs() {
        return this.config ?? {};
    }
}

;// ./node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js

const streamCollector = async (stream) => {
    if ((typeof Blob === "function" && stream instanceof Blob) || stream.constructor?.name === "Blob") {
        if (Blob.prototype.arrayBuffer !== undefined) {
            return new Uint8Array(await stream.arrayBuffer());
        }
        return collectBlob(stream);
    }
    return collectStream(stream);
};
async function collectBlob(blob) {
    const base64 = await readToBase64(blob);
    const arrayBuffer = (0,dist_es.fromBase64)(base64);
    return new Uint8Array(arrayBuffer);
}
async function collectStream(stream) {
    const chunks = [];
    const reader = stream.getReader();
    let isDone = false;
    let length = 0;
    while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
            chunks.push(value);
            length += value.length;
        }
        isDone = done;
    }
    const collected = new Uint8Array(length);
    let offset = 0;
    for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
    }
    return collected;
}
function readToBase64(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            if (reader.readyState !== 2) {
                return reject(new Error("Reader aborted too early"));
            }
            const result = (reader.result ?? "");
            const commaIndex = result.indexOf(",");
            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = () => reject(new Error("Read aborted"));
        reader.onerror = () => reject(reader.error);
        reader.readAsDataURL(blob);
    });
}

;// ./node_modules/@smithy/fetch-http-handler/dist-es/index.js



// EXTERNAL MODULE: ./node_modules/@smithy/util-hex-encoding/dist-es/index.js
var util_hex_encoding_dist_es = __webpack_require__(8004);
;// ./node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js





const ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
const sdkStreamMixin = (stream) => {
    if (!isBlobInstance(stream) && !isReadableStream(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async () => {
        if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await streamCollector(stream);
    };
    const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
            throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\n" +
                "If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
    };
    return Object.assign(stream, {
        transformToByteArray: transformToByteArray,
        transformToString: async (encoding) => {
            const buf = await transformToByteArray();
            if (encoding === "base64") {
                return (0,dist_es.toBase64)(buf);
            }
            else if (encoding === "hex") {
                return (0,util_hex_encoding_dist_es.toHex)(buf);
            }
            else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") {
                return (0,util_utf8_dist_es.toUtf8)(buf);
            }
            else if (typeof TextDecoder === "function") {
                return new TextDecoder(encoding).decode(buf);
            }
            else {
                throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
            }
        },
        transformToWebStream: () => {
            if (transformed) {
                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            transformed = true;
            if (isBlobInstance(stream)) {
                return blobToWebStream(stream);
            }
            else if (isReadableStream(stream)) {
                return stream;
            }
            else {
                throw new Error(`Cannot transform payload to web stream, got ${stream}`);
            }
        },
    });
};
const isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;

;// ./node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js




const sdk_stream_mixin_ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
const sdk_stream_mixin_sdkStreamMixin = (stream) => {
    if (!(stream instanceof external_stream_.Readable)) {
        try {
            return sdkStreamMixin(stream);
        }
        catch (e) {
            const name = stream?.__proto__?.constructor?.name || stream;
            throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
    }
    let transformed = false;
    const transformToByteArray = async () => {
        if (transformed) {
            throw new Error(sdk_stream_mixin_ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0,node_http_handler_dist_es.streamCollector)(stream);
    };
    return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
            const buf = await transformToByteArray();
            if (encoding === undefined || Buffer.isEncoding(encoding)) {
                return (0,util_buffer_from_dist_es.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
            }
            else {
                const decoder = new TextDecoder(encoding);
                return decoder.decode(buf);
            }
        },
        transformToWebStream: () => {
            if (transformed) {
                throw new Error(sdk_stream_mixin_ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            if (stream.readableFlowing !== null) {
                throw new Error("The stream has been consumed by other callbacks.");
            }
            if (typeof external_stream_.Readable.toWeb !== "function") {
                throw new Error("Readable.toWeb() is not supported. Please ensure a polyfill is available.");
            }
            transformed = true;
            return external_stream_.Readable.toWeb(stream);
        },
    });
};

;// ./node_modules/@smithy/util-stream/dist-es/splitStream.browser.js
async function splitStream(stream) {
    if (typeof stream.stream === "function") {
        stream = stream.stream();
    }
    const readableStream = stream;
    return readableStream.tee();
}

;// ./node_modules/@smithy/util-stream/dist-es/splitStream.js



async function splitStream_splitStream(stream) {
    if (isReadableStream(stream) || isBlob(stream)) {
        return splitStream(stream);
    }
    const stream1 = new external_stream_.PassThrough();
    const stream2 = new external_stream_.PassThrough();
    stream.pipe(stream1);
    stream.pipe(stream2);
    return [stream1, stream2];
}

;// ./node_modules/@smithy/util-stream/dist-es/index.js











/***/ }),

/***/ 2766:
/***/ ((module) => {

/**
 * Obliterator Iterator Class
 * ===========================
 *
 * Simple class representing the library's iterators.
 */

/**
 * Iterator class.
 *
 * @constructor
 * @param {function} next - Next function.
 */
function Iterator(next) {

  // Hiding the given function
  Object.defineProperty(this, '_next', {
    writable: false,
    enumerable: false,
    value: next
  });

  // Is the iterator complete?
  this.done = false;
}

/**
 * Next function.
 *
 * @return {object}
 */
// NOTE: maybe this should dropped for performance?
Iterator.prototype.next = function() {
  if (this.done)
    return {done: true};

  var step = this._next();

  if (step.done)
    this.done = true;

  return step;
};

/**
 * If symbols are supported, we add `next` to `Symbol.iterator`.
 */
if (typeof Symbol !== 'undefined')
  Iterator.prototype[Symbol.iterator] = function() {
    return this;
  };

/**
 * Returning an iterator of the given values.
 *
 * @param  {any...} values - Values.
 * @return {Iterator}
 */
Iterator.of = function() {
  var args = arguments,
      l = args.length,
      i = 0;

  return new Iterator(function() {
    if (i >= l)
      return {done: true};

    return {done: false, value: args[i++]};
  });
};

/**
 * Returning an empty iterator.
 *
 * @return {Iterator}
 */
Iterator.empty = function() {
  var iterator = new Iterator(null);
  iterator.done = true;

  return iterator;
};

/**
 * Returning whether the given value is an iterator.
 *
 * @param  {any} value - Value.
 * @return {boolean}
 */
Iterator.is = function(value) {
  if (value instanceof Iterator)
    return true;

  return (
    typeof value === 'object' &&
    value !== null &&
    typeof value.next === 'function'
  );
};

/**
 * Exporting.
 */
module.exports = Iterator;


/***/ }),

/***/ 2809:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createPaginator: () => (/* binding */ createPaginator)
/* harmony export */ });
const makePagedClientRequest = async (CommandCtor, client, input, withCommand = (_) => _, ...args) => {
    let command = new CommandCtor(input);
    command = withCommand(command) ?? command;
    return await client.send(command, ...args);
};
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
    return async function* paginateOperation(config, input, ...additionalArguments) {
        const _input = input;
        let token = config.startingToken ?? _input[inputTokenName];
        let hasNext = true;
        let page;
        while (hasNext) {
            _input[inputTokenName] = token;
            if (pageSizeTokenName) {
                _input[pageSizeTokenName] = _input[pageSizeTokenName] ?? config.pageSize;
            }
            if (config.client instanceof ClientCtor) {
                page = await makePagedClientRequest(CommandCtor, config.client, input, config.withCommand, ...additionalArguments);
            }
            else {
                throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
            }
            yield page;
            const prevToken = token;
            token = get(page, outputTokenName);
            hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
        }
        return undefined;
    };
}
const get = (fromObject, path) => {
    let cursor = fromObject;
    const pathComponents = path.split(".");
    for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
            return undefined;
        }
        cursor = cursor[step];
    }
    return cursor;
};


/***/ }),

/***/ 3054:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  CONFIG_PREFIX_SEPARATOR: () => (/* reexport */ CONFIG_PREFIX_SEPARATOR),
  DEFAULT_PROFILE: () => (/* reexport */ DEFAULT_PROFILE),
  ENV_PROFILE: () => (/* reexport */ ENV_PROFILE),
  getHomeDir: () => (/* reexport */ getHomeDir),
  getProfileName: () => (/* reexport */ getProfileName),
  getSSOTokenFilepath: () => (/* reexport */ getSSOTokenFilepath),
  getSSOTokenFromFile: () => (/* reexport */ getSSOTokenFromFile),
  loadSharedConfigFiles: () => (/* reexport */ loadSharedConfigFiles),
  loadSsoSessionData: () => (/* reexport */ loadSsoSessionData),
  parseKnownFiles: () => (/* reexport */ parseKnownFiles)
});

// EXTERNAL MODULE: external "os"
var external_os_ = __webpack_require__(857);
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(6928);
;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js


const homeDirCache = {};
const getHomeDirCacheKey = () => {
    if (process && process.geteuid) {
        return `${process.geteuid()}`;
    }
    return "DEFAULT";
};
const getHomeDir = () => {
    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${external_path_.sep}` } = process.env;
    if (HOME)
        return HOME;
    if (USERPROFILE)
        return USERPROFILE;
    if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
    const homeDirCacheKey = getHomeDirCacheKey();
    if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0,external_os_.homedir)();
    return homeDirCache[homeDirCacheKey];
};

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js
const ENV_PROFILE = "AWS_PROFILE";
const DEFAULT_PROFILE = "default";
const getProfileName = (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;

// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6982);
;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js



const getSSOTokenFilepath = (id) => {
    const hasher = (0,external_crypto_.createHash)("sha1");
    const cacheName = hasher.update(id).digest("hex");
    return (0,external_path_.join)(getHomeDir(), ".aws", "sso", "cache", `${cacheName}.json`);
};

// EXTERNAL MODULE: external "fs"
var external_fs_ = __webpack_require__(9896);
;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js


const { readFile } = external_fs_.promises;
const getSSOTokenFromFile = async (id) => {
    const ssoTokenFilepath = getSSOTokenFilepath(id);
    const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
    return JSON.parse(ssoTokenText);
};

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js


const getConfigData = (data) => Object.entries(data)
    .filter(([key]) => {
    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
    if (indexOfSeparator === -1) {
        return false;
    }
    return Object.values(dist_es.IniSectionType).includes(key.substring(0, indexOfSeparator));
})
    .reduce((acc, [key, value]) => {
    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
    const updatedKey = key.substring(0, indexOfSeparator) === dist_es.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
    acc[updatedKey] = value;
    return acc;
}, {
    ...(data.default && { default: data.default }),
});

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js


const ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
const getConfigFilepath = () => process.env[ENV_CONFIG_PATH] || (0,external_path_.join)(getHomeDir(), ".aws", "config");

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js


const ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
const getCredentialsFilepath = () => process.env[ENV_CREDENTIALS_PATH] || (0,external_path_.join)(getHomeDir(), ".aws", "credentials");

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js


const prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
const profileNameBlockList = ["__proto__", "profile __proto__"];
const parseIni = (iniData) => {
    const map = {};
    let currentSection;
    let currentSubSection;
    for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
            currentSection = undefined;
            currentSubSection = undefined;
            const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
            const matches = prefixKeyRegex.exec(sectionName);
            if (matches) {
                const [, prefix, , name] = matches;
                if (Object.values(dist_es.IniSectionType).includes(prefix)) {
                    currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
                }
            }
            else {
                currentSection = sectionName;
            }
            if (profileNameBlockList.includes(sectionName)) {
                throw new Error(`Found invalid profile name "${sectionName}"`);
            }
        }
        else if (currentSection) {
            const indexOfEqualsSign = trimmedLine.indexOf("=");
            if (![0, -1].includes(indexOfEqualsSign)) {
                const [name, value] = [
                    trimmedLine.substring(0, indexOfEqualsSign).trim(),
                    trimmedLine.substring(indexOfEqualsSign + 1).trim(),
                ];
                if (value === "") {
                    currentSubSection = name;
                }
                else {
                    if (currentSubSection && iniLine.trimStart() === iniLine) {
                        currentSubSection = undefined;
                    }
                    map[currentSection] = map[currentSection] || {};
                    const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
                    map[currentSection][key] = value;
                }
            }
        }
    }
    return map;
};

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js

const { readFile: slurpFile_readFile } = external_fs_.promises;
const filePromisesHash = {};
const slurpFile = (path, options) => {
    if (!filePromisesHash[path] || options?.ignoreCache) {
        filePromisesHash[path] = slurpFile_readFile(path, "utf8");
    }
    return filePromisesHash[path];
};

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js







const swallowError = () => ({});
const CONFIG_PREFIX_SEPARATOR = ".";
const loadSharedConfigFiles = async (init = {}) => {
    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
    const homeDir = getHomeDir();
    const relativeHomeDirPrefix = "~/";
    let resolvedFilepath = filepath;
    if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = (0,external_path_.join)(homeDir, filepath.slice(2));
    }
    let resolvedConfigFilepath = configFilepath;
    if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = (0,external_path_.join)(homeDir, configFilepath.slice(2));
    }
    const parsedFiles = await Promise.all([
        slurpFile(resolvedConfigFilepath, {
            ignoreCache: init.ignoreCache,
        })
            .then(parseIni)
            .then(getConfigData)
            .catch(swallowError),
        slurpFile(resolvedFilepath, {
            ignoreCache: init.ignoreCache,
        })
            .then(parseIni)
            .catch(swallowError),
    ]);
    return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
    };
};

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js


const getSsoSessionData = (data) => Object.entries(data)
    .filter(([key]) => key.startsWith(dist_es.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR))
    .reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {});

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js




const loadSsoSessionData_swallowError = () => ({});
const loadSsoSessionData = async (init = {}) => slurpFile(init.configFilepath ?? getConfigFilepath())
    .then(parseIni)
    .then(getSsoSessionData)
    .catch(loadSsoSessionData_swallowError);

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js
const mergeConfigFiles = (...files) => {
    const merged = {};
    for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
            if (merged[key] !== undefined) {
                Object.assign(merged[key], values);
            }
            else {
                merged[key] = values;
            }
        }
    }
    return merged;
};

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js


const parseKnownFiles = async (init) => {
    const parsedFiles = await loadSharedConfigFiles(init);
    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
};

;// ./node_modules/@smithy/shared-ini-file-loader/dist-es/index.js










/***/ }),

/***/ 3197:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  fromUtf8: () => (/* reexport */ fromUtf8),
  toUint8Array: () => (/* reexport */ toUint8Array),
  toUtf8: () => (/* reexport */ toUtf8)
});

// EXTERNAL MODULE: ./node_modules/@smithy/util-buffer-from/dist-es/index.js
var dist_es = __webpack_require__(9290);
;// ./node_modules/@smithy/util-utf8/dist-es/fromUtf8.js

const fromUtf8 = (input) => {
    const buf = (0,dist_es.fromString)(input, "utf8");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
};

;// ./node_modules/@smithy/util-utf8/dist-es/toUint8Array.js

const toUint8Array = (data) => {
    if (typeof data === "string") {
        return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
};

;// ./node_modules/@smithy/util-utf8/dist-es/toUtf8.js

const toUtf8 = (input) => {
    if (typeof input === "string") {
        return input;
    }
    if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
    }
    return (0,dist_es.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
};

;// ./node_modules/@smithy/util-utf8/dist-es/index.js





/***/ }),

/***/ 3323:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  AdaptiveRetryStrategy: () => (/* reexport */ AdaptiveRetryStrategy),
  ConfiguredRetryStrategy: () => (/* reexport */ ConfiguredRetryStrategy),
  DEFAULT_MAX_ATTEMPTS: () => (/* reexport */ DEFAULT_MAX_ATTEMPTS),
  DEFAULT_RETRY_DELAY_BASE: () => (/* reexport */ DEFAULT_RETRY_DELAY_BASE),
  DEFAULT_RETRY_MODE: () => (/* reexport */ DEFAULT_RETRY_MODE),
  DefaultRateLimiter: () => (/* reexport */ DefaultRateLimiter),
  INITIAL_RETRY_TOKENS: () => (/* reexport */ INITIAL_RETRY_TOKENS),
  INVOCATION_ID_HEADER: () => (/* reexport */ INVOCATION_ID_HEADER),
  MAXIMUM_RETRY_DELAY: () => (/* reexport */ MAXIMUM_RETRY_DELAY),
  NO_RETRY_INCREMENT: () => (/* reexport */ NO_RETRY_INCREMENT),
  REQUEST_HEADER: () => (/* reexport */ REQUEST_HEADER),
  RETRY_COST: () => (/* reexport */ RETRY_COST),
  RETRY_MODES: () => (/* reexport */ RETRY_MODES),
  StandardRetryStrategy: () => (/* reexport */ StandardRetryStrategy),
  THROTTLING_RETRY_DELAY_BASE: () => (/* reexport */ THROTTLING_RETRY_DELAY_BASE),
  TIMEOUT_RETRY_COST: () => (/* reexport */ TIMEOUT_RETRY_COST)
});

;// ./node_modules/@smithy/util-retry/dist-es/config.js
var RETRY_MODES;
(function (RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
const DEFAULT_MAX_ATTEMPTS = 3;
const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;

// EXTERNAL MODULE: ./node_modules/@smithy/service-error-classification/dist-es/index.js + 1 modules
var dist_es = __webpack_require__(4542);
;// ./node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js

class DefaultRateLimiter {
    constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
        return Date.now() / 1000;
    }
    async getSendToken() {
        return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
        if (!this.enabled) {
            return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;
            await new Promise((resolve) => DefaultRateLimiter.setTimeoutFn(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0,dist_es.isThrottlingError)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
        }
        else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
        this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
        }
    }
    getPrecise(num) {
        return parseFloat(num.toFixed(8));
    }
}
DefaultRateLimiter.setTimeoutFn = setTimeout;

;// ./node_modules/@smithy/util-retry/dist-es/constants.js
const DEFAULT_RETRY_DELAY_BASE = 100;
const MAXIMUM_RETRY_DELAY = 20 * 1000;
const THROTTLING_RETRY_DELAY_BASE = 500;
const INITIAL_RETRY_TOKENS = 500;
const RETRY_COST = 5;
const TIMEOUT_RETRY_COST = 10;
const NO_RETRY_INCREMENT = 1;
const INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
const REQUEST_HEADER = "amz-sdk-request";

;// ./node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js

const getDefaultRetryBackoffStrategy = () => {
    let delayBase = DEFAULT_RETRY_DELAY_BASE;
    const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    };
    const setDelayBase = (delay) => {
        delayBase = delay;
    };
    return {
        computeNextBackoffDelay,
        setDelayBase,
    };
};

;// ./node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js

const createDefaultRetryToken = ({ retryDelay, retryCount, retryCost, }) => {
    const getRetryCount = () => retryCount;
    const getRetryDelay = () => Math.min(MAXIMUM_RETRY_DELAY, retryDelay);
    const getRetryCost = () => retryCost;
    return {
        getRetryCount,
        getRetryDelay,
        getRetryCost,
    };
};

;// ./node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js




class StandardRetryStrategy {
    constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = RETRY_MODES.STANDARD;
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
    }
    async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
            retryDelay: DEFAULT_RETRY_DELAY_BASE,
            retryCount: 0,
        });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
            const errorType = errorInfo.errorType;
            this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
            const retryDelay = errorInfo.retryAfterHint
                ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType)
                : delayFromErrorType;
            const capacityCost = this.getCapacityCost(errorType);
            this.capacity -= capacityCost;
            return createDefaultRetryToken({
                retryDelay,
                retryCount: token.getRetryCount() + 1,
                retryCost: capacityCost,
            });
        }
        throw new Error("No retry token available");
    }
    recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
    }
    getCapacity() {
        return this.capacity;
    }
    async getMaxAttempts() {
        try {
            return await this.maxAttemptsProvider();
        }
        catch (error) {
            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
            return DEFAULT_MAX_ATTEMPTS;
        }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return (attempts < maxAttempts &&
            this.capacity >= this.getCapacityCost(errorInfo.errorType) &&
            this.isRetryableError(errorInfo.errorType));
    }
    getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
    }
    isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
}

;// ./node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js



class AdaptiveRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
    }
    async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
    }
}

;// ./node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js


class ConfiguredRetryStrategy extends StandardRetryStrategy {
    constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
            this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        }
        else {
            this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
    }
}

;// ./node_modules/@smithy/util-retry/dist-es/index.js









/***/ }),

/***/ 3325:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   ExecuteTransactionCommand: () => (/* binding */ ExecuteTransactionCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class ExecuteTransactionCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep(_endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ExecuteTransaction", {})
    .n("DynamoDBClient", "ExecuteTransactionCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_ExecuteTransactionCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_ExecuteTransactionCommand)
    .build() {
}


/***/ }),

/***/ 3351:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   resolvedPath: () => (/* binding */ resolvedPath)
/* harmony export */ });
/* harmony import */ var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7916);

const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
    if (input != null && input[memberName] !== undefined) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel
            ? labelValue
                .split("/")
                .map((segment) => (0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(segment))
                .join("/")
            : (0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
    }
    return resolvedPath;
};


/***/ }),

/***/ 3410:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  NODE_APP_ID_CONFIG_OPTIONS: () => (/* reexport */ NODE_APP_ID_CONFIG_OPTIONS),
  UA_APP_ID_ENV_NAME: () => (/* reexport */ UA_APP_ID_ENV_NAME),
  UA_APP_ID_INI_NAME: () => (/* reexport */ UA_APP_ID_INI_NAME),
  createDefaultUserAgentProvider: () => (/* reexport */ createDefaultUserAgentProvider),
  crtAvailability: () => (/* reexport */ crtAvailability),
  defaultUserAgent: () => (/* reexport */ defaultUserAgent)
});

// EXTERNAL MODULE: external "os"
var external_os_ = __webpack_require__(857);
;// external "process"
const external_process_namespaceObject = require("process");
;// ./node_modules/@aws-sdk/util-user-agent-node/dist-es/crt-availability.js
const crtAvailability = {
    isCrtAvailable: false,
};

;// ./node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js

const isCrtAvailable = () => {
    if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
    }
    return null;
};

;// ./node_modules/@aws-sdk/util-user-agent-node/dist-es/defaultUserAgent.js




const createDefaultUserAgentProvider = ({ serviceId, clientVersion }) => {
    return async (config) => {
        const sections = [
            ["aws-sdk-js", clientVersion],
            ["ua", "2.1"],
            [`os/${(0,external_os_.platform)()}`, (0,external_os_.release)()],
            ["lang/js"],
            ["md/nodejs", `${external_process_namespaceObject.versions.node}`],
        ];
        const crtAvailable = isCrtAvailable();
        if (crtAvailable) {
            sections.push(crtAvailable);
        }
        if (serviceId) {
            sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (external_process_namespaceObject.env.AWS_EXECUTION_ENV) {
            sections.push([`exec-env/${external_process_namespaceObject.env.AWS_EXECUTION_ENV}`]);
        }
        const appId = await config?.userAgentAppId?.();
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
    };
};
const defaultUserAgent = createDefaultUserAgentProvider;

// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js + 5 modules
var dist_es = __webpack_require__(6827);
;// ./node_modules/@aws-sdk/util-user-agent-node/dist-es/nodeAppIdConfigOptions.js

const UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
const UA_APP_ID_INI_NAME = "sdk_ua_app_id";
const UA_APP_ID_INI_NAME_DEPRECATED = "sdk-ua-app-id";
const NODE_APP_ID_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[UA_APP_ID_ENV_NAME],
    configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME] ?? profile[UA_APP_ID_INI_NAME_DEPRECATED],
    default: dist_es.DEFAULT_UA_APP_ID,
};

;// ./node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js




/***/ }),

/***/ 3415:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setFeature: () => (/* binding */ setFeature)
/* harmony export */ });
function setFeature(context, feature, value) {
    if (!context.__aws_sdk_context) {
        context.__aws_sdk_context = {
            features: {},
        };
    }
    else if (!context.__aws_sdk_context.features) {
        context.__aws_sdk_context.features = {};
    }
    context.__aws_sdk_context.features[feature] = value;
}


/***/ }),

/***/ 3608:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Field: () => (/* reexport */ Field),
  Fields: () => (/* reexport */ Fields),
  HttpRequest: () => (/* reexport */ HttpRequest),
  HttpResponse: () => (/* reexport */ HttpResponse),
  getHttpHandlerExtensionConfiguration: () => (/* reexport */ getHttpHandlerExtensionConfiguration),
  isValidHostname: () => (/* reexport */ isValidHostname),
  resolveHttpHandlerRuntimeConfig: () => (/* reexport */ resolveHttpHandlerRuntimeConfig)
});

;// ./node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js
const getHttpHandlerExtensionConfiguration = (runtimeConfig) => {
    return {
        setHttpHandler(handler) {
            runtimeConfig.httpHandler = handler;
        },
        httpHandler() {
            return runtimeConfig.httpHandler;
        },
        updateHttpClientConfig(key, value) {
            runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
            return runtimeConfig.httpHandler.httpHandlerConfigs();
        },
    };
};
const resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {
    return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler(),
    };
};

;// ./node_modules/@smithy/protocol-http/dist-es/extensions/index.js


// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/protocol-http/dist-es/Field.js

class Field {
    constructor({ name, kind = dist_es.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
    }
    add(value) {
        this.values.push(value);
    }
    set(values) {
        this.values = values;
    }
    remove(value) {
        this.values = this.values.filter((v) => v !== value);
    }
    toString() {
        return this.values.map((v) => (v.includes(",") || v.includes(" ") ? `"${v}"` : v)).join(", ");
    }
    get() {
        return this.values;
    }
}

;// ./node_modules/@smithy/protocol-http/dist-es/Fields.js
class Fields {
    constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
    }
    setField(field) {
        this.entries[field.name.toLowerCase()] = field;
    }
    getField(name) {
        return this.entries[name.toLowerCase()];
    }
    removeField(name) {
        delete this.entries[name.toLowerCase()];
    }
    getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
    }
}

;// ./node_modules/@smithy/protocol-http/dist-es/httpRequest.js
class HttpRequest {
    constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
            ? options.protocol.slice(-1) !== ":"
                ? `${options.protocol}:`
                : options.protocol
            : "https:";
        this.path = options.path ? (options.path.charAt(0) !== "/" ? `/${options.path}` : options.path) : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
    }
    static clone(request) {
        const cloned = new HttpRequest({
            ...request,
            headers: { ...request.headers },
        });
        if (cloned.query) {
            cloned.query = cloneQuery(cloned.query);
        }
        return cloned;
    }
    static isInstance(request) {
        if (!request) {
            return false;
        }
        const req = request;
        return ("method" in req &&
            "protocol" in req &&
            "hostname" in req &&
            "path" in req &&
            typeof req["query"] === "object" &&
            typeof req["headers"] === "object");
    }
    clone() {
        return HttpRequest.clone(this);
    }
}
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [...param] : param,
        };
    }, {});
}

;// ./node_modules/@smithy/protocol-http/dist-es/httpResponse.js
class HttpResponse {
    constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response)
            return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}

;// ./node_modules/@smithy/protocol-http/dist-es/isValidHostname.js
function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}

;// ./node_modules/@smithy/protocol-http/dist-es/index.js










/***/ }),

/***/ 3695:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isArrayBuffer: () => (/* binding */ isArrayBuffer)
/* harmony export */ });
const isArrayBuffer = (arg) => (typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer) ||
    Object.prototype.toString.call(arg) === "[object ArrayBuffer]";


/***/ }),

/***/ 3832:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $Command: () => (/* reexport */ dist_es.Command),
  BatchExecuteStatementCommand: () => (/* reexport */ BatchExecuteStatementCommand),
  BatchGetCommand: () => (/* reexport */ BatchGetCommand),
  BatchWriteCommand: () => (/* reexport */ BatchWriteCommand),
  DeleteCommand: () => (/* reexport */ DeleteCommand),
  DynamoDBDocument: () => (/* reexport */ DynamoDBDocument),
  DynamoDBDocumentClient: () => (/* reexport */ DynamoDBDocumentClient),
  DynamoDBDocumentClientCommand: () => (/* reexport */ DynamoDBDocumentClientCommand),
  ExecuteStatementCommand: () => (/* reexport */ ExecuteStatementCommand),
  ExecuteTransactionCommand: () => (/* reexport */ ExecuteTransactionCommand),
  GetCommand: () => (/* reexport */ GetCommand),
  NumberValue: () => (/* reexport */ NumberValue),
  PutCommand: () => (/* reexport */ PutCommand),
  QueryCommand: () => (/* reexport */ QueryCommand),
  ScanCommand: () => (/* reexport */ ScanCommand),
  TransactGetCommand: () => (/* reexport */ TransactGetCommand),
  TransactWriteCommand: () => (/* reexport */ TransactWriteCommand),
  UpdateCommand: () => (/* reexport */ UpdateCommand),
  __Client: () => (/* reexport */ dist_es.Client),
  paginateQuery: () => (/* reexport */ paginateQuery),
  paginateScan: () => (/* reexport */ paginateScan)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchExecuteStatementCommand.js
var commands_BatchExecuteStatementCommand = __webpack_require__(7210);
// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 41 modules
var dist_es = __webpack_require__(9764);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
var setFeature = __webpack_require__(3415);
;// ./node_modules/@aws-sdk/util-dynamodb/dist-es/NumberValue.js
class NumberValue {
    value;
    constructor(value) {
        if (typeof value === "object" && "N" in value) {
            this.value = String(value.N);
        }
        else {
            this.value = String(value);
        }
        const valueOf = typeof value.valueOf() === "number" ? value.valueOf() : 0;
        const imprecise = valueOf > Number.MAX_SAFE_INTEGER ||
            valueOf < Number.MIN_SAFE_INTEGER ||
            Math.abs(valueOf) === Infinity ||
            Number.isNaN(valueOf);
        if (imprecise) {
            throw new Error(`NumberValue should not be initialized with an imprecise number=${valueOf}. Use a string instead.`);
        }
    }
    static from(value) {
        return new NumberValue(value);
    }
    toAttributeValue() {
        return {
            N: this.toString(),
        };
    }
    toBigInt() {
        const stringValue = this.toString();
        return BigInt(stringValue);
    }
    toString() {
        return String(this.value);
    }
    valueOf() {
        return this.toString();
    }
}

;// ./node_modules/@aws-sdk/util-dynamodb/dist-es/convertToAttr.js

const convertToAttr = (data, options) => {
    if (data === undefined) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
    }
    else if (data === null && typeof data === "object") {
        return convertToNullAttr();
    }
    else if (Array.isArray(data)) {
        return convertToListAttr(data, options);
    }
    else if (data?.constructor?.name === "Set") {
        return convertToSetAttr(data, options);
    }
    else if (data?.constructor?.name === "Map") {
        return convertToMapAttrFromIterable(data, options);
    }
    else if (data?.constructor?.name === "Object" ||
        (!data.constructor && typeof data === "object")) {
        return convertToMapAttrFromEnumerableProps(data, options);
    }
    else if (isBinary(data)) {
        if (data.length === 0 && options?.convertEmptyValues) {
            return convertToNullAttr();
        }
        return convertToBinaryAttr(data);
    }
    else if (typeof data === "boolean" || data?.constructor?.name === "Boolean") {
        return { BOOL: data.valueOf() };
    }
    else if (typeof data === "number" || data?.constructor?.name === "Number") {
        return convertToNumberAttr(data, options);
    }
    else if (data instanceof NumberValue) {
        return data.toAttributeValue();
    }
    else if (typeof data === "bigint") {
        return convertToBigIntAttr(data);
    }
    else if (typeof data === "string" || data?.constructor?.name === "String") {
        if (data.length === 0 && options?.convertEmptyValues) {
            return convertToNullAttr();
        }
        return convertToStringAttr(data);
    }
    else if (options?.convertClassInstanceToMap && typeof data === "object") {
        return convertToMapAttrFromEnumerableProps(data, options);
    }
    throw new Error(`Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`);
};
const convertToListAttr = (data, options) => ({
    L: data
        .filter((item) => typeof item !== "function" &&
        (!options?.removeUndefinedValues || (options?.removeUndefinedValues && item !== undefined)))
        .map((item) => convertToAttr(item, options)),
});
const convertToSetAttr = (set, options) => {
    const setToOperate = options?.removeUndefinedValues ? new Set([...set].filter((value) => value !== undefined)) : set;
    if (!options?.removeUndefinedValues && setToOperate.has(undefined)) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
    }
    if (setToOperate.size === 0) {
        if (options?.convertEmptyValues) {
            return convertToNullAttr();
        }
        throw new Error(`Pass a non-empty set, or options.convertEmptyValues=true.`);
    }
    const item = setToOperate.values().next().value;
    if (item instanceof NumberValue) {
        return {
            NS: Array.from(setToOperate).map((_) => _.toString()),
        };
    }
    else if (typeof item === "number") {
        return {
            NS: Array.from(setToOperate)
                .map((num) => convertToNumberAttr(num, options))
                .map((item) => item.N),
        };
    }
    else if (typeof item === "bigint") {
        return {
            NS: Array.from(setToOperate)
                .map(convertToBigIntAttr)
                .map((item) => item.N),
        };
    }
    else if (typeof item === "string") {
        return {
            SS: Array.from(setToOperate)
                .map(convertToStringAttr)
                .map((item) => item.S),
        };
    }
    else if (isBinary(item)) {
        return {
            BS: Array.from(setToOperate)
                .map(convertToBinaryAttr)
                .map((item) => item.B),
        };
    }
    else {
        throw new Error(`Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`);
    }
};
const convertToMapAttrFromIterable = (data, options) => ({
    M: ((data) => {
        const map = {};
        for (const [key, value] of data) {
            if (typeof value !== "function" && (value !== undefined || !options?.removeUndefinedValues)) {
                map[key] = convertToAttr(value, options);
            }
        }
        return map;
    })(data),
});
const convertToMapAttrFromEnumerableProps = (data, options) => ({
    M: ((data) => {
        const map = {};
        for (const key in data) {
            const value = data[key];
            if (typeof value !== "function" && (value !== undefined || !options?.removeUndefinedValues)) {
                map[key] = convertToAttr(value, options);
            }
        }
        return map;
    })(data),
});
const convertToNullAttr = () => ({ NULL: true });
const convertToBinaryAttr = (data) => ({ B: data });
const convertToStringAttr = (data) => ({ S: data.toString() });
const convertToBigIntAttr = (data) => ({ N: data.toString() });
const validateBigIntAndThrow = (errorPrefix) => {
    throw new Error(`${errorPrefix} Use NumberValue from @aws-sdk/lib-dynamodb.`);
};
const convertToNumberAttr = (num, options) => {
    if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]
        .map((val) => val.toString())
        .includes(num.toString())) {
        throw new Error(`Special numeric value ${num.toString()} is not allowed`);
    }
    else if (!options?.allowImpreciseNumbers) {
        if (Number(num) > Number.MAX_SAFE_INTEGER) {
            validateBigIntAndThrow(`Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`);
        }
        else if (Number(num) < Number.MIN_SAFE_INTEGER) {
            validateBigIntAndThrow(`Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`);
        }
    }
    return { N: num.toString() };
};
const isBinary = (data) => {
    const binaryTypes = [
        "ArrayBuffer",
        "Blob",
        "Buffer",
        "DataView",
        "File",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "BigInt64Array",
        "BigUint64Array",
    ];
    if (data?.constructor) {
        return binaryTypes.includes(data.constructor.name);
    }
    return false;
};

;// ./node_modules/@aws-sdk/util-dynamodb/dist-es/marshall.js

function marshall(data, options) {
    const attributeValue = convertToAttr(data, options);
    const [key, value] = Object.entries(attributeValue)[0];
    switch (key) {
        case "M":
        case "L":
            return options?.convertTopLevelContainer ? attributeValue : value;
        case "SS":
        case "NS":
        case "BS":
        case "S":
        case "N":
        case "B":
        case "NULL":
        case "BOOL":
        case "$unknown":
        default:
            return attributeValue;
    }
}

;// ./node_modules/@aws-sdk/util-dynamodb/dist-es/convertToNative.js

const convertToNative = (data, options) => {
    for (const [key, value] of Object.entries(data)) {
        if (value !== undefined) {
            switch (key) {
                case "NULL":
                    return null;
                case "BOOL":
                    return Boolean(value);
                case "N":
                    return convertNumber(value, options);
                case "B":
                    return convertBinary(value);
                case "S":
                    return convertString(value);
                case "L":
                    return convertList(value, options);
                case "M":
                    return convertMap(value, options);
                case "NS":
                    return new Set(value.map((item) => convertNumber(item, options)));
                case "BS":
                    return new Set(value.map(convertBinary));
                case "SS":
                    return new Set(value.map(convertString));
                default:
                    throw new Error(`Unsupported type passed: ${key}`);
            }
        }
    }
    throw new Error(`No value defined: ${JSON.stringify(data)}`);
};
const convertNumber = (numString, options) => {
    if (typeof options?.wrapNumbers === "function") {
        return options?.wrapNumbers(numString);
    }
    if (options?.wrapNumbers) {
        return NumberValue.from(numString);
    }
    const num = Number(numString);
    const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
    const isLargeFiniteNumber = (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num);
    if (isLargeFiniteNumber) {
        if (typeof BigInt === "function") {
            try {
                return BigInt(numString);
            }
            catch (error) {
                throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);
            }
        }
        else {
            throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);
        }
    }
    return num;
};
const convertString = (stringValue) => stringValue;
const convertBinary = (binaryValue) => binaryValue;
const convertList = (list, options) => list.map((item) => convertToNative(item, options));
const convertMap = (map, options) => Object.entries(map).reduce((acc, [key, value]) => ((acc[key] = convertToNative(value, options)), acc), {});

;// ./node_modules/@aws-sdk/util-dynamodb/dist-es/unmarshall.js

const unmarshall = (data, options) => {
    if (options?.convertWithoutMapWrapper) {
        return convertToNative(data, options);
    }
    return convertToNative({ M: data }, options);
};

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/utils.js

const SELF = null;
const ALL_VALUES = {};
const ALL_MEMBERS = [];
const NEXT_LEVEL = "*";
const processObj = (obj, processFunc, keyNodes) => {
    if (obj !== undefined) {
        if (keyNodes == null) {
            return processFunc(obj);
        }
        else {
            const keys = Object.keys(keyNodes);
            const goToNextLevel = keys.length === 1 && keys[0] === NEXT_LEVEL;
            const someChildren = keys.length >= 1 && !goToNextLevel;
            const allChildren = keys.length === 0;
            if (someChildren) {
                return processKeysInObj(obj, processFunc, keyNodes);
            }
            else if (allChildren) {
                return processAllKeysInObj(obj, processFunc, SELF);
            }
            else if (goToNextLevel) {
                return Object.entries(obj ?? {}).reduce((acc, [k, v]) => {
                    if (typeof v !== "function") {
                        acc[k] = processObj(v, processFunc, keyNodes[NEXT_LEVEL]);
                    }
                    return acc;
                }, (Array.isArray(obj) ? [] : {}));
            }
        }
    }
    return undefined;
};
const processKeysInObj = (obj, processFunc, keyNodes) => {
    let accumulator;
    if (Array.isArray(obj)) {
        accumulator = obj.filter((item) => typeof item !== "function");
    }
    else {
        accumulator = {};
        for (const [k, v] of Object.entries(obj)) {
            if (typeof v !== "function") {
                accumulator[k] = v;
            }
        }
    }
    for (const [nodeKey, nodes] of Object.entries(keyNodes)) {
        if (typeof obj[nodeKey] === "function") {
            continue;
        }
        const processedValue = processObj(obj[nodeKey], processFunc, nodes);
        if (processedValue !== undefined && typeof processedValue !== "function") {
            accumulator[nodeKey] = processedValue;
        }
    }
    return accumulator;
};
const processAllKeysInObj = (obj, processFunc, keyNodes) => {
    if (Array.isArray(obj)) {
        return obj.filter((item) => typeof item !== "function").map((item) => processObj(item, processFunc, keyNodes));
    }
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (typeof value === "function") {
            return acc;
        }
        const processedValue = processObj(value, processFunc, keyNodes);
        if (processedValue !== undefined && typeof processedValue !== "function") {
            acc[key] = processedValue;
        }
        return acc;
    }, {});
};
const marshallInput = (obj, keyNodes, options) => {
    const marshallFunc = (toMarshall) => marshall(toMarshall, options);
    return processKeysInObj(obj, marshallFunc, keyNodes);
};
const unmarshallOutput = (obj, keyNodes, options) => {
    const unmarshallFunc = (toMarshall) => unmarshall(toMarshall, options);
    return processKeysInObj(obj, unmarshallFunc, keyNodes);
};

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/baseCommand/DynamoDBDocumentClientCommand.js



class DynamoDBDocumentClientCommand extends dist_es.Command {
    addMarshallingMiddleware(configuration) {
        const { marshallOptions = {}, unmarshallOptions = {} } = configuration.translateConfig || {};
        marshallOptions.convertTopLevelContainer = marshallOptions.convertTopLevelContainer ?? true;
        unmarshallOptions.convertWithoutMapWrapper = unmarshallOptions.convertWithoutMapWrapper ?? true;
        this.clientCommand.middlewareStack.addRelativeTo((next, context) => async (args) => {
            (0,setFeature.setFeature)(context, "DDB_MAPPER", "d");
            return next({
                ...args,
                input: marshallInput(args.input, this.inputKeyNodes, marshallOptions),
            });
        }, {
            name: "DocumentMarshall",
            relation: "before",
            toMiddleware: "serializerMiddleware",
            override: true,
        });
        this.clientCommand.middlewareStack.addRelativeTo((next, context) => async (args) => {
            const deserialized = await next(args);
            deserialized.output = unmarshallOutput(deserialized.output, this.outputKeyNodes, unmarshallOptions);
            return deserialized;
        }, {
            name: "DocumentUnmarshall",
            relation: "before",
            toMiddleware: "deserializerMiddleware",
            override: true,
        });
    }
}

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/BatchExecuteStatementCommand.js





class BatchExecuteStatementCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        Statements: {
            "*": {
                Parameters: ALL_MEMBERS,
            },
        },
    };
    outputKeyNodes = {
        Responses: {
            "*": {
                Error: {
                    Item: ALL_VALUES,
                },
                Item: ALL_VALUES,
            },
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new commands_BatchExecuteStatementCommand.BatchExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchGetItemCommand.js
var BatchGetItemCommand = __webpack_require__(9051);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/BatchGetCommand.js





class BatchGetCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        RequestItems: {
            "*": {
                Keys: {
                    "*": ALL_VALUES,
                },
            },
        },
    };
    outputKeyNodes = {
        Responses: {
            "*": {
                "*": ALL_VALUES,
            },
        },
        UnprocessedKeys: {
            "*": {
                Keys: {
                    "*": ALL_VALUES,
                },
            },
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new BatchGetItemCommand.BatchGetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchWriteItemCommand.js
var BatchWriteItemCommand = __webpack_require__(8822);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/BatchWriteCommand.js





class BatchWriteCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        RequestItems: {
            "*": {
                "*": {
                    PutRequest: {
                        Item: ALL_VALUES,
                    },
                    DeleteRequest: {
                        Key: ALL_VALUES,
                    },
                },
            },
        },
    };
    outputKeyNodes = {
        UnprocessedItems: {
            "*": {
                "*": {
                    PutRequest: {
                        Item: ALL_VALUES,
                    },
                    DeleteRequest: {
                        Key: ALL_VALUES,
                    },
                },
            },
        },
        ItemCollectionMetrics: {
            "*": {
                "*": {
                    ItemCollectionKey: ALL_VALUES,
                },
            },
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new BatchWriteItemCommand.BatchWriteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteItemCommand.js
var DeleteItemCommand = __webpack_require__(7610);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/DeleteCommand.js





class DeleteCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        Key: ALL_VALUES,
        Expected: {
            "*": {
                Value: SELF,
                AttributeValueList: ALL_MEMBERS,
            },
        },
        ExpressionAttributeValues: ALL_VALUES,
    };
    outputKeyNodes = {
        Attributes: ALL_VALUES,
        ItemCollectionMetrics: {
            ItemCollectionKey: ALL_VALUES,
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new DeleteItemCommand.DeleteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExecuteStatementCommand.js
var commands_ExecuteStatementCommand = __webpack_require__(7042);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/ExecuteStatementCommand.js





class ExecuteStatementCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        Parameters: ALL_MEMBERS,
    };
    outputKeyNodes = {
        Items: {
            "*": ALL_VALUES,
        },
        LastEvaluatedKey: ALL_VALUES,
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new commands_ExecuteStatementCommand.ExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExecuteTransactionCommand.js
var commands_ExecuteTransactionCommand = __webpack_require__(3325);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/ExecuteTransactionCommand.js





class ExecuteTransactionCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        TransactStatements: {
            "*": {
                Parameters: ALL_MEMBERS,
            },
        },
    };
    outputKeyNodes = {
        Responses: {
            "*": {
                Item: ALL_VALUES,
            },
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new commands_ExecuteTransactionCommand.ExecuteTransactionCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/GetItemCommand.js
var GetItemCommand = __webpack_require__(931);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/GetCommand.js





class GetCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        Key: ALL_VALUES,
    };
    outputKeyNodes = {
        Item: ALL_VALUES,
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new GetItemCommand.GetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/PutItemCommand.js
var PutItemCommand = __webpack_require__(1908);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/PutCommand.js





class PutCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        Item: ALL_VALUES,
        Expected: {
            "*": {
                Value: SELF,
                AttributeValueList: ALL_MEMBERS,
            },
        },
        ExpressionAttributeValues: ALL_VALUES,
    };
    outputKeyNodes = {
        Attributes: ALL_VALUES,
        ItemCollectionMetrics: {
            ItemCollectionKey: ALL_VALUES,
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new PutItemCommand.PutItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/QueryCommand.js
var commands_QueryCommand = __webpack_require__(1570);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/QueryCommand.js





class QueryCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        KeyConditions: {
            "*": {
                AttributeValueList: ALL_MEMBERS,
            },
        },
        QueryFilter: {
            "*": {
                AttributeValueList: ALL_MEMBERS,
            },
        },
        ExclusiveStartKey: ALL_VALUES,
        ExpressionAttributeValues: ALL_VALUES,
    };
    outputKeyNodes = {
        Items: {
            "*": ALL_VALUES,
        },
        LastEvaluatedKey: ALL_VALUES,
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new commands_QueryCommand.QueryCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ScanCommand.js
var commands_ScanCommand = __webpack_require__(4517);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/ScanCommand.js





class ScanCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        ScanFilter: {
            "*": {
                AttributeValueList: ALL_MEMBERS,
            },
        },
        ExclusiveStartKey: ALL_VALUES,
        ExpressionAttributeValues: ALL_VALUES,
    };
    outputKeyNodes = {
        Items: {
            "*": ALL_VALUES,
        },
        LastEvaluatedKey: ALL_VALUES,
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new commands_ScanCommand.ScanCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TransactGetItemsCommand.js
var TransactGetItemsCommand = __webpack_require__(7648);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/TransactGetCommand.js





class TransactGetCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        TransactItems: {
            "*": {
                Get: {
                    Key: ALL_VALUES,
                },
            },
        },
    };
    outputKeyNodes = {
        Responses: {
            "*": {
                Item: ALL_VALUES,
            },
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new TransactGetItemsCommand.TransactGetItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TransactWriteItemsCommand.js
var TransactWriteItemsCommand = __webpack_require__(1691);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/TransactWriteCommand.js





class TransactWriteCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        TransactItems: {
            "*": {
                ConditionCheck: {
                    Key: ALL_VALUES,
                    ExpressionAttributeValues: ALL_VALUES,
                },
                Put: {
                    Item: ALL_VALUES,
                    ExpressionAttributeValues: ALL_VALUES,
                },
                Delete: {
                    Key: ALL_VALUES,
                    ExpressionAttributeValues: ALL_VALUES,
                },
                Update: {
                    Key: ALL_VALUES,
                    ExpressionAttributeValues: ALL_VALUES,
                },
            },
        },
    };
    outputKeyNodes = {
        ItemCollectionMetrics: {
            "*": {
                "*": {
                    ItemCollectionKey: ALL_VALUES,
                },
            },
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new TransactWriteItemsCommand.TransactWriteItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateItemCommand.js
var UpdateItemCommand = __webpack_require__(2692);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/UpdateCommand.js





class UpdateCommand extends DynamoDBDocumentClientCommand {
    input;
    inputKeyNodes = {
        Key: ALL_VALUES,
        AttributeUpdates: {
            "*": {
                Value: SELF,
            },
        },
        Expected: {
            "*": {
                Value: SELF,
                AttributeValueList: ALL_MEMBERS,
            },
        },
        ExpressionAttributeValues: ALL_VALUES,
    };
    outputKeyNodes = {
        Attributes: ALL_VALUES,
        ItemCollectionMetrics: {
            ItemCollectionKey: ALL_VALUES,
        },
    };
    clientCommand;
    middlewareStack;
    constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new UpdateItemCommand.UpdateItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/DynamoDBDocumentClient.js


class DynamoDBDocumentClient extends dist_es.Client {
    config;
    constructor(client, translateConfig) {
        super(client.config);
        this.config = client.config;
        this.config.translateConfig = translateConfig;
        this.middlewareStack = client.middlewareStack;
        if (this.config?.cacheMiddleware) {
            throw new Error("@aws-sdk/lib-dynamodb - cacheMiddleware=true is not compatible with the" +
                " DynamoDBDocumentClient. This option must be set to false.");
        }
    }
    static from(client, translateConfig) {
        return new DynamoDBDocumentClient(client, translateConfig);
    }
    destroy() {
    }
}

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/DynamoDBDocument.js














class DynamoDBDocument extends DynamoDBDocumentClient {
    static from(client, translateConfig) {
        return new DynamoDBDocument(client, translateConfig);
    }
    batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGet(args, optionsOrCb, cb) {
        const command = new BatchGetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchWrite(args, optionsOrCb, cb) {
        const command = new BatchWriteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    delete(args, optionsOrCb, cb) {
        const command = new DeleteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    executeTransaction(args, optionsOrCb, cb) {
        const command = new ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    get(args, optionsOrCb, cb) {
        const command = new GetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    put(args, optionsOrCb, cb) {
        const command = new PutCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    query(args, optionsOrCb, cb) {
        const command = new QueryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    scan(args, optionsOrCb, cb) {
        const command = new ScanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    transactGet(args, optionsOrCb, cb) {
        const command = new TransactGetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    transactWrite(args, optionsOrCb, cb) {
        const command = new TransactWriteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    update(args, optionsOrCb, cb) {
        const command = new UpdateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") {
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            }
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/commands/index.js














// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/pagination/createPaginator.js
var createPaginator = __webpack_require__(2809);
;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/pagination/QueryPaginator.js



const paginateQuery = (0,createPaginator.createPaginator)(DynamoDBDocumentClient, QueryCommand, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/pagination/ScanPaginator.js



const paginateScan = (0,createPaginator.createPaginator)(DynamoDBDocumentClient, ScanCommand, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");

;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/pagination/index.js




;// ./node_modules/@aws-sdk/lib-dynamodb/dist-es/index.js







/***/ }),

/***/ 4007:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DynamoDBServiceException: () => (/* binding */ DynamoDBServiceException),
/* harmony export */   __ServiceException: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException)
/* harmony export */ });
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9764);


class DynamoDBServiceException extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, DynamoDBServiceException.prototype);
    }
}


/***/ }),

/***/ 4055:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $Command: () => (/* reexport */ BatchExecuteStatementCommand.$Command),
  ApproximateCreationDateTimePrecision: () => (/* reexport */ models_0.ApproximateCreationDateTimePrecision),
  AttributeAction: () => (/* reexport */ models_0.AttributeAction),
  AttributeValue: () => (/* reexport */ models_0.AttributeValue),
  BackupInUseException: () => (/* reexport */ models_0.BackupInUseException),
  BackupNotFoundException: () => (/* reexport */ models_0.BackupNotFoundException),
  BackupStatus: () => (/* reexport */ models_0.BackupStatus),
  BackupType: () => (/* reexport */ models_0.BackupType),
  BackupTypeFilter: () => (/* reexport */ models_0.BackupTypeFilter),
  BatchExecuteStatementCommand: () => (/* reexport */ BatchExecuteStatementCommand.BatchExecuteStatementCommand),
  BatchGetItemCommand: () => (/* reexport */ BatchGetItemCommand.BatchGetItemCommand),
  BatchStatementErrorCodeEnum: () => (/* reexport */ models_0.BatchStatementErrorCodeEnum),
  BatchWriteItemCommand: () => (/* reexport */ BatchWriteItemCommand.BatchWriteItemCommand),
  BillingMode: () => (/* reexport */ models_0.BillingMode),
  ComparisonOperator: () => (/* reexport */ models_0.ComparisonOperator),
  ConditionalCheckFailedException: () => (/* reexport */ models_0.ConditionalCheckFailedException),
  ConditionalOperator: () => (/* reexport */ models_0.ConditionalOperator),
  ContinuousBackupsStatus: () => (/* reexport */ models_0.ContinuousBackupsStatus),
  ContinuousBackupsUnavailableException: () => (/* reexport */ models_0.ContinuousBackupsUnavailableException),
  ContributorInsightsAction: () => (/* reexport */ models_0.ContributorInsightsAction),
  ContributorInsightsStatus: () => (/* reexport */ models_0.ContributorInsightsStatus),
  CreateBackupCommand: () => (/* reexport */ CreateBackupCommand),
  CreateGlobalTableCommand: () => (/* reexport */ CreateGlobalTableCommand),
  CreateTableCommand: () => (/* reexport */ CreateTableCommand),
  DeleteBackupCommand: () => (/* reexport */ DeleteBackupCommand),
  DeleteItemCommand: () => (/* reexport */ DeleteItemCommand.DeleteItemCommand),
  DeleteResourcePolicyCommand: () => (/* reexport */ DeleteResourcePolicyCommand),
  DeleteTableCommand: () => (/* reexport */ DeleteTableCommand),
  DescribeBackupCommand: () => (/* reexport */ DescribeBackupCommand),
  DescribeContinuousBackupsCommand: () => (/* reexport */ DescribeContinuousBackupsCommand),
  DescribeContributorInsightsCommand: () => (/* reexport */ DescribeContributorInsightsCommand),
  DescribeEndpointsCommand: () => (/* reexport */ DescribeEndpointsCommand),
  DescribeExportCommand: () => (/* reexport */ DescribeExportCommand),
  DescribeGlobalTableCommand: () => (/* reexport */ DescribeGlobalTableCommand),
  DescribeGlobalTableSettingsCommand: () => (/* reexport */ DescribeGlobalTableSettingsCommand),
  DescribeImportCommand: () => (/* reexport */ DescribeImportCommand),
  DescribeKinesisStreamingDestinationCommand: () => (/* reexport */ DescribeKinesisStreamingDestinationCommand),
  DescribeLimitsCommand: () => (/* reexport */ DescribeLimitsCommand),
  DescribeTableCommand: () => (/* reexport */ DescribeTableCommand),
  DescribeTableReplicaAutoScalingCommand: () => (/* reexport */ DescribeTableReplicaAutoScalingCommand),
  DescribeTimeToLiveCommand: () => (/* reexport */ DescribeTimeToLiveCommand),
  DestinationStatus: () => (/* reexport */ models_0.DestinationStatus),
  DisableKinesisStreamingDestinationCommand: () => (/* reexport */ DisableKinesisStreamingDestinationCommand),
  DuplicateItemException: () => (/* reexport */ models_0.DuplicateItemException),
  DynamoDB: () => (/* reexport */ DynamoDB),
  DynamoDBClient: () => (/* reexport */ DynamoDBClient),
  DynamoDBServiceException: () => (/* reexport */ DynamoDBServiceException.DynamoDBServiceException),
  EnableKinesisStreamingDestinationCommand: () => (/* reexport */ EnableKinesisStreamingDestinationCommand),
  ExecuteStatementCommand: () => (/* reexport */ ExecuteStatementCommand.ExecuteStatementCommand),
  ExecuteTransactionCommand: () => (/* reexport */ ExecuteTransactionCommand.ExecuteTransactionCommand),
  ExportConflictException: () => (/* reexport */ models_0.ExportConflictException),
  ExportFormat: () => (/* reexport */ models_0.ExportFormat),
  ExportNotFoundException: () => (/* reexport */ models_0.ExportNotFoundException),
  ExportStatus: () => (/* reexport */ models_0.ExportStatus),
  ExportTableToPointInTimeCommand: () => (/* reexport */ ExportTableToPointInTimeCommand),
  ExportType: () => (/* reexport */ models_0.ExportType),
  ExportViewType: () => (/* reexport */ models_0.ExportViewType),
  GetItemCommand: () => (/* reexport */ GetItemCommand.GetItemCommand),
  GetResourcePolicyCommand: () => (/* reexport */ GetResourcePolicyCommand),
  GlobalTableAlreadyExistsException: () => (/* reexport */ models_0.GlobalTableAlreadyExistsException),
  GlobalTableNotFoundException: () => (/* reexport */ models_0.GlobalTableNotFoundException),
  GlobalTableStatus: () => (/* reexport */ models_0.GlobalTableStatus),
  IdempotentParameterMismatchException: () => (/* reexport */ models_0.IdempotentParameterMismatchException),
  ImportConflictException: () => (/* reexport */ models_0.ImportConflictException),
  ImportNotFoundException: () => (/* reexport */ models_0.ImportNotFoundException),
  ImportStatus: () => (/* reexport */ models_0.ImportStatus),
  ImportTableCommand: () => (/* reexport */ ImportTableCommand),
  IndexNotFoundException: () => (/* reexport */ models_0.IndexNotFoundException),
  IndexStatus: () => (/* reexport */ models_0.IndexStatus),
  InputCompressionType: () => (/* reexport */ models_0.InputCompressionType),
  InputFormat: () => (/* reexport */ models_0.InputFormat),
  InternalServerError: () => (/* reexport */ models_0.InternalServerError),
  InvalidEndpointException: () => (/* reexport */ models_0.InvalidEndpointException),
  InvalidExportTimeException: () => (/* reexport */ models_0.InvalidExportTimeException),
  InvalidRestoreTimeException: () => (/* reexport */ models_0.InvalidRestoreTimeException),
  ItemCollectionSizeLimitExceededException: () => (/* reexport */ models_0.ItemCollectionSizeLimitExceededException),
  KeyType: () => (/* reexport */ models_0.KeyType),
  LimitExceededException: () => (/* reexport */ models_0.LimitExceededException),
  ListBackupsCommand: () => (/* reexport */ ListBackupsCommand),
  ListContributorInsightsCommand: () => (/* reexport */ ListContributorInsightsCommand),
  ListExportsCommand: () => (/* reexport */ ListExportsCommand),
  ListGlobalTablesCommand: () => (/* reexport */ ListGlobalTablesCommand),
  ListImportsCommand: () => (/* reexport */ ListImportsCommand),
  ListTablesCommand: () => (/* reexport */ ListTablesCommand),
  ListTagsOfResourceCommand: () => (/* reexport */ ListTagsOfResourceCommand),
  MultiRegionConsistency: () => (/* reexport */ models_0.MultiRegionConsistency),
  PointInTimeRecoveryStatus: () => (/* reexport */ models_0.PointInTimeRecoveryStatus),
  PointInTimeRecoveryUnavailableException: () => (/* reexport */ models_0.PointInTimeRecoveryUnavailableException),
  PolicyNotFoundException: () => (/* reexport */ models_0.PolicyNotFoundException),
  ProjectionType: () => (/* reexport */ models_0.ProjectionType),
  ProvisionedThroughputExceededException: () => (/* reexport */ models_0.ProvisionedThroughputExceededException),
  PutItemCommand: () => (/* reexport */ PutItemCommand.PutItemCommand),
  PutResourcePolicyCommand: () => (/* reexport */ PutResourcePolicyCommand),
  QueryCommand: () => (/* reexport */ QueryCommand.QueryCommand),
  ReplicaAlreadyExistsException: () => (/* reexport */ models_0.ReplicaAlreadyExistsException),
  ReplicaNotFoundException: () => (/* reexport */ models_0.ReplicaNotFoundException),
  ReplicaStatus: () => (/* reexport */ models_0.ReplicaStatus),
  ReplicatedWriteConflictException: () => (/* reexport */ models_0.ReplicatedWriteConflictException),
  RequestLimitExceeded: () => (/* reexport */ models_0.RequestLimitExceeded),
  ResourceInUseException: () => (/* reexport */ models_0.ResourceInUseException),
  ResourceNotFoundException: () => (/* reexport */ models_0.ResourceNotFoundException),
  RestoreTableFromBackupCommand: () => (/* reexport */ RestoreTableFromBackupCommand),
  RestoreTableToPointInTimeCommand: () => (/* reexport */ RestoreTableToPointInTimeCommand),
  ReturnConsumedCapacity: () => (/* reexport */ models_0.ReturnConsumedCapacity),
  ReturnItemCollectionMetrics: () => (/* reexport */ models_0.ReturnItemCollectionMetrics),
  ReturnValue: () => (/* reexport */ models_0.ReturnValue),
  ReturnValuesOnConditionCheckFailure: () => (/* reexport */ models_0.ReturnValuesOnConditionCheckFailure),
  S3SseAlgorithm: () => (/* reexport */ models_0.S3SseAlgorithm),
  SSEStatus: () => (/* reexport */ models_0.SSEStatus),
  SSEType: () => (/* reexport */ models_0.SSEType),
  ScalarAttributeType: () => (/* reexport */ models_0.ScalarAttributeType),
  ScanCommand: () => (/* reexport */ ScanCommand.ScanCommand),
  Select: () => (/* reexport */ models_0.Select),
  StreamViewType: () => (/* reexport */ models_0.StreamViewType),
  TableAlreadyExistsException: () => (/* reexport */ models_0.TableAlreadyExistsException),
  TableClass: () => (/* reexport */ models_0.TableClass),
  TableInUseException: () => (/* reexport */ models_0.TableInUseException),
  TableNotFoundException: () => (/* reexport */ models_0.TableNotFoundException),
  TableStatus: () => (/* reexport */ models_0.TableStatus),
  TagResourceCommand: () => (/* reexport */ TagResourceCommand),
  TimeToLiveStatus: () => (/* reexport */ models_0.TimeToLiveStatus),
  TransactGetItemsCommand: () => (/* reexport */ TransactGetItemsCommand.TransactGetItemsCommand),
  TransactWriteItemsCommand: () => (/* reexport */ TransactWriteItemsCommand.TransactWriteItemsCommand),
  TransactionCanceledException: () => (/* reexport */ models_0.TransactionCanceledException),
  TransactionConflictException: () => (/* reexport */ models_0.TransactionConflictException),
  TransactionInProgressException: () => (/* reexport */ models_0.TransactionInProgressException),
  UntagResourceCommand: () => (/* reexport */ UntagResourceCommand),
  UpdateContinuousBackupsCommand: () => (/* reexport */ UpdateContinuousBackupsCommand),
  UpdateContributorInsightsCommand: () => (/* reexport */ UpdateContributorInsightsCommand),
  UpdateGlobalTableCommand: () => (/* reexport */ UpdateGlobalTableCommand),
  UpdateGlobalTableSettingsCommand: () => (/* reexport */ UpdateGlobalTableSettingsCommand),
  UpdateItemCommand: () => (/* reexport */ UpdateItemCommand.UpdateItemCommand),
  UpdateKinesisStreamingDestinationCommand: () => (/* reexport */ UpdateKinesisStreamingDestinationCommand),
  UpdateTableCommand: () => (/* reexport */ UpdateTableCommand),
  UpdateTableReplicaAutoScalingCommand: () => (/* reexport */ UpdateTableReplicaAutoScalingCommand),
  UpdateTimeToLiveCommand: () => (/* reexport */ UpdateTimeToLiveCommand),
  WitnessStatus: () => (/* reexport */ models_0.WitnessStatus),
  __Client: () => (/* reexport */ smithy_client_dist_es.Client),
  paginateListContributorInsights: () => (/* reexport */ paginateListContributorInsights),
  paginateListExports: () => (/* reexport */ paginateListExports),
  paginateListImports: () => (/* reexport */ paginateListImports),
  paginateListTables: () => (/* reexport */ paginateListTables),
  paginateQuery: () => (/* reexport */ paginateQuery),
  paginateScan: () => (/* reexport */ paginateScan),
  waitForTableExists: () => (/* reexport */ waitForTableExists),
  waitForTableNotExists: () => (/* reexport */ waitForTableNotExists),
  waitUntilTableExists: () => (/* reexport */ waitUntilTableExists),
  waitUntilTableNotExists: () => (/* reexport */ waitUntilTableNotExists)
});

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var dist_es = __webpack_require__(7135);
;// ./node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/AccountIdEndpointModeConstants.js
const DEFAULT_ACCOUNT_ID_ENDPOINT_MODE = "preferred";
const ACCOUNT_ID_ENDPOINT_MODE_VALUES = ["disabled", "preferred", "required"];
function validateAccountIdEndpointMode(value) {
    return ACCOUNT_ID_ENDPOINT_MODE_VALUES.includes(value);
}

;// ./node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/AccountIdEndpointModeConfigResolver.js


const resolveAccountIdEndpointModeConfig = (input) => {
    const { accountIdEndpointMode } = input;
    const accountIdEndpointModeProvider = (0,dist_es.normalizeProvider)(accountIdEndpointMode ?? DEFAULT_ACCOUNT_ID_ENDPOINT_MODE);
    return Object.assign(input, {
        accountIdEndpointMode: async () => {
            const accIdMode = await accountIdEndpointModeProvider();
            if (!validateAccountIdEndpointMode(accIdMode)) {
                throw new Error(`Invalid value for accountIdEndpointMode: ${accIdMode}. Valid values are: "required", "preferred", "disabled".`);
            }
            return accIdMode;
        },
    });
};

;// ./node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/configurations.js
const ENV_ENDPOINT_DISCOVERY = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
const CONFIG_ENDPOINT_DISCOVERY = "endpoint_discovery_enabled";
const isFalsy = (value) => ["false", "0"].indexOf(value) >= 0;
const NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
            const envKey = ENV_ENDPOINT_DISCOVERY[i];
            if (envKey in env) {
                const value = env[envKey];
                if (value === "") {
                    throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
                }
                return !isFalsy(value);
            }
        }
    },
    configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
            const value = profile[CONFIG_ENDPOINT_DISCOVERY];
            if (value === undefined) {
                throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
            }
            return !isFalsy(value);
        }
    },
    default: undefined,
};

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var protocol_http_dist_es = __webpack_require__(3608);
;// ./node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/getCacheKey.js
const getCacheKey = async (commandName, config, options) => {
    const { accessKeyId } = await config.credentials();
    const { identifiers } = options;
    return JSON.stringify({
        ...(accessKeyId && { accessKeyId }),
        ...(identifiers && {
            commandName,
            identifiers: Object.entries(identifiers)
                .sort()
                .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}),
        }),
    });
};

;// ./node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/updateDiscoveredEndpointInCache.js
const requestQueue = {};
const updateDiscoveredEndpointInCache = async (config, options) => new Promise((resolve, reject) => {
    const { endpointCache } = config;
    const { cacheKey, commandName, identifiers } = options;
    const endpoints = endpointCache.get(cacheKey);
    if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
        if (options.isDiscoveredEndpointRequired) {
            if (!requestQueue[cacheKey])
                requestQueue[cacheKey] = [];
            requestQueue[cacheKey].push({ resolve, reject });
        }
        else {
            resolve();
        }
    }
    else if (endpoints && endpoints.length > 0) {
        resolve();
    }
    else {
        const placeholderEndpoints = [{ Address: "", CachePeriodInMinutes: 1 }];
        endpointCache.set(cacheKey, placeholderEndpoints);
        const command = new options.endpointDiscoveryCommandCtor({
            Operation: commandName.slice(0, -7),
            Identifiers: identifiers,
        });
        const handler = command.resolveMiddleware(options.clientStack, config, options.options);
        handler(command)
            .then((result) => {
            endpointCache.set(cacheKey, result.output.Endpoints);
            if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ resolve }) => {
                    resolve();
                });
                delete requestQueue[cacheKey];
            }
            resolve();
        })
            .catch((error) => {
            endpointCache.delete(cacheKey);
            const errorToThrow = Object.assign(new Error(`The operation to discover endpoint failed.` +
                ` Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`), { reason: error });
            if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ reject }) => {
                    reject(errorToThrow);
                });
                delete requestQueue[cacheKey];
            }
            if (options.isDiscoveredEndpointRequired) {
                reject(errorToThrow);
            }
            else {
                endpointCache.set(cacheKey, placeholderEndpoints);
                resolve();
            }
        });
    }
});

;// ./node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/endpointDiscoveryMiddleware.js



const endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {
    if (config.isCustomEndpoint) {
        if (config.isClientEndpointDiscoveryEnabled) {
            throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);
        }
        return next(args);
    }
    const { endpointDiscoveryCommandCtor } = config;
    const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
    const clientName = context.clientName;
    const commandName = context.commandName;
    const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
    const cacheKey = await getCacheKey(commandName, config, { identifiers });
    if (isDiscoveredEndpointRequired) {
        if (isEndpointDiscoveryEnabled === false) {
            throw new Error(`Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it.` +
                ` Please check your configurations.`);
        }
        await updateDiscoveredEndpointInCache(config, {
            ...middlewareConfig,
            commandName,
            cacheKey,
            endpointDiscoveryCommandCtor,
        });
    }
    else if (isEndpointDiscoveryEnabled) {
        updateDiscoveredEndpointInCache(config, {
            ...middlewareConfig,
            commandName,
            cacheKey,
            endpointDiscoveryCommandCtor,
        });
    }
    const { request } = args;
    if (cacheKey && protocol_http_dist_es.HttpRequest.isInstance(request)) {
        const endpoint = config.endpointCache.getEndpoint(cacheKey);
        if (endpoint) {
            request.hostname = endpoint;
        }
    }
    return next(args);
};

;// ./node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/getEndpointDiscoveryPlugin.js

const endpointDiscoveryMiddlewareOptions = {
    name: "endpointDiscoveryMiddleware",
    step: "build",
    tags: ["ENDPOINT_DISCOVERY"],
    override: true,
};
const getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
    applyToStack: (commandStack) => {
        commandStack.add(endpointDiscoveryMiddleware(pluginConfig, middlewareConfig), endpointDiscoveryMiddlewareOptions);
    },
});
const getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig) => ({
    applyToStack: (commandStack) => {
        commandStack.add(endpointDiscoveryMiddleware(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: true }), endpointDiscoveryMiddlewareOptions);
    },
});
const getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig) => ({
    applyToStack: (commandStack) => {
        commandStack.add(endpointDiscoveryMiddleware(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: false }), endpointDiscoveryMiddlewareOptions);
    },
});

// EXTERNAL MODULE: ./node_modules/mnemonist/lru-cache.js
var lru_cache = __webpack_require__(1429);
var lru_cache_default = /*#__PURE__*/__webpack_require__.n(lru_cache);
;// ./node_modules/@aws-sdk/endpoint-cache/dist-es/EndpointCache.js

class EndpointCache {
    cache;
    constructor(capacity) {
        this.cache = new (lru_cache_default())(capacity);
    }
    getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
            return undefined;
        }
        const endpoints = endpointsWithExpiry.map((endpoint) => endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
    }
    get(key) {
        if (!this.has(key)) {
            return;
        }
        const value = this.cache.get(key);
        if (!value) {
            return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint) => now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
            this.delete(key);
            return undefined;
        }
        return endpointsWithExpiry;
    }
    set(key, endpoints) {
        const now = Date.now();
        this.cache.set(key, endpoints.map(({ Address, CachePeriodInMinutes }) => ({
            Address,
            Expires: now + CachePeriodInMinutes * 60 * 1000,
        })));
    }
    delete(key) {
        this.cache.set(key, []);
    }
    has(key) {
        if (!this.cache.has(key)) {
            return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
            return false;
        }
        return endpoints.length > 0;
    }
    clear() {
        this.cache.clear();
    }
}

;// ./node_modules/@aws-sdk/endpoint-cache/dist-es/index.js



;// ./node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/resolveEndpointDiscoveryConfig.js

const resolveEndpointDiscoveryConfig = (input, { endpointDiscoveryCommandCtor }) => {
    const { endpointCacheSize, endpointDiscoveryEnabled, endpointDiscoveryEnabledProvider } = input;
    return Object.assign(input, {
        endpointDiscoveryCommandCtor,
        endpointCache: new EndpointCache(endpointCacheSize ?? 1000),
        endpointDiscoveryEnabled: endpointDiscoveryEnabled !== undefined
            ? () => Promise.resolve(endpointDiscoveryEnabled)
            : endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: endpointDiscoveryEnabled !== undefined,
    });
};

;// ./node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/index.js




// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
var middleware_host_header_dist_es = __webpack_require__(1095);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js + 1 modules
var middleware_logger_dist_es = __webpack_require__(9359);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js
var middleware_recursion_detection_dist_es = __webpack_require__(8377);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js + 5 modules
var middleware_user_agent_dist_es = __webpack_require__(6827);
// EXTERNAL MODULE: ./node_modules/@smithy/config-resolver/dist-es/index.js + 17 modules
var config_resolver_dist_es = __webpack_require__(7735);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js + 2 modules
var getHttpAuthSchemeEndpointRuleSetPlugin = __webpack_require__(2404);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
var DefaultIdentityProviderConfig = __webpack_require__(612);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js + 1 modules
var getHttpSigningMiddleware = __webpack_require__(5172);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-content-length/dist-es/index.js
var middleware_content_length_dist_es = __webpack_require__(649);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-endpoint/dist-es/index.js + 12 modules
var middleware_endpoint_dist_es = __webpack_require__(427);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-retry/dist-es/index.js + 16 modules
var middleware_retry_dist_es = __webpack_require__(4422);
// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 41 modules
var smithy_client_dist_es = __webpack_require__(9764);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js + 15 modules
var resolveAwsSdkSigV4Config = __webpack_require__(4283);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/auth/httpAuthSchemeProvider.js


const defaultDynamoDBHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
        operation: (0,dist_es.getSmithyContext)(context).operation,
        region: (await (0,dist_es.normalizeProvider)(config.region)()) ||
            (() => {
                throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
            })(),
    };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
            name: "dynamodb",
            region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
            signingProperties: {
                config,
                context,
            },
        }),
    };
}
const defaultDynamoDBHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
        default: {
            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
    }
    return options;
};
const resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0,resolveAwsSdkSigV4Config.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {
        authSchemePreference: (0,dist_es.normalizeProvider)(config.authSchemePreference ?? []),
    });
};

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-serde/dist-es/index.js + 3 modules
var middleware_serde_dist_es = __webpack_require__(1208);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/endpoint/EndpointParameters.js
var EndpointParameters = __webpack_require__(7051);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/protocols/Aws_json1_0.js + 7 modules
var Aws_json1_0 = __webpack_require__(6021);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeEndpointsCommand.js






class DescribeEndpointsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(EndpointParameters.commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeEndpoints", {})
    .n("DynamoDBClient", "DescribeEndpointsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeEndpointsCommand)
    .de(Aws_json1_0.de_DescribeEndpointsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/package.json
const package_namespaceObject = /*#__PURE__*/JSON.parse('{"name":"@aws-sdk/client-dynamodb","description":"AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native","version":"3.863.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"node ../../scripts/compilation/inline client-dynamodb","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo dynamodb"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"5.2.0","@aws-crypto/sha256-js":"5.2.0","@aws-sdk/core":"3.863.0","@aws-sdk/credential-provider-node":"3.863.0","@aws-sdk/middleware-endpoint-discovery":"3.862.0","@aws-sdk/middleware-host-header":"3.862.0","@aws-sdk/middleware-logger":"3.862.0","@aws-sdk/middleware-recursion-detection":"3.862.0","@aws-sdk/middleware-user-agent":"3.863.0","@aws-sdk/region-config-resolver":"3.862.0","@aws-sdk/types":"3.862.0","@aws-sdk/util-endpoints":"3.862.0","@aws-sdk/util-user-agent-browser":"3.862.0","@aws-sdk/util-user-agent-node":"3.863.0","@smithy/config-resolver":"^4.1.5","@smithy/core":"^3.8.0","@smithy/fetch-http-handler":"^5.1.1","@smithy/hash-node":"^4.0.5","@smithy/invalid-dependency":"^4.0.5","@smithy/middleware-content-length":"^4.0.5","@smithy/middleware-endpoint":"^4.1.18","@smithy/middleware-retry":"^4.1.19","@smithy/middleware-serde":"^4.0.9","@smithy/middleware-stack":"^4.0.5","@smithy/node-config-provider":"^4.1.4","@smithy/node-http-handler":"^4.1.1","@smithy/protocol-http":"^5.1.3","@smithy/smithy-client":"^4.4.10","@smithy/types":"^4.3.2","@smithy/url-parser":"^4.0.5","@smithy/util-base64":"^4.0.0","@smithy/util-body-length-browser":"^4.0.0","@smithy/util-body-length-node":"^4.0.0","@smithy/util-defaults-mode-browser":"^4.0.26","@smithy/util-defaults-mode-node":"^4.0.26","@smithy/util-endpoints":"^3.0.7","@smithy/util-middleware":"^4.0.5","@smithy/util-retry":"^4.0.7","@smithy/util-utf8":"^4.0.0","@smithy/util-waiter":"^4.0.7","@types/uuid":"^9.0.1","tslib":"^2.6.2","uuid":"^9.0.1"},"devDependencies":{"@tsconfig/node18":"18.2.4","@types/node":"^18.19.69","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typescript":"~5.8.3"},"engines":{"node":">=18.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-dynamodb"}}');
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var emitWarningIfUnsupportedVersion = __webpack_require__(5122);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js + 2 modules
var NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = __webpack_require__(4472);
;// ./node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/NodeAccountIdEndpointModeConfigOptions.js

const err = "Invalid AccountIdEndpointMode value";
const _throw = (message) => {
    throw new Error(message);
};
const ENV_ACCOUNT_ID_ENDPOINT_MODE = "AWS_ACCOUNT_ID_ENDPOINT_MODE";
const CONFIG_ACCOUNT_ID_ENDPOINT_MODE = "account_id_endpoint_mode";
const NODE_ACCOUNT_ID_ENDPOINT_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
        const value = env[ENV_ACCOUNT_ID_ENDPOINT_MODE];
        if (value && !validateAccountIdEndpointMode(value)) {
            _throw(err);
        }
        return value;
    },
    configFileSelector: (profile) => {
        const value = profile[CONFIG_ACCOUNT_ID_ENDPOINT_MODE];
        if (value && !validateAccountIdEndpointMode(value)) {
            _throw(err);
        }
        return value;
    },
    default: DEFAULT_ACCOUNT_ID_ENDPOINT_MODE,
};

// EXTERNAL MODULE: ./node_modules/@aws-sdk/credential-provider-node/dist-es/index.js + 2 modules
var credential_provider_node_dist_es = __webpack_require__(8257);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js + 5 modules
var util_user_agent_node_dist_es = __webpack_require__(3410);
// EXTERNAL MODULE: ./node_modules/@smithy/hash-node/dist-es/index.js
var hash_node_dist_es = __webpack_require__(1701);
// EXTERNAL MODULE: ./node_modules/@smithy/node-config-provider/dist-es/index.js + 5 modules
var node_config_provider_dist_es = __webpack_require__(9987);
// EXTERNAL MODULE: ./node_modules/@smithy/node-http-handler/dist-es/index.js + 14 modules
var node_http_handler_dist_es = __webpack_require__(5310);
// EXTERNAL MODULE: ./node_modules/@smithy/util-body-length-node/dist-es/index.js + 1 modules
var util_body_length_node_dist_es = __webpack_require__(7809);
// EXTERNAL MODULE: ./node_modules/@smithy/util-retry/dist-es/index.js + 8 modules
var util_retry_dist_es = __webpack_require__(3323);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js + 4 modules
var AwsSdkSigV4Signer = __webpack_require__(6228);
// EXTERNAL MODULE: ./node_modules/@smithy/url-parser/dist-es/index.js + 1 modules
var url_parser_dist_es = __webpack_require__(2641);
// EXTERNAL MODULE: ./node_modules/@smithy/util-base64/dist-es/index.js + 2 modules
var util_base64_dist_es = __webpack_require__(4572);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/index.js + 3 modules
var util_utf8_dist_es = __webpack_require__(3197);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js + 15 modules
var util_endpoints_dist_es = __webpack_require__(643);
// EXTERNAL MODULE: ./node_modules/@smithy/util-endpoints/dist-es/index.js + 35 modules
var _smithy_util_endpoints_dist_es = __webpack_require__(8545);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/endpoint/ruleset.js
const S = "required", T = "type", U = "fn", V = "argv", W = "ref", X = "properties", Y = "headers";
const a = false, b = "isSet", c = "error", d = "endpoint", e = "tree", f = "PartitionResult", g = "stringEquals", h = "dynamodb", i = "getAttr", j = "aws.parseArn", k = "ParsedArn", l = "isValidHostLabel", m = "FirstArn", n = { [S]: false, [T]: "String" }, o = { [S]: true, "default": false, [T]: "Boolean" }, p = { [U]: "booleanEquals", [V]: [{ [W]: "UseFIPS" }, true] }, q = { [U]: "booleanEquals", [V]: [{ [W]: "UseDualStack" }, true] }, r = {}, s = { [W]: "Region" }, t = { [U]: "booleanEquals", [V]: [{ [U]: i, [V]: [{ [W]: f }, "supportsFIPS"] }, true] }, u = { [U]: "booleanEquals", [V]: [{ [U]: i, [V]: [{ [W]: f }, "supportsDualStack"] }, true] }, v = { "conditions": [{ [U]: b, [V]: [{ [W]: "AccountIdEndpointMode" }] }, { [U]: g, [V]: [{ [W]: "AccountIdEndpointMode" }, "required"] }], "rules": [{ [c]: "Invalid Configuration: AccountIdEndpointMode is required and FIPS is enabled, but FIPS account endpoints are not supported", [T]: c }], [T]: e }, w = { [U]: b, [V]: [{ [W]: "AccountIdEndpointMode" }] }, x = { [c]: "Invalid Configuration: AccountIdEndpointMode is required and FIPS is enabled, but FIPS account endpoints are not supported", [T]: c }, y = { [U]: i, [V]: [{ [W]: f }, "name"] }, z = { [d]: { "url": "https://dynamodb.{Region}.{PartitionResult#dnsSuffix}", [X]: {}, [Y]: {} }, [T]: d }, A = { [U]: "not", [V]: [p] }, B = { [c]: "Invalid Configuration: AccountIdEndpointMode is required and DualStack is enabled, but DualStack account endpoints are not supported", [T]: c }, C = { [U]: "not", [V]: [{ [U]: g, [V]: [{ [W]: "AccountIdEndpointMode" }, "disabled"] }] }, D = { [U]: g, [V]: [y, "aws"] }, E = { [U]: "not", [V]: [q] }, F = { [U]: g, [V]: [{ [U]: i, [V]: [{ [W]: k }, "service"] }, h] }, G = { [U]: l, [V]: [{ [U]: i, [V]: [{ [W]: k }, "region"] }, false] }, H = { [U]: g, [V]: [{ [U]: i, [V]: [{ [W]: k }, "region"] }, "{Region}"] }, I = { [U]: l, [V]: [{ [U]: i, [V]: [{ [W]: k }, "accountId"] }, false] }, J = { "url": "https://{ParsedArn#accountId}.ddb.{Region}.{PartitionResult#dnsSuffix}", [X]: {}, [Y]: {} }, K = { [W]: "ResourceArnList" }, L = { [W]: "AccountId" }, M = [p], N = [q], O = [s], P = [w, { [U]: g, [V]: [{ [W]: "AccountIdEndpointMode" }, "required"] }], Q = [A], R = [{ [W]: "ResourceArn" }];
const _data = { version: "1.0", parameters: { Region: n, UseDualStack: o, UseFIPS: o, Endpoint: n, AccountId: n, AccountIdEndpointMode: n, ResourceArn: n, ResourceArnList: { [S]: a, [T]: "stringArray" } }, rules: [{ conditions: [{ [U]: b, [V]: [{ [W]: "Endpoint" }] }], rules: [{ conditions: M, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [T]: c }, { conditions: N, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [T]: c }, { endpoint: { url: "{Endpoint}", [X]: r, [Y]: r }, [T]: d }], [T]: e }, { conditions: [{ [U]: b, [V]: O }], rules: [{ conditions: [{ [U]: "aws.partition", [V]: O, assign: f }], rules: [{ conditions: [{ [U]: g, [V]: [s, "local"] }], rules: [{ conditions: M, error: "Invalid Configuration: FIPS and local endpoint are not supported", [T]: c }, { conditions: N, error: "Invalid Configuration: Dualstack and local endpoint are not supported", [T]: c }, { endpoint: { url: "http://localhost:8000", [X]: { authSchemes: [{ signingRegion: "us-east-1", signingName: h, name: "sigv4" }] }, [Y]: r }, [T]: d }], [T]: e }, { conditions: [p, q], rules: [{ conditions: [t, u], rules: [v, { endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", [X]: r, [Y]: r }, [T]: d }], [T]: e }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [T]: c }], [T]: e }, { conditions: M, rules: [{ conditions: [t], rules: [{ conditions: [{ [U]: g, [V]: [y, "aws-us-gov"] }], rules: [v, z], [T]: e }, v, { endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dnsSuffix}", [X]: r, [Y]: r }, [T]: d }], [T]: e }, { error: "FIPS is enabled but this partition does not support FIPS", [T]: c }], [T]: e }, { conditions: N, rules: [{ conditions: [u], rules: [{ conditions: P, rules: [{ conditions: Q, rules: [B], [T]: e }, x], [T]: e }, { endpoint: { url: "https://dynamodb.{Region}.{PartitionResult#dualStackDnsSuffix}", [X]: r, [Y]: r }, [T]: d }], [T]: e }, { error: "DualStack is enabled but this partition does not support DualStack", [T]: c }], [T]: e }, { conditions: [w, C, D, A, E, { [U]: b, [V]: R }, { [U]: j, [V]: R, assign: k }, F, G, H, I], endpoint: J, [T]: d }, { conditions: [w, C, D, A, E, { [U]: b, [V]: [K] }, { [U]: i, [V]: [K, "[0]"], assign: m }, { [U]: j, [V]: [{ [W]: m }], assign: k }, F, G, H, I], endpoint: J, [T]: d }, { conditions: [w, C, D, A, E, { [U]: b, [V]: [L] }], rules: [{ conditions: [{ [U]: l, [V]: [L, a] }], rules: [{ endpoint: { url: "https://{AccountId}.ddb.{Region}.{PartitionResult#dnsSuffix}", [X]: r, [Y]: r }, [T]: d }], [T]: e }, { error: "Credentials-sourced account ID parameter is invalid", [T]: c }], [T]: e }, { conditions: P, rules: [{ conditions: Q, rules: [{ conditions: [E], rules: [{ conditions: [D], rules: [{ error: "AccountIdEndpointMode is required but no AccountID was provided or able to be loaded", [T]: c }], [T]: e }, { error: "Invalid Configuration: AccountIdEndpointMode is required but account endpoints are not supported in this partition", [T]: c }], [T]: e }, B], [T]: e }, x], [T]: e }, z], [T]: e }], [T]: e }, { error: "Invalid Configuration: Missing Region", [T]: c }] };
const ruleSet = _data;

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/endpoint/endpointResolver.js



const cache = new _smithy_util_endpoints_dist_es.EndpointCache({
    size: 50,
    params: [
        "AccountId",
        "AccountIdEndpointMode",
        "Endpoint",
        "Region",
        "ResourceArn",
        "ResourceArnList",
        "UseDualStack",
        "UseFIPS",
    ],
});
const defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0,_smithy_util_endpoints_dist_es.resolveEndpoint)(ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger,
    }));
};
_smithy_util_endpoints_dist_es.customEndpointFunctions.aws = util_endpoints_dist_es.awsEndpointFunctions;

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/runtimeConfig.shared.js







const getRuntimeConfig = (config) => {
    return {
        apiVersion: "2012-08-10",
        base64Decoder: config?.base64Decoder ?? util_base64_dist_es.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_dist_es.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultDynamoDBHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
            {
                schemeId: "aws.auth#sigv4",
                identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
                signer: new AwsSdkSigV4Signer.AwsSdkSigV4Signer(),
            },
        ],
        logger: config?.logger ?? new smithy_client_dist_es.NoOpLogger(),
        serviceId: config?.serviceId ?? "DynamoDB",
        urlParser: config?.urlParser ?? url_parser_dist_es.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_dist_es.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_dist_es.toUtf8,
    };
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-defaults-mode-node/dist-es/index.js + 3 modules
var util_defaults_mode_node_dist_es = __webpack_require__(4321);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/runtimeConfig.js

















const runtimeConfig_getRuntimeConfig = (config) => {
    (0,smithy_client_dist_es.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0,util_defaults_mode_node_dist_es.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_dist_es.loadConfigsForDefaultMode);
    const clientSharedValues = getRuntimeConfig(config);
    (0,emitWarningIfUnsupportedVersion.emitWarningIfUnsupportedVersion)(process.version);
    const loaderConfig = {
        profile: config?.profile,
        logger: clientSharedValues.logger,
    };
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        accountIdEndpointMode: config?.accountIdEndpointMode ?? (0,node_config_provider_dist_es.loadConfig)(NODE_ACCOUNT_ID_ENDPOINT_MODE_CONFIG_OPTIONS, loaderConfig),
        authSchemePreference: config?.authSchemePreference ?? (0,node_config_provider_dist_es.loadConfig)(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_dist_es.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_dist_es.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ??
            (0,util_user_agent_node_dist_es.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_namespaceObject.version }),
        endpointDiscoveryEnabledProvider: config?.endpointDiscoveryEnabledProvider ?? (0,node_config_provider_dist_es.loadConfig)(NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS, loaderConfig),
        maxAttempts: config?.maxAttempts ?? (0,node_config_provider_dist_es.loadConfig)(middleware_retry_dist_es.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region: config?.region ??
            (0,node_config_provider_dist_es.loadConfig)(config_resolver_dist_es.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_dist_es.NODE_REGION_CONFIG_FILE_OPTIONS, ...loaderConfig }),
        requestHandler: node_http_handler_dist_es.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ??
            (0,node_config_provider_dist_es.loadConfig)({
                ...middleware_retry_dist_es.NODE_RETRY_MODE_CONFIG_OPTIONS,
                default: async () => (await defaultConfigProvider()).retryMode || util_retry_dist_es.DEFAULT_RETRY_MODE,
            }, config),
        sha256: config?.sha256 ?? hash_node_dist_es.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_dist_es.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0,node_config_provider_dist_es.loadConfig)(config_resolver_dist_es.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0,node_config_provider_dist_es.loadConfig)(config_resolver_dist_es.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        userAgentAppId: config?.userAgentAppId ?? (0,node_config_provider_dist_es.loadConfig)(util_user_agent_node_dist_es.NODE_APP_ID_CONFIG_OPTIONS, loaderConfig),
    };
};

// EXTERNAL MODULE: ./node_modules/@aws-sdk/region-config-resolver/dist-es/index.js + 6 modules
var region_config_resolver_dist_es = __webpack_require__(6264);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/auth/httpAuthExtensionConfiguration.js
const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/runtimeExtensions.js




const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0,region_config_resolver_dist_es.getAwsRegionExtensionConfiguration)(runtimeConfig), (0,smithy_client_dist_es.getDefaultExtensionConfiguration)(runtimeConfig), (0,protocol_http_dist_es.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0,region_config_resolver_dist_es.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0,smithy_client_dist_es.resolveDefaultRuntimeConfig)(extensionConfiguration), (0,protocol_http_dist_es.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/DynamoDBClient.js


















class DynamoDBClient extends smithy_client_dist_es.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig_getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = (0,EndpointParameters.resolveClientEndpointParameters)(_config_0);
        const _config_2 = resolveAccountIdEndpointModeConfig(_config_1);
        const _config_3 = (0,middleware_user_agent_dist_es.resolveUserAgentConfig)(_config_2);
        const _config_4 = (0,middleware_retry_dist_es.resolveRetryConfig)(_config_3);
        const _config_5 = (0,config_resolver_dist_es.resolveRegionConfig)(_config_4);
        const _config_6 = (0,middleware_host_header_dist_es.resolveHostHeaderConfig)(_config_5);
        const _config_7 = (0,middleware_endpoint_dist_es.resolveEndpointConfig)(_config_6);
        const _config_8 = resolveHttpAuthSchemeConfig(_config_7);
        const _config_9 = resolveEndpointDiscoveryConfig(_config_8, {
            endpointDiscoveryCommandCtor: DescribeEndpointsCommand,
        });
        const _config_10 = resolveRuntimeExtensions(_config_9, configuration?.extensions || []);
        this.config = _config_10;
        this.middlewareStack.use((0,middleware_user_agent_dist_es.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0,middleware_retry_dist_es.getRetryPlugin)(this.config));
        this.middlewareStack.use((0,middleware_content_length_dist_es.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0,middleware_host_header_dist_es.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0,middleware_logger_dist_es.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0,middleware_recursion_detection_dist_es.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0,getHttpAuthSchemeEndpointRuleSetPlugin.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: defaultDynamoDBHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use((0,getHttpSigningMiddleware.getHttpSigningPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchExecuteStatementCommand.js
var BatchExecuteStatementCommand = __webpack_require__(7210);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchGetItemCommand.js
var BatchGetItemCommand = __webpack_require__(9051);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/BatchWriteItemCommand.js
var BatchWriteItemCommand = __webpack_require__(8822);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/CreateBackupCommand.js






class CreateBackupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "CreateBackup", {})
    .n("DynamoDBClient", "CreateBackupCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_CreateBackupCommand)
    .de(Aws_json1_0.de_CreateBackupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/CreateGlobalTableCommand.js






class CreateGlobalTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "GlobalTableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "CreateGlobalTable", {})
    .n("DynamoDBClient", "CreateGlobalTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_CreateGlobalTableCommand)
    .de(Aws_json1_0.de_CreateGlobalTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/CreateTableCommand.js






class CreateTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "CreateTable", {})
    .n("DynamoDBClient", "CreateTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_CreateTableCommand)
    .de(Aws_json1_0.de_CreateTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteBackupCommand.js






class DeleteBackupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "BackupArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DeleteBackup", {})
    .n("DynamoDBClient", "DeleteBackupCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DeleteBackupCommand)
    .de(Aws_json1_0.de_DeleteBackupCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteItemCommand.js
var DeleteItemCommand = __webpack_require__(7610);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteResourcePolicyCommand.js






class DeleteResourcePolicyCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ResourceArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DeleteResourcePolicy", {})
    .n("DynamoDBClient", "DeleteResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DeleteResourcePolicyCommand)
    .de(Aws_json1_0.de_DeleteResourcePolicyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DeleteTableCommand.js






class DeleteTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DeleteTable", {})
    .n("DynamoDBClient", "DeleteTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DeleteTableCommand)
    .de(Aws_json1_0.de_DeleteTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeBackupCommand.js






class DescribeBackupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "BackupArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeBackup", {})
    .n("DynamoDBClient", "DescribeBackupCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeBackupCommand)
    .de(Aws_json1_0.de_DescribeBackupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeContinuousBackupsCommand.js






class DescribeContinuousBackupsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeContinuousBackups", {})
    .n("DynamoDBClient", "DescribeContinuousBackupsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeContinuousBackupsCommand)
    .de(Aws_json1_0.de_DescribeContinuousBackupsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeContributorInsightsCommand.js






class DescribeContributorInsightsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeContributorInsights", {})
    .n("DynamoDBClient", "DescribeContributorInsightsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeContributorInsightsCommand)
    .de(Aws_json1_0.de_DescribeContributorInsightsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeExportCommand.js






class DescribeExportCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ExportArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeExport", {})
    .n("DynamoDBClient", "DescribeExportCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeExportCommand)
    .de(Aws_json1_0.de_DescribeExportCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeGlobalTableCommand.js






class DescribeGlobalTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "GlobalTableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeGlobalTable", {})
    .n("DynamoDBClient", "DescribeGlobalTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeGlobalTableCommand)
    .de(Aws_json1_0.de_DescribeGlobalTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeGlobalTableSettingsCommand.js






class DescribeGlobalTableSettingsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "GlobalTableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeGlobalTableSettings", {})
    .n("DynamoDBClient", "DescribeGlobalTableSettingsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeGlobalTableSettingsCommand)
    .de(Aws_json1_0.de_DescribeGlobalTableSettingsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeImportCommand.js






class DescribeImportCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ImportArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeImport", {})
    .n("DynamoDBClient", "DescribeImportCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeImportCommand)
    .de(Aws_json1_0.de_DescribeImportCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeKinesisStreamingDestinationCommand.js






class DescribeKinesisStreamingDestinationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeKinesisStreamingDestination", {})
    .n("DynamoDBClient", "DescribeKinesisStreamingDestinationCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeKinesisStreamingDestinationCommand)
    .de(Aws_json1_0.de_DescribeKinesisStreamingDestinationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeLimitsCommand.js






class DescribeLimitsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(EndpointParameters.commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeLimits", {})
    .n("DynamoDBClient", "DescribeLimitsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeLimitsCommand)
    .de(Aws_json1_0.de_DescribeLimitsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeTableCommand.js






class DescribeTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeTable", {})
    .n("DynamoDBClient", "DescribeTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeTableCommand)
    .de(Aws_json1_0.de_DescribeTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeTableReplicaAutoScalingCommand.js






class DescribeTableReplicaAutoScalingCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeTableReplicaAutoScaling", {})
    .n("DynamoDBClient", "DescribeTableReplicaAutoScalingCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeTableReplicaAutoScalingCommand)
    .de(Aws_json1_0.de_DescribeTableReplicaAutoScalingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DescribeTimeToLiveCommand.js






class DescribeTimeToLiveCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DescribeTimeToLive", {})
    .n("DynamoDBClient", "DescribeTimeToLiveCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DescribeTimeToLiveCommand)
    .de(Aws_json1_0.de_DescribeTimeToLiveCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/DisableKinesisStreamingDestinationCommand.js






class DisableKinesisStreamingDestinationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DisableKinesisStreamingDestination", {})
    .n("DynamoDBClient", "DisableKinesisStreamingDestinationCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_DisableKinesisStreamingDestinationCommand)
    .de(Aws_json1_0.de_DisableKinesisStreamingDestinationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/EnableKinesisStreamingDestinationCommand.js






class EnableKinesisStreamingDestinationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "EnableKinesisStreamingDestination", {})
    .n("DynamoDBClient", "EnableKinesisStreamingDestinationCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_EnableKinesisStreamingDestinationCommand)
    .de(Aws_json1_0.de_EnableKinesisStreamingDestinationCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExecuteStatementCommand.js
var ExecuteStatementCommand = __webpack_require__(7042);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExecuteTransactionCommand.js
var ExecuteTransactionCommand = __webpack_require__(3325);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ExportTableToPointInTimeCommand.js






class ExportTableToPointInTimeCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ExportTableToPointInTime", {})
    .n("DynamoDBClient", "ExportTableToPointInTimeCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ExportTableToPointInTimeCommand)
    .de(Aws_json1_0.de_ExportTableToPointInTimeCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/GetItemCommand.js
var GetItemCommand = __webpack_require__(931);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/GetResourcePolicyCommand.js






class GetResourcePolicyCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ResourceArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "GetResourcePolicy", {})
    .n("DynamoDBClient", "GetResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_GetResourcePolicyCommand)
    .de(Aws_json1_0.de_GetResourcePolicyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ImportTableCommand.js






class ImportTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "operationContextParams", get: (input) => input?.TableCreationParameters?.TableName },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ImportTable", {})
    .n("DynamoDBClient", "ImportTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ImportTableCommand)
    .de(Aws_json1_0.de_ImportTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListBackupsCommand.js






class ListBackupsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ListBackups", {})
    .n("DynamoDBClient", "ListBackupsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ListBackupsCommand)
    .de(Aws_json1_0.de_ListBackupsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListContributorInsightsCommand.js






class ListContributorInsightsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ListContributorInsights", {})
    .n("DynamoDBClient", "ListContributorInsightsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ListContributorInsightsCommand)
    .de(Aws_json1_0.de_ListContributorInsightsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListExportsCommand.js






class ListExportsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ListExports", {})
    .n("DynamoDBClient", "ListExportsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ListExportsCommand)
    .de(Aws_json1_0.de_ListExportsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListGlobalTablesCommand.js






class ListGlobalTablesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(EndpointParameters.commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ListGlobalTables", {})
    .n("DynamoDBClient", "ListGlobalTablesCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ListGlobalTablesCommand)
    .de(Aws_json1_0.de_ListGlobalTablesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListImportsCommand.js






class ListImportsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ListImports", {})
    .n("DynamoDBClient", "ListImportsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ListImportsCommand)
    .de(Aws_json1_0.de_ListImportsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListTablesCommand.js






class ListTablesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(EndpointParameters.commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ListTables", {})
    .n("DynamoDBClient", "ListTablesCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ListTablesCommand)
    .de(Aws_json1_0.de_ListTablesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ListTagsOfResourceCommand.js






class ListTagsOfResourceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ResourceArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ListTagsOfResource", {})
    .n("DynamoDBClient", "ListTagsOfResourceCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_ListTagsOfResourceCommand)
    .de(Aws_json1_0.de_ListTagsOfResourceCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/PutItemCommand.js
var PutItemCommand = __webpack_require__(1908);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/PutResourcePolicyCommand.js






class PutResourcePolicyCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ResourceArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "PutResourcePolicy", {})
    .n("DynamoDBClient", "PutResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_PutResourcePolicyCommand)
    .de(Aws_json1_0.de_PutResourcePolicyCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/QueryCommand.js
var QueryCommand = __webpack_require__(1570);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/RestoreTableFromBackupCommand.js






class RestoreTableFromBackupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TargetTableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "RestoreTableFromBackup", {})
    .n("DynamoDBClient", "RestoreTableFromBackupCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_RestoreTableFromBackupCommand)
    .de(Aws_json1_0.de_RestoreTableFromBackupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/RestoreTableToPointInTimeCommand.js






class RestoreTableToPointInTimeCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TargetTableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "RestoreTableToPointInTime", {})
    .n("DynamoDBClient", "RestoreTableToPointInTimeCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_RestoreTableToPointInTimeCommand)
    .de(Aws_json1_0.de_RestoreTableToPointInTimeCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/ScanCommand.js
var ScanCommand = __webpack_require__(4517);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TagResourceCommand.js






class TagResourceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ResourceArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "TagResource", {})
    .n("DynamoDBClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_TagResourceCommand)
    .de(Aws_json1_0.de_TagResourceCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TransactGetItemsCommand.js
var TransactGetItemsCommand = __webpack_require__(7648);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/TransactWriteItemsCommand.js
var TransactWriteItemsCommand = __webpack_require__(1691);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UntagResourceCommand.js






class UntagResourceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "ResourceArn" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UntagResource", {})
    .n("DynamoDBClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UntagResourceCommand)
    .de(Aws_json1_0.de_UntagResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateContinuousBackupsCommand.js






class UpdateContinuousBackupsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateContinuousBackups", {})
    .n("DynamoDBClient", "UpdateContinuousBackupsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateContinuousBackupsCommand)
    .de(Aws_json1_0.de_UpdateContinuousBackupsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateContributorInsightsCommand.js






class UpdateContributorInsightsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateContributorInsights", {})
    .n("DynamoDBClient", "UpdateContributorInsightsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateContributorInsightsCommand)
    .de(Aws_json1_0.de_UpdateContributorInsightsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateGlobalTableCommand.js






class UpdateGlobalTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "GlobalTableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateGlobalTable", {})
    .n("DynamoDBClient", "UpdateGlobalTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateGlobalTableCommand)
    .de(Aws_json1_0.de_UpdateGlobalTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateGlobalTableSettingsCommand.js






class UpdateGlobalTableSettingsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "GlobalTableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateGlobalTableSettings", {})
    .n("DynamoDBClient", "UpdateGlobalTableSettingsCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateGlobalTableSettingsCommand)
    .de(Aws_json1_0.de_UpdateGlobalTableSettingsCommand)
    .build() {
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateItemCommand.js
var UpdateItemCommand = __webpack_require__(2692);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateKinesisStreamingDestinationCommand.js






class UpdateKinesisStreamingDestinationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateKinesisStreamingDestination", {})
    .n("DynamoDBClient", "UpdateKinesisStreamingDestinationCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateKinesisStreamingDestinationCommand)
    .de(Aws_json1_0.de_UpdateKinesisStreamingDestinationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateTableCommand.js






class UpdateTableCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateTable", {})
    .n("DynamoDBClient", "UpdateTableCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateTableCommand)
    .de(Aws_json1_0.de_UpdateTableCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateTableReplicaAutoScalingCommand.js






class UpdateTableReplicaAutoScalingCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateTableReplicaAutoScaling", {})
    .n("DynamoDBClient", "UpdateTableReplicaAutoScalingCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateTableReplicaAutoScalingCommand)
    .de(Aws_json1_0.de_UpdateTableReplicaAutoScalingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/UpdateTimeToLiveCommand.js






class UpdateTimeToLiveCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep({
    ...EndpointParameters.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "UpdateTimeToLive", {})
    .n("DynamoDBClient", "UpdateTimeToLiveCommand")
    .f(void 0, void 0)
    .ser(Aws_json1_0.se_UpdateTimeToLiveCommand)
    .de(Aws_json1_0.de_UpdateTimeToLiveCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/DynamoDB.js



























































const commands = {
    BatchExecuteStatementCommand: BatchExecuteStatementCommand.BatchExecuteStatementCommand,
    BatchGetItemCommand: BatchGetItemCommand.BatchGetItemCommand,
    BatchWriteItemCommand: BatchWriteItemCommand.BatchWriteItemCommand,
    CreateBackupCommand: CreateBackupCommand,
    CreateGlobalTableCommand: CreateGlobalTableCommand,
    CreateTableCommand: CreateTableCommand,
    DeleteBackupCommand: DeleteBackupCommand,
    DeleteItemCommand: DeleteItemCommand.DeleteItemCommand,
    DeleteResourcePolicyCommand: DeleteResourcePolicyCommand,
    DeleteTableCommand: DeleteTableCommand,
    DescribeBackupCommand: DescribeBackupCommand,
    DescribeContinuousBackupsCommand: DescribeContinuousBackupsCommand,
    DescribeContributorInsightsCommand: DescribeContributorInsightsCommand,
    DescribeEndpointsCommand: DescribeEndpointsCommand,
    DescribeExportCommand: DescribeExportCommand,
    DescribeGlobalTableCommand: DescribeGlobalTableCommand,
    DescribeGlobalTableSettingsCommand: DescribeGlobalTableSettingsCommand,
    DescribeImportCommand: DescribeImportCommand,
    DescribeKinesisStreamingDestinationCommand: DescribeKinesisStreamingDestinationCommand,
    DescribeLimitsCommand: DescribeLimitsCommand,
    DescribeTableCommand: DescribeTableCommand,
    DescribeTableReplicaAutoScalingCommand: DescribeTableReplicaAutoScalingCommand,
    DescribeTimeToLiveCommand: DescribeTimeToLiveCommand,
    DisableKinesisStreamingDestinationCommand: DisableKinesisStreamingDestinationCommand,
    EnableKinesisStreamingDestinationCommand: EnableKinesisStreamingDestinationCommand,
    ExecuteStatementCommand: ExecuteStatementCommand.ExecuteStatementCommand,
    ExecuteTransactionCommand: ExecuteTransactionCommand.ExecuteTransactionCommand,
    ExportTableToPointInTimeCommand: ExportTableToPointInTimeCommand,
    GetItemCommand: GetItemCommand.GetItemCommand,
    GetResourcePolicyCommand: GetResourcePolicyCommand,
    ImportTableCommand: ImportTableCommand,
    ListBackupsCommand: ListBackupsCommand,
    ListContributorInsightsCommand: ListContributorInsightsCommand,
    ListExportsCommand: ListExportsCommand,
    ListGlobalTablesCommand: ListGlobalTablesCommand,
    ListImportsCommand: ListImportsCommand,
    ListTablesCommand: ListTablesCommand,
    ListTagsOfResourceCommand: ListTagsOfResourceCommand,
    PutItemCommand: PutItemCommand.PutItemCommand,
    PutResourcePolicyCommand: PutResourcePolicyCommand,
    QueryCommand: QueryCommand.QueryCommand,
    RestoreTableFromBackupCommand: RestoreTableFromBackupCommand,
    RestoreTableToPointInTimeCommand: RestoreTableToPointInTimeCommand,
    ScanCommand: ScanCommand.ScanCommand,
    TagResourceCommand: TagResourceCommand,
    TransactGetItemsCommand: TransactGetItemsCommand.TransactGetItemsCommand,
    TransactWriteItemsCommand: TransactWriteItemsCommand.TransactWriteItemsCommand,
    UntagResourceCommand: UntagResourceCommand,
    UpdateContinuousBackupsCommand: UpdateContinuousBackupsCommand,
    UpdateContributorInsightsCommand: UpdateContributorInsightsCommand,
    UpdateGlobalTableCommand: UpdateGlobalTableCommand,
    UpdateGlobalTableSettingsCommand: UpdateGlobalTableSettingsCommand,
    UpdateItemCommand: UpdateItemCommand.UpdateItemCommand,
    UpdateKinesisStreamingDestinationCommand: UpdateKinesisStreamingDestinationCommand,
    UpdateTableCommand: UpdateTableCommand,
    UpdateTableReplicaAutoScalingCommand: UpdateTableReplicaAutoScalingCommand,
    UpdateTimeToLiveCommand: UpdateTimeToLiveCommand,
};
class DynamoDB extends DynamoDBClient {
}
(0,smithy_client_dist_es.createAggregatedClient)(commands, DynamoDB);

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/commands/index.js


























































// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/pagination/createPaginator.js
var createPaginator = __webpack_require__(2809);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/pagination/ListContributorInsightsPaginator.js



const paginateListContributorInsights = (0,createPaginator.createPaginator)(DynamoDBClient, ListContributorInsightsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/pagination/ListExportsPaginator.js



const paginateListExports = (0,createPaginator.createPaginator)(DynamoDBClient, ListExportsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/pagination/ListImportsPaginator.js



const paginateListImports = (0,createPaginator.createPaginator)(DynamoDBClient, ListImportsCommand, "NextToken", "NextToken", "PageSize");

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/pagination/ListTablesPaginator.js



const paginateListTables = (0,createPaginator.createPaginator)(DynamoDBClient, ListTablesCommand, "ExclusiveStartTableName", "LastEvaluatedTableName", "Limit");

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/pagination/QueryPaginator.js



const paginateQuery = (0,createPaginator.createPaginator)(DynamoDBClient, QueryCommand.QueryCommand, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/pagination/ScanPaginator.js



const paginateScan = (0,createPaginator.createPaginator)(DynamoDBClient, ScanCommand.ScanCommand, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/pagination/index.js








;// ./node_modules/@smithy/util-waiter/dist-es/utils/sleep.js
const sleep = (seconds) => {
    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));
};

;// ./node_modules/@smithy/util-waiter/dist-es/waiter.js
const waiterServiceDefaults = {
    minDelay: 2,
    maxDelay: 120,
};
var WaiterState;
(function (WaiterState) {
    WaiterState["ABORTED"] = "ABORTED";
    WaiterState["FAILURE"] = "FAILURE";
    WaiterState["SUCCESS"] = "SUCCESS";
    WaiterState["RETRY"] = "RETRY";
    WaiterState["TIMEOUT"] = "TIMEOUT";
})(WaiterState || (WaiterState = {}));
const checkExceptions = (result) => {
    if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
            ...result,
            reason: "Request was aborted",
        })}`);
        abortError.name = "AbortError";
        throw abortError;
    }
    else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
            ...result,
            reason: "Waiter has timed out",
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
    }
    else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify(result)}`);
    }
    return result;
};

;// ./node_modules/@smithy/util-waiter/dist-es/poller.js


const exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
    if (attempt > attemptCeiling)
        return maxDelay;
    const delay = minDelay * 2 ** (attempt - 1);
    return randomInRange(minDelay, delay);
};
const randomInRange = (min, max) => min + Math.random() * (max - min);
const runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
    const observedResponses = {};
    const { state, reason } = await acceptorChecks(client, input);
    if (reason) {
        const message = createMessageFromResponse(reason);
        observedResponses[message] |= 0;
        observedResponses[message] += 1;
    }
    if (state !== WaiterState.RETRY) {
        return { state, reason, observedResponses };
    }
    let currentAttempt = 1;
    const waitUntil = Date.now() + maxWaitTime * 1000;
    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
    while (true) {
        if (abortController?.signal?.aborted || abortSignal?.aborted) {
            const message = "AbortController signal aborted.";
            observedResponses[message] |= 0;
            observedResponses[message] += 1;
            return { state: WaiterState.ABORTED, observedResponses };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1000 > waitUntil) {
            return { state: WaiterState.TIMEOUT, observedResponses };
        }
        await sleep(delay);
        const { state, reason } = await acceptorChecks(client, input);
        if (reason) {
            const message = createMessageFromResponse(reason);
            observedResponses[message] |= 0;
            observedResponses[message] += 1;
        }
        if (state !== WaiterState.RETRY) {
            return { state, reason, observedResponses };
        }
        currentAttempt += 1;
    }
};
const createMessageFromResponse = (reason) => {
    if (reason?.$responseBodyText) {
        return `Deserialization error for body: ${reason.$responseBodyText}`;
    }
    if (reason?.$metadata?.httpStatusCode) {
        if (reason.$response || reason.message) {
            return `${reason.$response.statusCode ?? reason.$metadata.httpStatusCode ?? "Unknown"}: ${reason.message}`;
        }
        return `${reason.$metadata.httpStatusCode}: OK`;
    }
    return String(reason?.message ?? JSON.stringify(reason) ?? "Unknown");
};

;// ./node_modules/@smithy/util-waiter/dist-es/utils/validate.js
const validateWaiterOptions = (options) => {
    if (options.maxWaitTime <= 0) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
    }
    else if (options.minDelay <= 0) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
    }
    else if (options.maxDelay <= 0) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
    }
    else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    }
    else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    }
};

;// ./node_modules/@smithy/util-waiter/dist-es/createWaiter.js



const abortTimeout = (abortSignal) => {
    let onAbort;
    const promise = new Promise((resolve) => {
        onAbort = () => resolve({ state: WaiterState.ABORTED });
        if (typeof abortSignal.addEventListener === "function") {
            abortSignal.addEventListener("abort", onAbort);
        }
        else {
            abortSignal.onabort = onAbort;
        }
    });
    return {
        clearListener() {
            if (typeof abortSignal.removeEventListener === "function") {
                abortSignal.removeEventListener("abort", onAbort);
            }
        },
        aborted: promise,
    };
};
const createWaiter = async (options, input, acceptorChecks) => {
    const params = {
        ...waiterServiceDefaults,
        ...options,
    };
    validateWaiterOptions(params);
    const exitConditions = [runPolling(params, input, acceptorChecks)];
    const finalize = [];
    if (options.abortSignal) {
        const { aborted, clearListener } = abortTimeout(options.abortSignal);
        finalize.push(clearListener);
        exitConditions.push(aborted);
    }
    if (options.abortController?.signal) {
        const { aborted, clearListener } = abortTimeout(options.abortController.signal);
        finalize.push(clearListener);
        exitConditions.push(aborted);
    }
    return Promise.race(exitConditions).then((result) => {
        for (const fn of finalize) {
            fn();
        }
        return result;
    });
};

;// ./node_modules/@smithy/util-waiter/dist-es/index.js



;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/waiters/waitForTableExists.js


const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeTableCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.Table.TableStatus;
            };
            if (returnComparator() === "ACTIVE") {
                return { state: WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
            return { state: WaiterState.RETRY, reason };
        }
    }
    return { state: WaiterState.RETRY, reason };
};
const waitForTableExists = async (params, input) => {
    const serviceDefaults = { minDelay: 20, maxDelay: 120 };
    return createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilTableExists = async (params, input) => {
    const serviceDefaults = { minDelay: 20, maxDelay: 120 };
    const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return checkExceptions(result);
};

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/waiters/waitForTableNotExists.js


const waitForTableNotExists_checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeTableCommand(input));
        reason = result;
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
            return { state: WaiterState.SUCCESS, reason };
        }
    }
    return { state: WaiterState.RETRY, reason };
};
const waitForTableNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 20, maxDelay: 120 };
    return createWaiter({ ...serviceDefaults, ...params }, input, waitForTableNotExists_checkState);
};
const waitUntilTableNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 20, maxDelay: 120 };
    const result = await createWaiter({ ...serviceDefaults, ...params }, input, waitForTableNotExists_checkState);
    return checkExceptions(result);
};

;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/waiters/index.js



// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/models/models_0.js
var models_0 = __webpack_require__(8394);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/models/index.js


// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/models/DynamoDBServiceException.js
var DynamoDBServiceException = __webpack_require__(4007);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/index.js









/***/ }),

/***/ 4283:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  resolveAWSSDKSigV4Config: () => (/* binding */ resolveAWSSDKSigV4Config),
  resolveAwsSdkSigV4Config: () => (/* binding */ resolveAwsSdkSigV4Config)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
var setCredentialFeature = __webpack_require__(244);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/normalizeProvider.js
var normalizeProvider = __webpack_require__(4367);
;// ./node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js
const createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
const EXPIRATION_MS = 300000;
const isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
const doesIdentityRequireRefresh = (identity) => identity.expiration !== undefined;
const memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
    if (provider === undefined) {
        return undefined;
    }
    const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async (options) => {
        if (!pending) {
            pending = normalizedProvider(options);
        }
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        }
        finally {
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) {
        return async (options) => {
            if (!hasResult || options?.forceRefresh) {
                resolved = await coalesceProvider(options);
            }
            return resolved;
        };
    }
    return async (options) => {
        if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
        }
        if (isConstant) {
            return resolved;
        }
        if (!requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider(options);
            return resolved;
        }
        return resolved;
    };
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-hex-encoding/dist-es/index.js
var dist_es = __webpack_require__(8004);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/index.js + 3 modules
var util_utf8_dist_es = __webpack_require__(3197);
;// ./node_modules/@smithy/signature-v4/dist-es/constants.js
const ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
const CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
const AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
const SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
const EXPIRES_QUERY_PARAM = "X-Amz-Expires";
const SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
const TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
const REGION_SET_PARAM = "X-Amz-Region-Set";
const AUTH_HEADER = "authorization";
const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
const DATE_HEADER = "date";
const GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
const SHA256_HEADER = "x-amz-content-sha256";
const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
const HOST_HEADER = "host";
const ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true,
};
const PROXY_HEADER_PATTERN = /^proxy-/;
const SEC_HEADER_PATTERN = /^sec-/;
const UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
const ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
const ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
const EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
const UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
const MAX_CACHE_SIZE = 50;
const KEY_TYPE_IDENTIFIER = "aws4_request";
const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

;// ./node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js



const signingKeyCache = {};
const cacheQueue = [];
const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;
const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0,dist_es.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
    }
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
    }
    return (signingKeyCache[cacheKey] = key);
};
const clearCredentialCache = () => {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
    });
};
const hmac = (ctor, secret, data) => {
    const hash = new ctor(secret);
    hash.update((0,util_utf8_dist_es.toUint8Array)(data));
    return hash.digest();
};

;// ./node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js

const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == undefined) {
            continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||
            unsignableHeaders?.has(canonicalHeaderName) ||
            PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
            SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
                continue;
            }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
};

// EXTERNAL MODULE: ./node_modules/@smithy/is-array-buffer/dist-es/index.js
var is_array_buffer_dist_es = __webpack_require__(3695);
;// ./node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js




const getPayloadHash = async ({ headers, body }, hashConstructor) => {
    for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
            return headers[headerName];
        }
    }
    if (body == undefined) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    }
    else if (typeof body === "string" || ArrayBuffer.isView(body) || (0,is_array_buffer_dist_es.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0,util_utf8_dist_es.toUint8Array)(body));
        return (0,dist_es.toHex)(await hashCtor.digest());
    }
    return UNSIGNED_PAYLOAD;
};

;// ./node_modules/@smithy/signature-v4/dist-es/HeaderFormatter.js


class HeaderFormatter {
    format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
            const bytes = (0,util_utf8_dist_es.fromUtf8)(headerName);
            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
            out.set(chunk, position);
            position += chunk.byteLength;
        }
        return out;
    }
    formatHeaderValue(header) {
        switch (header.type) {
            case "boolean":
                return Uint8Array.from([header.value ? 0 : 1]);
            case "byte":
                return Uint8Array.from([2, header.value]);
            case "short":
                const shortView = new DataView(new ArrayBuffer(3));
                shortView.setUint8(0, 3);
                shortView.setInt16(1, header.value, false);
                return new Uint8Array(shortView.buffer);
            case "integer":
                const intView = new DataView(new ArrayBuffer(5));
                intView.setUint8(0, 4);
                intView.setInt32(1, header.value, false);
                return new Uint8Array(intView.buffer);
            case "long":
                const longBytes = new Uint8Array(9);
                longBytes[0] = 5;
                longBytes.set(header.value.bytes, 1);
                return longBytes;
            case "binary":
                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                binView.setUint8(0, 6);
                binView.setUint16(1, header.value.byteLength, false);
                const binBytes = new Uint8Array(binView.buffer);
                binBytes.set(header.value, 3);
                return binBytes;
            case "string":
                const utf8Bytes = (0,util_utf8_dist_es.fromUtf8)(header.value);
                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                strView.setUint8(0, 7);
                strView.setUint16(1, utf8Bytes.byteLength, false);
                const strBytes = new Uint8Array(strView.buffer);
                strBytes.set(utf8Bytes, 3);
                return strBytes;
            case "timestamp":
                const tsBytes = new Uint8Array(9);
                tsBytes[0] = 8;
                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
                return tsBytes;
            case "uuid":
                if (!UUID_PATTERN.test(header.value)) {
                    throw new Error(`Invalid UUID received: ${header.value}`);
                }
                const uuidBytes = new Uint8Array(17);
                uuidBytes[0] = 9;
                uuidBytes.set((0,dist_es.fromHex)(header.value.replace(/\-/g, "")), 1);
                return uuidBytes;
        }
    }
}
var HEADER_VALUE_TYPE;
(function (HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
const UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
class Int64 {
    constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
            throw new Error("Int64 buffers must be exactly 8 bytes");
        }
    }
    static fromNumber(number) {
        if (number > 9223372036854776000 || number < -9223372036854776000) {
            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
            bytes[i] = remaining;
        }
        if (number < 0) {
            negate(bytes);
        }
        return new Int64(bytes);
    }
    valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 0b10000000;
        if (negative) {
            negate(bytes);
        }
        return parseInt((0,dist_es.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
        return String(this.valueOf());
    }
}
function negate(bytes) {
    for (let i = 0; i < 8; i++) {
        bytes[i] ^= 0xff;
    }
    for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
            break;
    }
}

;// ./node_modules/@smithy/signature-v4/dist-es/headerUtil.js
const hasHeader = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return true;
        }
    }
    return false;
};
const getHeaderValue = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return headers[headerName];
        }
    }
    return undefined;
};
const deleteHeader = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            delete headers[headerName];
        }
    }
};

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var protocol_http_dist_es = __webpack_require__(3608);
;// ./node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js

const moveHeadersToQuery = (request, options = {}) => {
    const { headers, query = {} } = protocol_http_dist_es.HttpRequest.clone(request);
    for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if ((lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) ||
            options.hoistableHeaders?.has(lname)) {
            query[name] = headers[name];
            delete headers[name];
        }
    }
    return {
        ...request,
        headers,
        query,
    };
};

;// ./node_modules/@smithy/signature-v4/dist-es/prepareRequest.js


const prepareRequest = (request) => {
    request = protocol_http_dist_es.HttpRequest.clone(request);
    for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
            delete request.headers[headerName];
        }
    }
    return request;
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
// EXTERNAL MODULE: ./node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js
var escape_uri = __webpack_require__(2531);
;// ./node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js


const getCanonicalQuery = ({ query = {} }) => {
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
            continue;
        }
        const encodedKey = (0,escape_uri.escapeUri)(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === "string") {
            serialized[encodedKey] = `${encodedKey}=${(0,escape_uri.escapeUri)(value)}`;
        }
        else if (Array.isArray(value)) {
            serialized[encodedKey] = value
                .slice(0)
                .reduce((encoded, value) => encoded.concat([`${encodedKey}=${(0,escape_uri.escapeUri)(value)}`]), [])
                .sort()
                .join("&");
        }
    }
    return keys
        .sort()
        .map((key) => serialized[key])
        .filter((serialized) => serialized)
        .join("&");
};

;// ./node_modules/@smithy/signature-v4/dist-es/utilDate.js
const iso8601 = (time) => toDate(time)
    .toISOString()
    .replace(/\.\d{3}Z$/, "Z");
const toDate = (time) => {
    if (typeof time === "number") {
        return new Date(time * 1000);
    }
    if (typeof time === "string") {
        if (Number(time)) {
            return new Date(Number(time) * 1000);
        }
        return new Date(time);
    }
    return time;
};

;// ./node_modules/@smithy/signature-v4/dist-es/SignatureV4Base.js






class SignatureV4Base {
    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0,util_middleware_dist_es.normalizeProvider)(region);
        this.credentialProvider = (0,util_middleware_dist_es.normalizeProvider)(credentials);
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest, algorithmIdentifier) {
        const hash = new this.sha256();
        hash.update((0,util_utf8_dist_es.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${algorithmIdentifier}
${longDate}
${credentialScope}
${(0,dist_es.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split("/")) {
                if (pathSegment?.length === 0)
                    continue;
                if (pathSegment === ".")
                    continue;
                if (pathSegment === "..") {
                    normalizedPathSegments.pop();
                }
                else {
                    normalizedPathSegments.push(pathSegment);
                }
            }
            const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
            const doubleEncoded = (0,escape_uri.escapeUri)(normalizedPath);
            return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    }
    validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" ||
            typeof credentials.accessKeyId !== "string" ||
            typeof credentials.secretAccessKey !== "string") {
            throw new Error("Resolved credential object is not valid");
        }
    }
    formatDate(now) {
        const longDate = iso8601(now).replace(/[\-:]/g, "");
        return {
            longDate,
            shortDate: longDate.slice(0, 8),
        };
    }
    getCanonicalHeaderList(headers) {
        return Object.keys(headers).sort().join(";");
    }
}

;// ./node_modules/@smithy/signature-v4/dist-es/SignatureV4.js











class SignatureV4 extends SignatureV4Base {
    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {
        super({
            applyChecksum,
            credentials,
            region,
            service,
            sha256,
            uriEscapePath,
        });
        this.headerFormatter = new HeaderFormatter();
    }
    async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService, } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const { longDate, shortDate } = this.formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
            return Promise.reject("Signature version 4 presigned URLs" + " must have an expiration date less than one week in" + " the future");
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
        if (credentials.sessionToken) {
            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);
        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
        return request;
    }
    async sign(toSign, options) {
        if (typeof toSign === "string") {
            return this.signString(toSign, options);
        }
        else if (toSign.headers && toSign.payload) {
            return this.signEvent(toSign, options);
        }
        else if (toSign.message) {
            return this.signMessage(toSign, options);
        }
        else {
            return this.signRequest(toSign, options);
        }
    }
    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? (await this.regionProvider());
        const { shortDate, longDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0,dist_es.toHex)(await hash.digest());
        const stringToSign = [
            EVENT_ALGORITHM_IDENTIFIER,
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload,
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
    }
    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
            headers: this.headerFormatter.format(signableMessage.message.headers),
            payload: signableMessage.message.body,
        }, {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature,
        });
        return promise.then((signature) => {
            return { message: signableMessage.message, signature };
        });
    }
    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const { shortDate } = this.formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0,util_utf8_dist_es.toUint8Array)(stringToSign));
        return (0,dist_es.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const request = prepareRequest(requestToSign);
        const { longDate, shortDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
            request.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request, this.sha256);
        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
            request.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[AUTH_HEADER] =
            `${ALGORITHM_IDENTIFIER} ` +
                `Credential=${credentials.accessKeyId}/${scope}, ` +
                `SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, ` +
                `Signature=${signature}`;
        return request;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest, ALGORITHM_IDENTIFIER);
        const hash = new this.sha256(await keyPromise);
        hash.update((0,util_utf8_dist_es.toUint8Array)(stringToSign));
        return (0,dist_es.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
    }
}

;// ./node_modules/@smithy/signature-v4/dist-es/signature-v4a-container.js
const signatureV4aContainer = {
    SignatureV4a: null,
};

;// ./node_modules/@smithy/signature-v4/dist-es/index.js












;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js



const resolveAwsSdkSigV4Config = (config) => {
    let inputCredentials = config.credentials;
    let isUserSupplied = !!config.credentials;
    let resolvedCredentials = undefined;
    Object.defineProperty(config, "credentials", {
        set(credentials) {
            if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
                isUserSupplied = true;
            }
            inputCredentials = credentials;
            const memoizedProvider = normalizeCredentialProvider(config, {
                credentials: inputCredentials,
                credentialDefaultProvider: config.credentialDefaultProvider,
            });
            const boundProvider = bindCallerConfig(config, memoizedProvider);
            if (isUserSupplied && !boundProvider.attributed) {
                resolvedCredentials = async (options) => boundProvider(options).then((creds) => (0,setCredentialFeature.setCredentialFeature)(creds, "CREDENTIALS_CODE", "e"));
                resolvedCredentials.memoized = boundProvider.memoized;
                resolvedCredentials.configBound = boundProvider.configBound;
                resolvedCredentials.attributed = true;
            }
            else {
                resolvedCredentials = boundProvider;
            }
        },
        get() {
            return resolvedCredentials;
        },
        enumerable: true,
        configurable: true,
    });
    config.credentials = inputCredentials;
    const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256, } = config;
    let signer;
    if (config.signer) {
        signer = (0,normalizeProvider.normalizeProvider)(config.signer);
    }
    else if (config.regionInfoProvider) {
        signer = () => (0,normalizeProvider.normalizeProvider)(config.region)()
            .then(async (region) => [
            (await config.regionInfoProvider(region, {
                useFipsEndpoint: await config.useFipsEndpoint(),
                useDualstackEndpoint: await config.useDualstackEndpoint(),
            })) || {},
            region,
        ])
            .then(([regionInfo, region]) => {
            const { signingRegion, signingService } = regionInfo;
            config.signingRegion = config.signingRegion || signingRegion || region;
            config.signingName = config.signingName || signingService || config.serviceId;
            const params = {
                ...config,
                credentials: config.credentials,
                region: config.signingRegion,
                service: config.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
            };
            const SignerCtor = config.signerConstructor || SignatureV4;
            return new SignerCtor(params);
        });
    }
    else {
        signer = async (authScheme) => {
            authScheme = Object.assign({}, {
                name: "sigv4",
                signingName: config.signingName || config.defaultSigningName,
                signingRegion: await (0,normalizeProvider.normalizeProvider)(config.region)(),
                properties: {},
            }, authScheme);
            const signingRegion = authScheme.signingRegion;
            const signingService = authScheme.signingName;
            config.signingRegion = config.signingRegion || signingRegion;
            config.signingName = config.signingName || signingService || config.serviceId;
            const params = {
                ...config,
                credentials: config.credentials,
                region: config.signingRegion,
                service: config.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
            };
            const SignerCtor = config.signerConstructor || SignatureV4;
            return new SignerCtor(params);
        };
    }
    const resolvedConfig = Object.assign(config, {
        systemClockOffset,
        signingEscapePath,
        signer,
    });
    return resolvedConfig;
};
const resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
function normalizeCredentialProvider(config, { credentials, credentialDefaultProvider, }) {
    let credentialsProvider;
    if (credentials) {
        if (!credentials?.memoized) {
            credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);
        }
        else {
            credentialsProvider = credentials;
        }
    }
    else {
        if (credentialDefaultProvider) {
            credentialsProvider = (0,normalizeProvider.normalizeProvider)(credentialDefaultProvider(Object.assign({}, config, {
                parentClientConfig: config,
            })));
        }
        else {
            credentialsProvider = async () => {
                throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.");
            };
        }
    }
    credentialsProvider.memoized = true;
    return credentialsProvider;
}
function bindCallerConfig(config, credentialsProvider) {
    if (credentialsProvider.configBound) {
        return credentialsProvider;
    }
    const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config });
    fn.memoized = credentialsProvider.memoized;
    fn.configBound = true;
    return fn;
}


/***/ }),

/***/ 4321:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  resolveDefaultsModeConfig: () => (/* reexport */ resolveDefaultsModeConfig)
});

// EXTERNAL MODULE: ./node_modules/@smithy/config-resolver/dist-es/index.js + 17 modules
var dist_es = __webpack_require__(7735);
// EXTERNAL MODULE: ./node_modules/@smithy/node-config-provider/dist-es/index.js + 5 modules
var node_config_provider_dist_es = __webpack_require__(9987);
// EXTERNAL MODULE: ./node_modules/@smithy/property-provider/dist-es/index.js + 6 modules
var property_provider_dist_es = __webpack_require__(8112);
;// ./node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js
const AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
const AWS_REGION_ENV = "AWS_REGION";
const AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
const ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
const DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
const IMDS_REGION_PATH = "/latest/meta-data/placement/region";

;// ./node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js
const AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
const AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
const NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
    },
    configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
    },
    default: "legacy",
};

;// ./node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js





const resolveDefaultsModeConfig = ({ region = (0,node_config_provider_dist_es.loadConfig)(dist_es.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0,node_config_provider_dist_es.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS), } = {}) => (0,property_provider_dist_es.memoize)(async () => {
    const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
    switch (mode?.toLowerCase()) {
        case "auto":
            return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
            return Promise.resolve(mode?.toLocaleLowerCase());
        case undefined:
            return Promise.resolve("legacy");
        default:
            throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
    }
});
const resolveNodeDefaultsModeAuto = async (clientRegion) => {
    if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
            return "standard";
        }
        if (resolvedRegion === inferredRegion) {
            return "in-region";
        }
        else {
            return "cross-region";
        }
    }
    return "standard";
};
const inferPhysicalRegion = async () => {
    if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
    }
    if (!process.env[ENV_IMDS_DISABLED]) {
        try {
            const { getInstanceMetadataEndpoint, httpRequest } = await __webpack_require__.e(/* import() */ 897).then(__webpack_require__.bind(__webpack_require__, 7897));
            const endpoint = await getInstanceMetadataEndpoint();
            return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();
        }
        catch (e) {
        }
    }
};

;// ./node_modules/@smithy/util-defaults-mode-node/dist-es/index.js



/***/ }),

/***/ 4367:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizeProvider: () => (/* binding */ normalizeProvider)
/* harmony export */ });
const normalizeProvider = (input) => {
    if (typeof input === "function")
        return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
};


/***/ }),

/***/ 4422:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  AdaptiveRetryStrategy: () => (/* reexport */ AdaptiveRetryStrategy),
  CONFIG_MAX_ATTEMPTS: () => (/* reexport */ CONFIG_MAX_ATTEMPTS),
  CONFIG_RETRY_MODE: () => (/* reexport */ CONFIG_RETRY_MODE),
  ENV_MAX_ATTEMPTS: () => (/* reexport */ ENV_MAX_ATTEMPTS),
  ENV_RETRY_MODE: () => (/* reexport */ ENV_RETRY_MODE),
  NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => (/* reexport */ NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
  NODE_RETRY_MODE_CONFIG_OPTIONS: () => (/* reexport */ NODE_RETRY_MODE_CONFIG_OPTIONS),
  StandardRetryStrategy: () => (/* reexport */ StandardRetryStrategy),
  defaultDelayDecider: () => (/* reexport */ defaultDelayDecider),
  defaultRetryDecider: () => (/* reexport */ defaultRetryDecider),
  getOmitRetryHeadersPlugin: () => (/* reexport */ getOmitRetryHeadersPlugin),
  getRetryAfterHint: () => (/* reexport */ getRetryAfterHint),
  getRetryPlugin: () => (/* reexport */ getRetryPlugin),
  omitRetryHeadersMiddleware: () => (/* reexport */ omitRetryHeadersMiddleware),
  omitRetryHeadersMiddlewareOptions: () => (/* reexport */ omitRetryHeadersMiddlewareOptions),
  resolveRetryConfig: () => (/* reexport */ resolveRetryConfig),
  retryMiddleware: () => (/* reexport */ retryMiddleware),
  retryMiddlewareOptions: () => (/* reexport */ retryMiddlewareOptions)
});

// EXTERNAL MODULE: ./node_modules/@smithy/util-retry/dist-es/index.js + 8 modules
var dist_es = __webpack_require__(3323);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var protocol_http_dist_es = __webpack_require__(3608);
// EXTERNAL MODULE: ./node_modules/@smithy/service-error-classification/dist-es/index.js + 1 modules
var service_error_classification_dist_es = __webpack_require__(4542);
// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6982);
var external_crypto_default = /*#__PURE__*/__webpack_require__.n(external_crypto_);
;// ./node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/native.js

/* harmony default export */ const esm_node_native = ({
  randomUUID: (external_crypto_default()).randomUUID
});
;// ./node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/rng.js

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    external_crypto_default().randomFillSync(rnds8Pool);
    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
;// ./node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);
;// ./node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/validate.js


function validate(uuid) {
  return typeof uuid === 'string' && regex.test(uuid);
}

/* harmony default export */ const esm_node_validate = (validate);
;// ./node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!esm_node_validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_node_stringify = (stringify);
;// ./node_modules/@smithy/middleware-retry/node_modules/uuid/dist/esm-node/v4.js




function v4(options, buf, offset) {
  if (esm_node_native.randomUUID && !buf && !options) {
    return esm_node_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/* harmony default export */ const esm_node_v4 = (v4);
;// ./node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js

const getDefaultRetryQuota = (initialRetryTokens, options) => {
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = options?.noRetryIncrement ?? dist_es.NO_RETRY_INCREMENT;
    const retryCost = options?.retryCost ?? dist_es.RETRY_COST;
    const timeoutRetryCost = options?.timeoutRetryCost ?? dist_es.TIMEOUT_RETRY_COST;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error) => (error.name === "TimeoutError" ? timeoutRetryCost : retryCost);
    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
            throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
    });
};

;// ./node_modules/@smithy/middleware-retry/dist-es/delayDecider.js

const defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(dist_es.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));

;// ./node_modules/@smithy/middleware-retry/dist-es/retryDecider.js

const defaultRetryDecider = (error) => {
    if (!error) {
        return false;
    }
    return (0,service_error_classification_dist_es.isRetryableByTrait)(error) || (0,service_error_classification_dist_es.isClockSkewError)(error) || (0,service_error_classification_dist_es.isThrottlingError)(error) || (0,service_error_classification_dist_es.isTransientError)(error);
};

;// ./node_modules/@smithy/middleware-retry/dist-es/util.js
const asSdkError = (error) => {
    if (error instanceof Error)
        return error;
    if (error instanceof Object)
        return Object.assign(new Error(), error);
    if (typeof error === "string")
        return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
};

;// ./node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js








class StandardRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = dist_es.RETRY_MODES.STANDARD;
        this.retryDecider = options?.retryDecider ?? defaultRetryDecider;
        this.delayDecider = options?.delayDecider ?? defaultDelayDecider;
        this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(dist_es.INITIAL_RETRY_TOKENS);
    }
    shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
        let maxAttempts;
        try {
            maxAttempts = await this.maxAttemptsProvider();
        }
        catch (error) {
            maxAttempts = dist_es.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
    }
    async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_dist_es.HttpRequest.isInstance(request)) {
            request.headers[dist_es.INVOCATION_ID_HEADER] = esm_node_v4();
        }
        while (true) {
            try {
                if (protocol_http_dist_es.HttpRequest.isInstance(request)) {
                    request.headers[dist_es.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                }
                if (options?.beforeRequest) {
                    await options.beforeRequest();
                }
                const { response, output } = await next(args);
                if (options?.afterRequest) {
                    options.afterRequest(response);
                }
                this.retryQuota.releaseRetryTokens(retryTokenAmount);
                output.$metadata.attempts = attempts + 1;
                output.$metadata.totalRetryDelay = totalDelay;
                return { response, output };
            }
            catch (e) {
                const err = asSdkError(e);
                attempts++;
                if (this.shouldRetry(err, attempts, maxAttempts)) {
                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                    const delayFromDecider = this.delayDecider((0,service_error_classification_dist_es.isThrottlingError)(err) ? dist_es.THROTTLING_RETRY_DELAY_BASE : dist_es.DEFAULT_RETRY_DELAY_BASE, attempts);
                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                    totalDelay += delay;
                    await new Promise((resolve) => setTimeout(resolve, delay));
                    continue;
                }
                if (!err.$metadata) {
                    err.$metadata = {};
                }
                err.$metadata.attempts = attempts;
                err.$metadata.totalRetryDelay = totalDelay;
                throw err;
            }
        }
    }
}
const getDelayFromRetryAfterHeader = (response) => {
    if (!protocol_http_dist_es.HttpResponse.isInstance(response))
        return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
        return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
};

;// ./node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js


class AdaptiveRetryStrategy extends StandardRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new dist_es.DefaultRateLimiter();
        this.mode = dist_es.RETRY_MODES.ADAPTIVE;
    }
    async retry(next, args) {
        return super.retry(next, args, {
            beforeRequest: async () => {
                return this.rateLimiter.getSendToken();
            },
            afterRequest: (response) => {
                this.rateLimiter.updateClientSendingRate(response);
            },
        });
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/middleware-retry/dist-es/configurations.js


const ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
const CONFIG_MAX_ATTEMPTS = "max_attempts";
const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    default: dist_es.DEFAULT_MAX_ATTEMPTS,
};
const resolveRetryConfig = (input) => {
    const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;
    const maxAttempts = (0,util_middleware_dist_es.normalizeProvider)(_maxAttempts ?? dist_es.DEFAULT_MAX_ATTEMPTS);
    return Object.assign(input, {
        maxAttempts,
        retryStrategy: async () => {
            if (retryStrategy) {
                return retryStrategy;
            }
            const retryMode = await (0,util_middleware_dist_es.normalizeProvider)(_retryMode)();
            if (retryMode === dist_es.RETRY_MODES.ADAPTIVE) {
                return new dist_es.AdaptiveRetryStrategy(maxAttempts);
            }
            return new dist_es.StandardRetryStrategy(maxAttempts);
        },
    });
};
const ENV_RETRY_MODE = "AWS_RETRY_MODE";
const CONFIG_RETRY_MODE = "retry_mode";
const NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
    default: dist_es.DEFAULT_RETRY_MODE,
};

;// ./node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js


const omitRetryHeadersMiddleware = () => (next) => async (args) => {
    const { request } = args;
    if (protocol_http_dist_es.HttpRequest.isInstance(request)) {
        delete request.headers[dist_es.INVOCATION_ID_HEADER];
        delete request.headers[dist_es.REQUEST_HEADER];
    }
    return next(args);
};
const omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true,
};
const getOmitRetryHeadersPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
    },
});

// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 41 modules
var smithy_client_dist_es = __webpack_require__(9764);
// EXTERNAL MODULE: external "stream"
var external_stream_ = __webpack_require__(2203);
;// ./node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.js

const isStreamingPayload = (request) => request?.body instanceof external_stream_.Readable ||
    (typeof ReadableStream !== "undefined" && request?.body instanceof ReadableStream);

;// ./node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js







const retryMiddleware = (options) => (next, context) => async (args) => {
    let retryStrategy = await options.retryStrategy();
    const maxAttempts = await options.maxAttempts();
    if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        const isRequest = protocol_http_dist_es.HttpRequest.isInstance(request);
        if (isRequest) {
            request.headers[dist_es.INVOCATION_ID_HEADER] = esm_node_v4();
        }
        while (true) {
            try {
                if (isRequest) {
                    request.headers[dist_es.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                }
                const { response, output } = await next(args);
                retryStrategy.recordSuccess(retryToken);
                output.$metadata.attempts = attempts + 1;
                output.$metadata.totalRetryDelay = totalRetryDelay;
                return { response, output };
            }
            catch (e) {
                const retryErrorInfo = getRetryErrorInfo(e);
                lastError = asSdkError(e);
                if (isRequest && isStreamingPayload(request)) {
                    (context.logger instanceof smithy_client_dist_es.NoOpLogger ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
                    throw lastError;
                }
                try {
                    retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
                }
                catch (refreshError) {
                    if (!lastError.$metadata) {
                        lastError.$metadata = {};
                    }
                    lastError.$metadata.attempts = attempts + 1;
                    lastError.$metadata.totalRetryDelay = totalRetryDelay;
                    throw lastError;
                }
                attempts = retryToken.getRetryCount();
                const delay = retryToken.getRetryDelay();
                totalRetryDelay += delay;
                await new Promise((resolve) => setTimeout(resolve, delay));
            }
        }
    }
    else {
        retryStrategy = retryStrategy;
        if (retryStrategy?.mode)
            context.userAgent = [...(context.userAgent || []), ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
    }
};
const isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" &&
    typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" &&
    typeof retryStrategy.recordSuccess !== "undefined";
const getRetryErrorInfo = (error) => {
    const errorInfo = {
        error,
        errorType: getRetryErrorType(error),
    };
    const retryAfterHint = getRetryAfterHint(error.$response);
    if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
    }
    return errorInfo;
};
const getRetryErrorType = (error) => {
    if ((0,service_error_classification_dist_es.isThrottlingError)(error))
        return "THROTTLING";
    if ((0,service_error_classification_dist_es.isTransientError)(error))
        return "TRANSIENT";
    if ((0,service_error_classification_dist_es.isServerError)(error))
        return "SERVER_ERROR";
    return "CLIENT_ERROR";
};
const retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: ["RETRY"],
    step: "finalizeRequest",
    priority: "high",
    override: true,
};
const getRetryPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    },
});
const getRetryAfterHint = (response) => {
    if (!protocol_http_dist_es.HttpResponse.isInstance(response))
        return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
        return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
};

;// ./node_modules/@smithy/middleware-retry/dist-es/index.js









/***/ }),

/***/ 4472:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  NODE_AUTH_SCHEME_PREFERENCE_OPTIONS: () => (/* binding */ NODE_AUTH_SCHEME_PREFERENCE_OPTIONS)
});

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getArrayForCommaSeparatedString.js
const getArrayForCommaSeparatedString = (str) => typeof str === "string" && str.length > 0 ? str.split(",").map((item) => item.trim()) : [];

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getBearerTokenEnvKey.js
const getBearerTokenEnvKey = (signingName) => `AWS_BEARER_TOKEN_${signingName.replace(/[\s-]/g, "_").toUpperCase()}`;

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js


const NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY = "AWS_AUTH_SCHEME_PREFERENCE";
const NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY = "auth_scheme_preference";
const NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = {
    environmentVariableSelector: (env, options) => {
        if (options?.signingName) {
            const bearerTokenKey = getBearerTokenEnvKey(options.signingName);
            if (bearerTokenKey in env)
                return ["httpBearerAuth"];
        }
        if (!(NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY in env))
            return undefined;
        return getArrayForCommaSeparatedString(env[NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY]);
    },
    configFileSelector: (profile) => {
        if (!(NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY in profile))
            return undefined;
        return getArrayForCommaSeparatedString(profile[NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY]);
    },
    default: [],
};


/***/ }),

/***/ 4517:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   ScanCommand: () => (/* binding */ ScanCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class ScanCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "Scan", {})
    .n("DynamoDBClient", "ScanCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_ScanCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_ScanCommand)
    .build() {
}


/***/ }),

/***/ 4542:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  isBrowserNetworkError: () => (/* binding */ isBrowserNetworkError),
  isClockSkewCorrectedError: () => (/* binding */ isClockSkewCorrectedError),
  isClockSkewError: () => (/* binding */ isClockSkewError),
  isRetryableByTrait: () => (/* binding */ isRetryableByTrait),
  isServerError: () => (/* binding */ isServerError),
  isThrottlingError: () => (/* binding */ isThrottlingError),
  isTransientError: () => (/* binding */ isTransientError)
});

;// ./node_modules/@smithy/service-error-classification/dist-es/constants.js
const CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch",
];
const THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException",
];
const TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
const TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
const NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
const NODEJS_NETWORK_ERROR_CODES = ["EHOSTUNREACH", "ENETUNREACH", "ENOTFOUND"];

;// ./node_modules/@smithy/service-error-classification/dist-es/index.js

const isRetryableByTrait = (error) => error.$retryable !== undefined;
const isClockSkewError = (error) => CLOCK_SKEW_ERROR_CODES.includes(error.name);
const isClockSkewCorrectedError = (error) => error.$metadata?.clockSkewCorrected;
const isBrowserNetworkError = (error) => {
    const errorMessages = new Set([
        "Failed to fetch",
        "NetworkError when attempting to fetch resource",
        "The Internet connection appears to be offline",
        "Load failed",
        "Network request failed",
    ]);
    const isValid = error && error instanceof TypeError;
    if (!isValid) {
        return false;
    }
    return errorMessages.has(error.message);
};
const isThrottlingError = (error) => error.$metadata?.httpStatusCode === 429 ||
    THROTTLING_ERROR_CODES.includes(error.name) ||
    error.$retryable?.throttling == true;
const isTransientError = (error, depth = 0) => isClockSkewCorrectedError(error) ||
    TRANSIENT_ERROR_CODES.includes(error.name) ||
    NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || "") ||
    NODEJS_NETWORK_ERROR_CODES.includes(error?.code || "") ||
    TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0) ||
    isBrowserNetworkError(error) ||
    (error.cause !== undefined && depth <= 10 && isTransientError(error.cause, depth + 1));
const isServerError = (error) => {
    if (error.$metadata?.httpStatusCode !== undefined) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
            return true;
        }
        return false;
    }
    return false;
};


/***/ }),

/***/ 4572:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  fromBase64: () => (/* reexport */ fromBase64),
  toBase64: () => (/* reexport */ toBase64)
});

// EXTERNAL MODULE: ./node_modules/@smithy/util-buffer-from/dist-es/index.js
var dist_es = __webpack_require__(9290);
;// ./node_modules/@smithy/util-base64/dist-es/fromBase64.js

const BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
const fromBase64 = (input) => {
    if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
    }
    if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
    }
    const buffer = (0,dist_es.fromString)(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/index.js + 3 modules
var util_utf8_dist_es = __webpack_require__(3197);
;// ./node_modules/@smithy/util-base64/dist-es/toBase64.js


const toBase64 = (_input) => {
    let input;
    if (typeof _input === "string") {
        input = (0,util_utf8_dist_es.fromUtf8)(_input);
    }
    else {
        input = _input;
    }
    if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
    }
    return (0,dist_es.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
};

;// ./node_modules/@smithy/util-base64/dist-es/index.js




/***/ }),

/***/ 4640:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createResponse = createResponse;
exports.successResponse = successResponse;
exports.errorResponse = errorResponse;
exports.validationErrorResponse = validationErrorResponse;
exports.notFoundResponse = notFoundResponse;
exports.unauthorizedResponse = unauthorizedResponse;
exports.forbiddenResponse = forbiddenResponse;
exports.internalServerErrorResponse = internalServerErrorResponse;
const defaultHeaders = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
};
function createResponse(statusCode, body, headers = {}) {
    return {
        statusCode,
        headers: { ...defaultHeaders, ...headers },
        body: typeof body === 'string' ? body : JSON.stringify(body)
    };
}
function successResponse(data, statusCode = 200) {
    return createResponse(statusCode, {
        success: true,
        data
    });
}
function errorResponse(error, statusCode = 400) {
    const errorBody = typeof error === 'string'
        ? { success: false, error: { message: error } }
        : { success: false, error };
    return createResponse(statusCode, errorBody);
}
function validationErrorResponse(message) {
    return errorResponse({
        code: 'VALIDATION_ERROR',
        message
    }, 400);
}
function notFoundResponse(resource = 'Resource') {
    return errorResponse({
        code: 'NOT_FOUND',
        message: `${resource} not found`
    }, 404);
}
function unauthorizedResponse(message = 'Unauthorized') {
    return errorResponse({
        code: 'UNAUTHORIZED',
        message
    }, 401);
}
function forbiddenResponse(message = 'Forbidden') {
    return errorResponse({
        code: 'FORBIDDEN',
        message
    }, 403);
}
function internalServerErrorResponse(message = 'Internal server error') {
    return errorResponse({
        code: 'INTERNAL_ERROR',
        message
    }, 500);
}


/***/ }),

/***/ 4735:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $Command: () => (/* reexport */ smithy_client_dist_es.Command),
  AccountTakeoverEventActionType: () => (/* reexport */ AccountTakeoverEventActionType),
  AddCustomAttributesCommand: () => (/* reexport */ AddCustomAttributesCommand),
  AdminAddUserToGroupCommand: () => (/* reexport */ AdminAddUserToGroupCommand),
  AdminAddUserToGroupRequestFilterSensitiveLog: () => (/* reexport */ AdminAddUserToGroupRequestFilterSensitiveLog),
  AdminConfirmSignUpCommand: () => (/* reexport */ AdminConfirmSignUpCommand),
  AdminConfirmSignUpRequestFilterSensitiveLog: () => (/* reexport */ AdminConfirmSignUpRequestFilterSensitiveLog),
  AdminCreateUserCommand: () => (/* reexport */ AdminCreateUserCommand),
  AdminCreateUserRequestFilterSensitiveLog: () => (/* reexport */ AdminCreateUserRequestFilterSensitiveLog),
  AdminCreateUserResponseFilterSensitiveLog: () => (/* reexport */ AdminCreateUserResponseFilterSensitiveLog),
  AdminDeleteUserAttributesCommand: () => (/* reexport */ AdminDeleteUserAttributesCommand),
  AdminDeleteUserAttributesRequestFilterSensitiveLog: () => (/* reexport */ AdminDeleteUserAttributesRequestFilterSensitiveLog),
  AdminDeleteUserCommand: () => (/* reexport */ AdminDeleteUserCommand),
  AdminDeleteUserRequestFilterSensitiveLog: () => (/* reexport */ AdminDeleteUserRequestFilterSensitiveLog),
  AdminDisableProviderForUserCommand: () => (/* reexport */ AdminDisableProviderForUserCommand),
  AdminDisableUserCommand: () => (/* reexport */ AdminDisableUserCommand),
  AdminDisableUserRequestFilterSensitiveLog: () => (/* reexport */ AdminDisableUserRequestFilterSensitiveLog),
  AdminEnableUserCommand: () => (/* reexport */ AdminEnableUserCommand),
  AdminEnableUserRequestFilterSensitiveLog: () => (/* reexport */ AdminEnableUserRequestFilterSensitiveLog),
  AdminForgetDeviceCommand: () => (/* reexport */ AdminForgetDeviceCommand),
  AdminForgetDeviceRequestFilterSensitiveLog: () => (/* reexport */ AdminForgetDeviceRequestFilterSensitiveLog),
  AdminGetDeviceCommand: () => (/* reexport */ AdminGetDeviceCommand),
  AdminGetDeviceRequestFilterSensitiveLog: () => (/* reexport */ AdminGetDeviceRequestFilterSensitiveLog),
  AdminGetDeviceResponseFilterSensitiveLog: () => (/* reexport */ AdminGetDeviceResponseFilterSensitiveLog),
  AdminGetUserCommand: () => (/* reexport */ AdminGetUserCommand),
  AdminGetUserRequestFilterSensitiveLog: () => (/* reexport */ AdminGetUserRequestFilterSensitiveLog),
  AdminGetUserResponseFilterSensitiveLog: () => (/* reexport */ AdminGetUserResponseFilterSensitiveLog),
  AdminInitiateAuthCommand: () => (/* reexport */ AdminInitiateAuthCommand),
  AdminInitiateAuthRequestFilterSensitiveLog: () => (/* reexport */ AdminInitiateAuthRequestFilterSensitiveLog),
  AdminInitiateAuthResponseFilterSensitiveLog: () => (/* reexport */ AdminInitiateAuthResponseFilterSensitiveLog),
  AdminLinkProviderForUserCommand: () => (/* reexport */ AdminLinkProviderForUserCommand),
  AdminListDevicesCommand: () => (/* reexport */ AdminListDevicesCommand),
  AdminListDevicesRequestFilterSensitiveLog: () => (/* reexport */ AdminListDevicesRequestFilterSensitiveLog),
  AdminListDevicesResponseFilterSensitiveLog: () => (/* reexport */ AdminListDevicesResponseFilterSensitiveLog),
  AdminListGroupsForUserCommand: () => (/* reexport */ AdminListGroupsForUserCommand),
  AdminListGroupsForUserRequestFilterSensitiveLog: () => (/* reexport */ AdminListGroupsForUserRequestFilterSensitiveLog),
  AdminListUserAuthEventsCommand: () => (/* reexport */ AdminListUserAuthEventsCommand),
  AdminListUserAuthEventsRequestFilterSensitiveLog: () => (/* reexport */ AdminListUserAuthEventsRequestFilterSensitiveLog),
  AdminRemoveUserFromGroupCommand: () => (/* reexport */ AdminRemoveUserFromGroupCommand),
  AdminRemoveUserFromGroupRequestFilterSensitiveLog: () => (/* reexport */ AdminRemoveUserFromGroupRequestFilterSensitiveLog),
  AdminResetUserPasswordCommand: () => (/* reexport */ AdminResetUserPasswordCommand),
  AdminResetUserPasswordRequestFilterSensitiveLog: () => (/* reexport */ AdminResetUserPasswordRequestFilterSensitiveLog),
  AdminRespondToAuthChallengeCommand: () => (/* reexport */ AdminRespondToAuthChallengeCommand),
  AdminRespondToAuthChallengeRequestFilterSensitiveLog: () => (/* reexport */ AdminRespondToAuthChallengeRequestFilterSensitiveLog),
  AdminRespondToAuthChallengeResponseFilterSensitiveLog: () => (/* reexport */ AdminRespondToAuthChallengeResponseFilterSensitiveLog),
  AdminSetUserMFAPreferenceCommand: () => (/* reexport */ AdminSetUserMFAPreferenceCommand),
  AdminSetUserMFAPreferenceRequestFilterSensitiveLog: () => (/* reexport */ AdminSetUserMFAPreferenceRequestFilterSensitiveLog),
  AdminSetUserPasswordCommand: () => (/* reexport */ AdminSetUserPasswordCommand),
  AdminSetUserPasswordRequestFilterSensitiveLog: () => (/* reexport */ AdminSetUserPasswordRequestFilterSensitiveLog),
  AdminSetUserSettingsCommand: () => (/* reexport */ AdminSetUserSettingsCommand),
  AdminSetUserSettingsRequestFilterSensitiveLog: () => (/* reexport */ AdminSetUserSettingsRequestFilterSensitiveLog),
  AdminUpdateAuthEventFeedbackCommand: () => (/* reexport */ AdminUpdateAuthEventFeedbackCommand),
  AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog: () => (/* reexport */ AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog),
  AdminUpdateDeviceStatusCommand: () => (/* reexport */ AdminUpdateDeviceStatusCommand),
  AdminUpdateDeviceStatusRequestFilterSensitiveLog: () => (/* reexport */ AdminUpdateDeviceStatusRequestFilterSensitiveLog),
  AdminUpdateUserAttributesCommand: () => (/* reexport */ AdminUpdateUserAttributesCommand),
  AdminUpdateUserAttributesRequestFilterSensitiveLog: () => (/* reexport */ AdminUpdateUserAttributesRequestFilterSensitiveLog),
  AdminUserGlobalSignOutCommand: () => (/* reexport */ AdminUserGlobalSignOutCommand),
  AdminUserGlobalSignOutRequestFilterSensitiveLog: () => (/* reexport */ AdminUserGlobalSignOutRequestFilterSensitiveLog),
  AdvancedSecurityEnabledModeType: () => (/* reexport */ AdvancedSecurityEnabledModeType),
  AdvancedSecurityModeType: () => (/* reexport */ AdvancedSecurityModeType),
  AliasAttributeType: () => (/* reexport */ AliasAttributeType),
  AliasExistsException: () => (/* reexport */ AliasExistsException),
  AssetCategoryType: () => (/* reexport */ AssetCategoryType),
  AssetExtensionType: () => (/* reexport */ AssetExtensionType),
  AssociateSoftwareTokenCommand: () => (/* reexport */ AssociateSoftwareTokenCommand),
  AssociateSoftwareTokenRequestFilterSensitiveLog: () => (/* reexport */ AssociateSoftwareTokenRequestFilterSensitiveLog),
  AssociateSoftwareTokenResponseFilterSensitiveLog: () => (/* reexport */ AssociateSoftwareTokenResponseFilterSensitiveLog),
  AttributeDataType: () => (/* reexport */ AttributeDataType),
  AttributeTypeFilterSensitiveLog: () => (/* reexport */ AttributeTypeFilterSensitiveLog),
  AuthFactorType: () => (/* reexport */ AuthFactorType),
  AuthFlowType: () => (/* reexport */ AuthFlowType),
  AuthenticationResultTypeFilterSensitiveLog: () => (/* reexport */ AuthenticationResultTypeFilterSensitiveLog),
  ChallengeName: () => (/* reexport */ ChallengeName),
  ChallengeNameType: () => (/* reexport */ ChallengeNameType),
  ChallengeResponse: () => (/* reexport */ ChallengeResponse),
  ChangePasswordCommand: () => (/* reexport */ ChangePasswordCommand),
  ChangePasswordRequestFilterSensitiveLog: () => (/* reexport */ ChangePasswordRequestFilterSensitiveLog),
  CodeDeliveryFailureException: () => (/* reexport */ CodeDeliveryFailureException),
  CodeMismatchException: () => (/* reexport */ CodeMismatchException),
  CognitoIdentityProvider: () => (/* reexport */ CognitoIdentityProvider),
  CognitoIdentityProviderClient: () => (/* reexport */ CognitoIdentityProviderClient),
  CognitoIdentityProviderServiceException: () => (/* reexport */ CognitoIdentityProviderServiceException),
  ColorSchemeModeType: () => (/* reexport */ ColorSchemeModeType),
  CompleteWebAuthnRegistrationCommand: () => (/* reexport */ CompleteWebAuthnRegistrationCommand),
  CompleteWebAuthnRegistrationRequestFilterSensitiveLog: () => (/* reexport */ CompleteWebAuthnRegistrationRequestFilterSensitiveLog),
  CompromisedCredentialsEventActionType: () => (/* reexport */ CompromisedCredentialsEventActionType),
  ConcurrentModificationException: () => (/* reexport */ ConcurrentModificationException),
  ConfirmDeviceCommand: () => (/* reexport */ ConfirmDeviceCommand),
  ConfirmDeviceRequestFilterSensitiveLog: () => (/* reexport */ ConfirmDeviceRequestFilterSensitiveLog),
  ConfirmForgotPasswordCommand: () => (/* reexport */ ConfirmForgotPasswordCommand),
  ConfirmForgotPasswordRequestFilterSensitiveLog: () => (/* reexport */ ConfirmForgotPasswordRequestFilterSensitiveLog),
  ConfirmSignUpCommand: () => (/* reexport */ ConfirmSignUpCommand),
  ConfirmSignUpRequestFilterSensitiveLog: () => (/* reexport */ ConfirmSignUpRequestFilterSensitiveLog),
  ConfirmSignUpResponseFilterSensitiveLog: () => (/* reexport */ ConfirmSignUpResponseFilterSensitiveLog),
  CreateGroupCommand: () => (/* reexport */ CreateGroupCommand),
  CreateIdentityProviderCommand: () => (/* reexport */ CreateIdentityProviderCommand),
  CreateManagedLoginBrandingCommand: () => (/* reexport */ CreateManagedLoginBrandingCommand),
  CreateManagedLoginBrandingRequestFilterSensitiveLog: () => (/* reexport */ CreateManagedLoginBrandingRequestFilterSensitiveLog),
  CreateResourceServerCommand: () => (/* reexport */ CreateResourceServerCommand),
  CreateUserImportJobCommand: () => (/* reexport */ CreateUserImportJobCommand),
  CreateUserPoolClientCommand: () => (/* reexport */ CreateUserPoolClientCommand),
  CreateUserPoolClientResponseFilterSensitiveLog: () => (/* reexport */ CreateUserPoolClientResponseFilterSensitiveLog),
  CreateUserPoolCommand: () => (/* reexport */ CreateUserPoolCommand),
  CreateUserPoolDomainCommand: () => (/* reexport */ CreateUserPoolDomainCommand),
  CustomEmailSenderLambdaVersionType: () => (/* reexport */ CustomEmailSenderLambdaVersionType),
  CustomSMSSenderLambdaVersionType: () => (/* reexport */ CustomSMSSenderLambdaVersionType),
  DefaultEmailOptionType: () => (/* reexport */ DefaultEmailOptionType),
  DeleteGroupCommand: () => (/* reexport */ DeleteGroupCommand),
  DeleteIdentityProviderCommand: () => (/* reexport */ DeleteIdentityProviderCommand),
  DeleteManagedLoginBrandingCommand: () => (/* reexport */ DeleteManagedLoginBrandingCommand),
  DeleteResourceServerCommand: () => (/* reexport */ DeleteResourceServerCommand),
  DeleteUserAttributesCommand: () => (/* reexport */ DeleteUserAttributesCommand),
  DeleteUserAttributesRequestFilterSensitiveLog: () => (/* reexport */ DeleteUserAttributesRequestFilterSensitiveLog),
  DeleteUserCommand: () => (/* reexport */ DeleteUserCommand),
  DeleteUserPoolClientCommand: () => (/* reexport */ DeleteUserPoolClientCommand),
  DeleteUserPoolClientRequestFilterSensitiveLog: () => (/* reexport */ DeleteUserPoolClientRequestFilterSensitiveLog),
  DeleteUserPoolCommand: () => (/* reexport */ DeleteUserPoolCommand),
  DeleteUserPoolDomainCommand: () => (/* reexport */ DeleteUserPoolDomainCommand),
  DeleteUserRequestFilterSensitiveLog: () => (/* reexport */ DeleteUserRequestFilterSensitiveLog),
  DeleteWebAuthnCredentialCommand: () => (/* reexport */ DeleteWebAuthnCredentialCommand),
  DeleteWebAuthnCredentialRequestFilterSensitiveLog: () => (/* reexport */ DeleteWebAuthnCredentialRequestFilterSensitiveLog),
  DeletionProtectionType: () => (/* reexport */ DeletionProtectionType),
  DeliveryMediumType: () => (/* reexport */ DeliveryMediumType),
  DescribeIdentityProviderCommand: () => (/* reexport */ DescribeIdentityProviderCommand),
  DescribeManagedLoginBrandingByClientCommand: () => (/* reexport */ DescribeManagedLoginBrandingByClientCommand),
  DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog: () => (/* reexport */ DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog),
  DescribeManagedLoginBrandingCommand: () => (/* reexport */ DescribeManagedLoginBrandingCommand),
  DescribeResourceServerCommand: () => (/* reexport */ DescribeResourceServerCommand),
  DescribeRiskConfigurationCommand: () => (/* reexport */ DescribeRiskConfigurationCommand),
  DescribeRiskConfigurationRequestFilterSensitiveLog: () => (/* reexport */ DescribeRiskConfigurationRequestFilterSensitiveLog),
  DescribeRiskConfigurationResponseFilterSensitiveLog: () => (/* reexport */ DescribeRiskConfigurationResponseFilterSensitiveLog),
  DescribeUserImportJobCommand: () => (/* reexport */ DescribeUserImportJobCommand),
  DescribeUserPoolClientCommand: () => (/* reexport */ DescribeUserPoolClientCommand),
  DescribeUserPoolClientRequestFilterSensitiveLog: () => (/* reexport */ DescribeUserPoolClientRequestFilterSensitiveLog),
  DescribeUserPoolClientResponseFilterSensitiveLog: () => (/* reexport */ DescribeUserPoolClientResponseFilterSensitiveLog),
  DescribeUserPoolCommand: () => (/* reexport */ DescribeUserPoolCommand),
  DescribeUserPoolDomainCommand: () => (/* reexport */ DescribeUserPoolDomainCommand),
  DeviceKeyExistsException: () => (/* reexport */ DeviceKeyExistsException),
  DeviceRememberedStatusType: () => (/* reexport */ DeviceRememberedStatusType),
  DeviceTypeFilterSensitiveLog: () => (/* reexport */ DeviceTypeFilterSensitiveLog),
  DomainStatusType: () => (/* reexport */ DomainStatusType),
  DuplicateProviderException: () => (/* reexport */ DuplicateProviderException),
  EmailSendingAccountType: () => (/* reexport */ EmailSendingAccountType),
  EnableSoftwareTokenMFAException: () => (/* reexport */ EnableSoftwareTokenMFAException),
  EventFilterType: () => (/* reexport */ EventFilterType),
  EventResponseType: () => (/* reexport */ EventResponseType),
  EventSourceName: () => (/* reexport */ EventSourceName),
  EventType: () => (/* reexport */ EventType),
  ExpiredCodeException: () => (/* reexport */ ExpiredCodeException),
  ExplicitAuthFlowsType: () => (/* reexport */ ExplicitAuthFlowsType),
  FeatureType: () => (/* reexport */ FeatureType),
  FeatureUnavailableInTierException: () => (/* reexport */ FeatureUnavailableInTierException),
  FeedbackValueType: () => (/* reexport */ FeedbackValueType),
  ForbiddenException: () => (/* reexport */ ForbiddenException),
  ForgetDeviceCommand: () => (/* reexport */ ForgetDeviceCommand),
  ForgetDeviceRequestFilterSensitiveLog: () => (/* reexport */ ForgetDeviceRequestFilterSensitiveLog),
  ForgotPasswordCommand: () => (/* reexport */ ForgotPasswordCommand),
  ForgotPasswordRequestFilterSensitiveLog: () => (/* reexport */ ForgotPasswordRequestFilterSensitiveLog),
  GetCSVHeaderCommand: () => (/* reexport */ GetCSVHeaderCommand),
  GetDeviceCommand: () => (/* reexport */ GetDeviceCommand),
  GetDeviceRequestFilterSensitiveLog: () => (/* reexport */ GetDeviceRequestFilterSensitiveLog),
  GetDeviceResponseFilterSensitiveLog: () => (/* reexport */ GetDeviceResponseFilterSensitiveLog),
  GetGroupCommand: () => (/* reexport */ GetGroupCommand),
  GetIdentityProviderByIdentifierCommand: () => (/* reexport */ GetIdentityProviderByIdentifierCommand),
  GetLogDeliveryConfigurationCommand: () => (/* reexport */ GetLogDeliveryConfigurationCommand),
  GetSigningCertificateCommand: () => (/* reexport */ GetSigningCertificateCommand),
  GetTokensFromRefreshTokenCommand: () => (/* reexport */ GetTokensFromRefreshTokenCommand),
  GetTokensFromRefreshTokenRequestFilterSensitiveLog: () => (/* reexport */ GetTokensFromRefreshTokenRequestFilterSensitiveLog),
  GetTokensFromRefreshTokenResponseFilterSensitiveLog: () => (/* reexport */ GetTokensFromRefreshTokenResponseFilterSensitiveLog),
  GetUICustomizationCommand: () => (/* reexport */ GetUICustomizationCommand),
  GetUICustomizationRequestFilterSensitiveLog: () => (/* reexport */ GetUICustomizationRequestFilterSensitiveLog),
  GetUICustomizationResponseFilterSensitiveLog: () => (/* reexport */ GetUICustomizationResponseFilterSensitiveLog),
  GetUserAttributeVerificationCodeCommand: () => (/* reexport */ GetUserAttributeVerificationCodeCommand),
  GetUserAttributeVerificationCodeRequestFilterSensitiveLog: () => (/* reexport */ GetUserAttributeVerificationCodeRequestFilterSensitiveLog),
  GetUserAuthFactorsCommand: () => (/* reexport */ GetUserAuthFactorsCommand),
  GetUserAuthFactorsRequestFilterSensitiveLog: () => (/* reexport */ GetUserAuthFactorsRequestFilterSensitiveLog),
  GetUserAuthFactorsResponseFilterSensitiveLog: () => (/* reexport */ GetUserAuthFactorsResponseFilterSensitiveLog),
  GetUserCommand: () => (/* reexport */ GetUserCommand),
  GetUserPoolMfaConfigCommand: () => (/* reexport */ GetUserPoolMfaConfigCommand),
  GetUserRequestFilterSensitiveLog: () => (/* reexport */ GetUserRequestFilterSensitiveLog),
  GetUserResponseFilterSensitiveLog: () => (/* reexport */ GetUserResponseFilterSensitiveLog),
  GlobalSignOutCommand: () => (/* reexport */ GlobalSignOutCommand),
  GlobalSignOutRequestFilterSensitiveLog: () => (/* reexport */ GlobalSignOutRequestFilterSensitiveLog),
  GroupExistsException: () => (/* reexport */ GroupExistsException),
  IdentityProviderTypeType: () => (/* reexport */ IdentityProviderTypeType),
  InitiateAuthCommand: () => (/* reexport */ InitiateAuthCommand),
  InitiateAuthRequestFilterSensitiveLog: () => (/* reexport */ InitiateAuthRequestFilterSensitiveLog),
  InitiateAuthResponseFilterSensitiveLog: () => (/* reexport */ InitiateAuthResponseFilterSensitiveLog),
  InternalErrorException: () => (/* reexport */ InternalErrorException),
  InvalidEmailRoleAccessPolicyException: () => (/* reexport */ InvalidEmailRoleAccessPolicyException),
  InvalidLambdaResponseException: () => (/* reexport */ InvalidLambdaResponseException),
  InvalidOAuthFlowException: () => (/* reexport */ InvalidOAuthFlowException),
  InvalidParameterException: () => (/* reexport */ InvalidParameterException),
  InvalidPasswordException: () => (/* reexport */ InvalidPasswordException),
  InvalidSmsRoleAccessPolicyException: () => (/* reexport */ InvalidSmsRoleAccessPolicyException),
  InvalidSmsRoleTrustRelationshipException: () => (/* reexport */ InvalidSmsRoleTrustRelationshipException),
  InvalidUserPoolConfigurationException: () => (/* reexport */ InvalidUserPoolConfigurationException),
  LimitExceededException: () => (/* reexport */ LimitExceededException),
  ListDevicesCommand: () => (/* reexport */ ListDevicesCommand),
  ListDevicesRequestFilterSensitiveLog: () => (/* reexport */ ListDevicesRequestFilterSensitiveLog),
  ListDevicesResponseFilterSensitiveLog: () => (/* reexport */ ListDevicesResponseFilterSensitiveLog),
  ListGroupsCommand: () => (/* reexport */ ListGroupsCommand),
  ListIdentityProvidersCommand: () => (/* reexport */ ListIdentityProvidersCommand),
  ListResourceServersCommand: () => (/* reexport */ ListResourceServersCommand),
  ListTagsForResourceCommand: () => (/* reexport */ ListTagsForResourceCommand),
  ListUserImportJobsCommand: () => (/* reexport */ ListUserImportJobsCommand),
  ListUserPoolClientsCommand: () => (/* reexport */ ListUserPoolClientsCommand),
  ListUserPoolClientsResponseFilterSensitiveLog: () => (/* reexport */ ListUserPoolClientsResponseFilterSensitiveLog),
  ListUserPoolsCommand: () => (/* reexport */ ListUserPoolsCommand),
  ListUsersCommand: () => (/* reexport */ ListUsersCommand),
  ListUsersInGroupCommand: () => (/* reexport */ ListUsersInGroupCommand),
  ListUsersInGroupResponseFilterSensitiveLog: () => (/* reexport */ ListUsersInGroupResponseFilterSensitiveLog),
  ListUsersResponseFilterSensitiveLog: () => (/* reexport */ ListUsersResponseFilterSensitiveLog),
  ListWebAuthnCredentialsCommand: () => (/* reexport */ ListWebAuthnCredentialsCommand),
  ListWebAuthnCredentialsRequestFilterSensitiveLog: () => (/* reexport */ ListWebAuthnCredentialsRequestFilterSensitiveLog),
  LogLevel: () => (/* reexport */ LogLevel),
  MFAMethodNotFoundException: () => (/* reexport */ MFAMethodNotFoundException),
  ManagedLoginBrandingExistsException: () => (/* reexport */ ManagedLoginBrandingExistsException),
  MessageActionType: () => (/* reexport */ MessageActionType),
  NotAuthorizedException: () => (/* reexport */ NotAuthorizedException),
  OAuthFlowType: () => (/* reexport */ OAuthFlowType),
  PasswordHistoryPolicyViolationException: () => (/* reexport */ PasswordHistoryPolicyViolationException),
  PasswordResetRequiredException: () => (/* reexport */ PasswordResetRequiredException),
  PreTokenGenerationLambdaVersionType: () => (/* reexport */ PreTokenGenerationLambdaVersionType),
  PreconditionNotMetException: () => (/* reexport */ PreconditionNotMetException),
  PreventUserExistenceErrorTypes: () => (/* reexport */ PreventUserExistenceErrorTypes),
  RecoveryOptionNameType: () => (/* reexport */ RecoveryOptionNameType),
  RefreshTokenReuseException: () => (/* reexport */ RefreshTokenReuseException),
  ResendConfirmationCodeCommand: () => (/* reexport */ ResendConfirmationCodeCommand),
  ResendConfirmationCodeRequestFilterSensitiveLog: () => (/* reexport */ ResendConfirmationCodeRequestFilterSensitiveLog),
  ResourceNotFoundException: () => (/* reexport */ ResourceNotFoundException),
  RespondToAuthChallengeCommand: () => (/* reexport */ RespondToAuthChallengeCommand),
  RespondToAuthChallengeRequestFilterSensitiveLog: () => (/* reexport */ RespondToAuthChallengeRequestFilterSensitiveLog),
  RespondToAuthChallengeResponseFilterSensitiveLog: () => (/* reexport */ RespondToAuthChallengeResponseFilterSensitiveLog),
  RevokeTokenCommand: () => (/* reexport */ RevokeTokenCommand),
  RevokeTokenRequestFilterSensitiveLog: () => (/* reexport */ RevokeTokenRequestFilterSensitiveLog),
  RiskConfigurationTypeFilterSensitiveLog: () => (/* reexport */ RiskConfigurationTypeFilterSensitiveLog),
  RiskDecisionType: () => (/* reexport */ RiskDecisionType),
  RiskLevelType: () => (/* reexport */ RiskLevelType),
  ScopeDoesNotExistException: () => (/* reexport */ ScopeDoesNotExistException),
  SetLogDeliveryConfigurationCommand: () => (/* reexport */ SetLogDeliveryConfigurationCommand),
  SetRiskConfigurationCommand: () => (/* reexport */ SetRiskConfigurationCommand),
  SetRiskConfigurationRequestFilterSensitiveLog: () => (/* reexport */ SetRiskConfigurationRequestFilterSensitiveLog),
  SetRiskConfigurationResponseFilterSensitiveLog: () => (/* reexport */ SetRiskConfigurationResponseFilterSensitiveLog),
  SetUICustomizationCommand: () => (/* reexport */ SetUICustomizationCommand),
  SetUICustomizationRequestFilterSensitiveLog: () => (/* reexport */ SetUICustomizationRequestFilterSensitiveLog),
  SetUICustomizationResponseFilterSensitiveLog: () => (/* reexport */ SetUICustomizationResponseFilterSensitiveLog),
  SetUserMFAPreferenceCommand: () => (/* reexport */ SetUserMFAPreferenceCommand),
  SetUserMFAPreferenceRequestFilterSensitiveLog: () => (/* reexport */ SetUserMFAPreferenceRequestFilterSensitiveLog),
  SetUserPoolMfaConfigCommand: () => (/* reexport */ SetUserPoolMfaConfigCommand),
  SetUserSettingsCommand: () => (/* reexport */ SetUserSettingsCommand),
  SetUserSettingsRequestFilterSensitiveLog: () => (/* reexport */ SetUserSettingsRequestFilterSensitiveLog),
  SignUpCommand: () => (/* reexport */ SignUpCommand),
  SignUpRequestFilterSensitiveLog: () => (/* reexport */ SignUpRequestFilterSensitiveLog),
  SignUpResponseFilterSensitiveLog: () => (/* reexport */ SignUpResponseFilterSensitiveLog),
  SoftwareTokenMFANotFoundException: () => (/* reexport */ SoftwareTokenMFANotFoundException),
  StartUserImportJobCommand: () => (/* reexport */ StartUserImportJobCommand),
  StartWebAuthnRegistrationCommand: () => (/* reexport */ StartWebAuthnRegistrationCommand),
  StartWebAuthnRegistrationRequestFilterSensitiveLog: () => (/* reexport */ StartWebAuthnRegistrationRequestFilterSensitiveLog),
  StatusType: () => (/* reexport */ StatusType),
  StopUserImportJobCommand: () => (/* reexport */ StopUserImportJobCommand),
  TagResourceCommand: () => (/* reexport */ TagResourceCommand),
  TierChangeNotAllowedException: () => (/* reexport */ TierChangeNotAllowedException),
  TimeUnitsType: () => (/* reexport */ TimeUnitsType),
  TooManyFailedAttemptsException: () => (/* reexport */ TooManyFailedAttemptsException),
  TooManyRequestsException: () => (/* reexport */ TooManyRequestsException),
  UICustomizationTypeFilterSensitiveLog: () => (/* reexport */ UICustomizationTypeFilterSensitiveLog),
  UnauthorizedException: () => (/* reexport */ UnauthorizedException),
  UnexpectedLambdaException: () => (/* reexport */ UnexpectedLambdaException),
  UnsupportedIdentityProviderException: () => (/* reexport */ UnsupportedIdentityProviderException),
  UnsupportedOperationException: () => (/* reexport */ UnsupportedOperationException),
  UnsupportedTokenTypeException: () => (/* reexport */ UnsupportedTokenTypeException),
  UnsupportedUserStateException: () => (/* reexport */ UnsupportedUserStateException),
  UntagResourceCommand: () => (/* reexport */ UntagResourceCommand),
  UpdateAuthEventFeedbackCommand: () => (/* reexport */ UpdateAuthEventFeedbackCommand),
  UpdateAuthEventFeedbackRequestFilterSensitiveLog: () => (/* reexport */ UpdateAuthEventFeedbackRequestFilterSensitiveLog),
  UpdateDeviceStatusCommand: () => (/* reexport */ UpdateDeviceStatusCommand),
  UpdateDeviceStatusRequestFilterSensitiveLog: () => (/* reexport */ UpdateDeviceStatusRequestFilterSensitiveLog),
  UpdateGroupCommand: () => (/* reexport */ UpdateGroupCommand),
  UpdateIdentityProviderCommand: () => (/* reexport */ UpdateIdentityProviderCommand),
  UpdateManagedLoginBrandingCommand: () => (/* reexport */ UpdateManagedLoginBrandingCommand),
  UpdateResourceServerCommand: () => (/* reexport */ UpdateResourceServerCommand),
  UpdateUserAttributesCommand: () => (/* reexport */ UpdateUserAttributesCommand),
  UpdateUserAttributesRequestFilterSensitiveLog: () => (/* reexport */ UpdateUserAttributesRequestFilterSensitiveLog),
  UpdateUserPoolClientCommand: () => (/* reexport */ UpdateUserPoolClientCommand),
  UpdateUserPoolClientRequestFilterSensitiveLog: () => (/* reexport */ UpdateUserPoolClientRequestFilterSensitiveLog),
  UpdateUserPoolClientResponseFilterSensitiveLog: () => (/* reexport */ UpdateUserPoolClientResponseFilterSensitiveLog),
  UpdateUserPoolCommand: () => (/* reexport */ UpdateUserPoolCommand),
  UpdateUserPoolDomainCommand: () => (/* reexport */ UpdateUserPoolDomainCommand),
  UserContextDataTypeFilterSensitiveLog: () => (/* reexport */ UserContextDataTypeFilterSensitiveLog),
  UserImportInProgressException: () => (/* reexport */ UserImportInProgressException),
  UserImportJobStatusType: () => (/* reexport */ UserImportJobStatusType),
  UserLambdaValidationException: () => (/* reexport */ UserLambdaValidationException),
  UserNotConfirmedException: () => (/* reexport */ UserNotConfirmedException),
  UserNotFoundException: () => (/* reexport */ UserNotFoundException),
  UserPoolAddOnNotEnabledException: () => (/* reexport */ UserPoolAddOnNotEnabledException),
  UserPoolClientDescriptionFilterSensitiveLog: () => (/* reexport */ UserPoolClientDescriptionFilterSensitiveLog),
  UserPoolClientTypeFilterSensitiveLog: () => (/* reexport */ UserPoolClientTypeFilterSensitiveLog),
  UserPoolMfaType: () => (/* reexport */ UserPoolMfaType),
  UserPoolTaggingException: () => (/* reexport */ UserPoolTaggingException),
  UserPoolTierType: () => (/* reexport */ UserPoolTierType),
  UserStatusType: () => (/* reexport */ UserStatusType),
  UserTypeFilterSensitiveLog: () => (/* reexport */ UserTypeFilterSensitiveLog),
  UserVerificationType: () => (/* reexport */ UserVerificationType),
  UsernameAttributeType: () => (/* reexport */ UsernameAttributeType),
  UsernameExistsException: () => (/* reexport */ UsernameExistsException),
  VerifiedAttributeType: () => (/* reexport */ VerifiedAttributeType),
  VerifySoftwareTokenCommand: () => (/* reexport */ VerifySoftwareTokenCommand),
  VerifySoftwareTokenRequestFilterSensitiveLog: () => (/* reexport */ VerifySoftwareTokenRequestFilterSensitiveLog),
  VerifySoftwareTokenResponseFilterSensitiveLog: () => (/* reexport */ VerifySoftwareTokenResponseFilterSensitiveLog),
  VerifySoftwareTokenResponseType: () => (/* reexport */ VerifySoftwareTokenResponseType),
  VerifyUserAttributeCommand: () => (/* reexport */ VerifyUserAttributeCommand),
  VerifyUserAttributeRequestFilterSensitiveLog: () => (/* reexport */ VerifyUserAttributeRequestFilterSensitiveLog),
  WebAuthnChallengeNotFoundException: () => (/* reexport */ WebAuthnChallengeNotFoundException),
  WebAuthnClientMismatchException: () => (/* reexport */ WebAuthnClientMismatchException),
  WebAuthnConfigurationMissingException: () => (/* reexport */ WebAuthnConfigurationMissingException),
  WebAuthnCredentialNotSupportedException: () => (/* reexport */ WebAuthnCredentialNotSupportedException),
  WebAuthnNotEnabledException: () => (/* reexport */ WebAuthnNotEnabledException),
  WebAuthnOriginNotAllowedException: () => (/* reexport */ WebAuthnOriginNotAllowedException),
  WebAuthnRelyingPartyMismatchException: () => (/* reexport */ WebAuthnRelyingPartyMismatchException),
  __Client: () => (/* reexport */ smithy_client_dist_es.Client),
  paginateAdminListGroupsForUser: () => (/* reexport */ paginateAdminListGroupsForUser),
  paginateAdminListUserAuthEvents: () => (/* reexport */ paginateAdminListUserAuthEvents),
  paginateListGroups: () => (/* reexport */ paginateListGroups),
  paginateListIdentityProviders: () => (/* reexport */ paginateListIdentityProviders),
  paginateListResourceServers: () => (/* reexport */ paginateListResourceServers),
  paginateListUserPoolClients: () => (/* reexport */ paginateListUserPoolClients),
  paginateListUserPools: () => (/* reexport */ paginateListUserPools),
  paginateListUsers: () => (/* reexport */ paginateListUsers),
  paginateListUsersInGroup: () => (/* reexport */ paginateListUsersInGroup)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
var dist_es = __webpack_require__(1095);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js + 1 modules
var middleware_logger_dist_es = __webpack_require__(9359);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js
var middleware_recursion_detection_dist_es = __webpack_require__(8377);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js + 5 modules
var middleware_user_agent_dist_es = __webpack_require__(6827);
// EXTERNAL MODULE: ./node_modules/@smithy/config-resolver/dist-es/index.js + 17 modules
var config_resolver_dist_es = __webpack_require__(7735);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js + 2 modules
var getHttpAuthSchemeEndpointRuleSetPlugin = __webpack_require__(2404);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
var DefaultIdentityProviderConfig = __webpack_require__(612);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js + 1 modules
var getHttpSigningMiddleware = __webpack_require__(5172);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-content-length/dist-es/index.js
var middleware_content_length_dist_es = __webpack_require__(649);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-endpoint/dist-es/index.js + 12 modules
var middleware_endpoint_dist_es = __webpack_require__(427);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-retry/dist-es/index.js + 16 modules
var middleware_retry_dist_es = __webpack_require__(4422);
// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 41 modules
var smithy_client_dist_es = __webpack_require__(9764);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js + 15 modules
var resolveAwsSdkSigV4Config = __webpack_require__(4283);
// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/auth/httpAuthSchemeProvider.js


const defaultCognitoIdentityProviderHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
        operation: (0,util_middleware_dist_es.getSmithyContext)(context).operation,
        region: (await (0,util_middleware_dist_es.normalizeProvider)(config.region)()) ||
            (() => {
                throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
            })(),
    };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
            name: "cognito-idp",
            region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
            signingProperties: {
                config,
                context,
            },
        }),
    };
}
function createSmithyApiNoAuthHttpAuthOption(authParameters) {
    return {
        schemeId: "smithy.api#noAuth",
    };
}
const defaultCognitoIdentityProviderHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
        case "AssociateSoftwareToken": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ChangePassword": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "CompleteWebAuthnRegistration": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ConfirmDevice": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ConfirmForgotPassword": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ConfirmSignUp": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "DeleteUser": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "DeleteUserAttributes": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "DeleteWebAuthnCredential": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ForgetDevice": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ForgotPassword": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "GetDevice": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "GetUser": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "GetUserAttributeVerificationCode": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "GetUserAuthFactors": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "GlobalSignOut": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "InitiateAuth": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ListDevices": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ListWebAuthnCredentials": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "ResendConfirmationCode": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "RespondToAuthChallenge": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "RevokeToken": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "SetUserMFAPreference": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "SetUserSettings": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "SignUp": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "StartWebAuthnRegistration": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "UpdateAuthEventFeedback": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "UpdateDeviceStatus": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "UpdateUserAttributes": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "VerifySoftwareToken": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        case "VerifyUserAttribute": {
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        }
        default: {
            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
    }
    return options;
};
const resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0,resolveAwsSdkSigV4Config.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {
        authSchemePreference: (0,util_middleware_dist_es.normalizeProvider)(config.authSchemePreference ?? []),
    });
};

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/endpoint/EndpointParameters.js
const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cognito-idp",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/package.json
const package_namespaceObject = /*#__PURE__*/JSON.parse('{"name":"@aws-sdk/client-cognito-identity-provider","description":"AWS SDK for JavaScript Cognito Identity Provider Client for Node.js, Browser and React Native","version":"3.863.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"node ../../scripts/compilation/inline client-cognito-identity-provider","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo cognito-identity-provider"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"5.2.0","@aws-crypto/sha256-js":"5.2.0","@aws-sdk/core":"3.863.0","@aws-sdk/credential-provider-node":"3.863.0","@aws-sdk/middleware-host-header":"3.862.0","@aws-sdk/middleware-logger":"3.862.0","@aws-sdk/middleware-recursion-detection":"3.862.0","@aws-sdk/middleware-user-agent":"3.863.0","@aws-sdk/region-config-resolver":"3.862.0","@aws-sdk/types":"3.862.0","@aws-sdk/util-endpoints":"3.862.0","@aws-sdk/util-user-agent-browser":"3.862.0","@aws-sdk/util-user-agent-node":"3.863.0","@smithy/config-resolver":"^4.1.5","@smithy/core":"^3.8.0","@smithy/fetch-http-handler":"^5.1.1","@smithy/hash-node":"^4.0.5","@smithy/invalid-dependency":"^4.0.5","@smithy/middleware-content-length":"^4.0.5","@smithy/middleware-endpoint":"^4.1.18","@smithy/middleware-retry":"^4.1.19","@smithy/middleware-serde":"^4.0.9","@smithy/middleware-stack":"^4.0.5","@smithy/node-config-provider":"^4.1.4","@smithy/node-http-handler":"^4.1.1","@smithy/protocol-http":"^5.1.3","@smithy/smithy-client":"^4.4.10","@smithy/types":"^4.3.2","@smithy/url-parser":"^4.0.5","@smithy/util-base64":"^4.0.0","@smithy/util-body-length-browser":"^4.0.0","@smithy/util-body-length-node":"^4.0.0","@smithy/util-defaults-mode-browser":"^4.0.26","@smithy/util-defaults-mode-node":"^4.0.26","@smithy/util-endpoints":"^3.0.7","@smithy/util-middleware":"^4.0.5","@smithy/util-retry":"^4.0.7","@smithy/util-utf8":"^4.0.0","tslib":"^2.6.2"},"devDependencies":{"@tsconfig/node18":"18.2.4","@types/node":"^18.19.69","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typescript":"~5.8.3"},"engines":{"node":">=18.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity-provider","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-cognito-identity-provider"}}');
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var emitWarningIfUnsupportedVersion = __webpack_require__(5122);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js + 2 modules
var NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = __webpack_require__(4472);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/credential-provider-node/dist-es/index.js + 2 modules
var credential_provider_node_dist_es = __webpack_require__(8257);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js + 5 modules
var util_user_agent_node_dist_es = __webpack_require__(3410);
// EXTERNAL MODULE: ./node_modules/@smithy/hash-node/dist-es/index.js
var hash_node_dist_es = __webpack_require__(1701);
// EXTERNAL MODULE: ./node_modules/@smithy/node-config-provider/dist-es/index.js + 5 modules
var node_config_provider_dist_es = __webpack_require__(9987);
// EXTERNAL MODULE: ./node_modules/@smithy/node-http-handler/dist-es/index.js + 14 modules
var node_http_handler_dist_es = __webpack_require__(5310);
// EXTERNAL MODULE: ./node_modules/@smithy/util-body-length-node/dist-es/index.js + 1 modules
var util_body_length_node_dist_es = __webpack_require__(7809);
// EXTERNAL MODULE: ./node_modules/@smithy/util-retry/dist-es/index.js + 8 modules
var util_retry_dist_es = __webpack_require__(3323);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js + 4 modules
var AwsSdkSigV4Signer = __webpack_require__(6228);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js
var noAuth = __webpack_require__(5536);
// EXTERNAL MODULE: ./node_modules/@smithy/url-parser/dist-es/index.js + 1 modules
var url_parser_dist_es = __webpack_require__(2641);
// EXTERNAL MODULE: ./node_modules/@smithy/util-base64/dist-es/index.js + 2 modules
var util_base64_dist_es = __webpack_require__(4572);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/index.js + 3 modules
var util_utf8_dist_es = __webpack_require__(3197);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js + 15 modules
var util_endpoints_dist_es = __webpack_require__(643);
// EXTERNAL MODULE: ./node_modules/@smithy/util-endpoints/dist-es/index.js + 35 modules
var _smithy_util_endpoints_dist_es = __webpack_require__(8545);
;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/endpoint/ruleset.js
const w = "required", x = "fn", y = "argv", z = "ref";
const a = true, b = "isSet", c = "booleanEquals", d = "error", e = "endpoint", f = "tree", g = "PartitionResult", h = "getAttr", i = "stringEquals", j = { [w]: false, "type": "String" }, k = { [w]: true, "default": false, "type": "Boolean" }, l = { [z]: "Endpoint" }, m = { [x]: c, [y]: [{ [z]: "UseFIPS" }, true] }, n = { [x]: c, [y]: [{ [z]: "UseDualStack" }, true] }, o = {}, p = { [z]: "Region" }, q = { [x]: h, [y]: [{ [z]: g }, "supportsFIPS"] }, r = { [z]: g }, s = { [x]: c, [y]: [true, { [x]: h, [y]: [r, "supportsDualStack"] }] }, t = [m], u = [n], v = [p];
const _data = { version: "1.0", parameters: { Region: j, UseDualStack: k, UseFIPS: k, Endpoint: j }, rules: [{ conditions: [{ [x]: b, [y]: [l] }], rules: [{ conditions: t, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: u, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: l, properties: o, headers: o }, type: e }], type: f }, { conditions: [{ [x]: b, [y]: v }], rules: [{ conditions: [{ [x]: "aws.partition", [y]: v, assign: g }], rules: [{ conditions: [m, n], rules: [{ conditions: [{ [x]: c, [y]: [a, q] }, s], rules: [{ conditions: [{ [x]: i, [y]: [p, "us-east-1"] }], endpoint: { url: "https://cognito-idp-fips.us-east-1.amazonaws.com", properties: o, headers: o }, type: e }, { conditions: [{ [x]: i, [y]: [p, "us-east-2"] }], endpoint: { url: "https://cognito-idp-fips.us-east-2.amazonaws.com", properties: o, headers: o }, type: e }, { conditions: [{ [x]: i, [y]: [p, "us-west-1"] }], endpoint: { url: "https://cognito-idp-fips.us-west-1.amazonaws.com", properties: o, headers: o }, type: e }, { conditions: [{ [x]: i, [y]: [p, "us-west-2"] }], endpoint: { url: "https://cognito-idp-fips.us-west-2.amazonaws.com", properties: o, headers: o }, type: e }, { endpoint: { url: "https://cognito-idp-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: o, headers: o }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: t, rules: [{ conditions: [{ [x]: c, [y]: [q, a] }], rules: [{ endpoint: { url: "https://cognito-idp-fips.{Region}.{PartitionResult#dnsSuffix}", properties: o, headers: o }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: u, rules: [{ conditions: [s], rules: [{ conditions: [{ [x]: i, [y]: ["aws", { [x]: h, [y]: [r, "name"] }] }], endpoint: { url: "https://cognito-idp.{Region}.amazonaws.com", properties: o, headers: o }, type: e }, { endpoint: { url: "https://cognito-idp.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: o, headers: o }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://cognito-idp.{Region}.{PartitionResult#dnsSuffix}", properties: o, headers: o }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
const ruleSet = _data;

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/endpoint/endpointResolver.js



const cache = new _smithy_util_endpoints_dist_es.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"],
});
const defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0,_smithy_util_endpoints_dist_es.resolveEndpoint)(ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger,
    }));
};
_smithy_util_endpoints_dist_es.customEndpointFunctions.aws = util_endpoints_dist_es.awsEndpointFunctions;

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/runtimeConfig.shared.js








const getRuntimeConfig = (config) => {
    return {
        apiVersion: "2016-04-18",
        base64Decoder: config?.base64Decoder ?? util_base64_dist_es.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_dist_es.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultCognitoIdentityProviderHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
            {
                schemeId: "aws.auth#sigv4",
                identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
                signer: new AwsSdkSigV4Signer.AwsSdkSigV4Signer(),
            },
            {
                schemeId: "smithy.api#noAuth",
                identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
                signer: new noAuth.NoAuthSigner(),
            },
        ],
        logger: config?.logger ?? new smithy_client_dist_es.NoOpLogger(),
        serviceId: config?.serviceId ?? "Cognito Identity Provider",
        urlParser: config?.urlParser ?? url_parser_dist_es.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_dist_es.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_dist_es.toUtf8,
    };
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-defaults-mode-node/dist-es/index.js + 3 modules
var util_defaults_mode_node_dist_es = __webpack_require__(4321);
;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/runtimeConfig.js















const runtimeConfig_getRuntimeConfig = (config) => {
    (0,smithy_client_dist_es.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0,util_defaults_mode_node_dist_es.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_dist_es.loadConfigsForDefaultMode);
    const clientSharedValues = getRuntimeConfig(config);
    (0,emitWarningIfUnsupportedVersion.emitWarningIfUnsupportedVersion)(process.version);
    const loaderConfig = {
        profile: config?.profile,
        logger: clientSharedValues.logger,
    };
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config?.authSchemePreference ?? (0,node_config_provider_dist_es.loadConfig)(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_dist_es.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_dist_es.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ??
            (0,util_user_agent_node_dist_es.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_namespaceObject.version }),
        maxAttempts: config?.maxAttempts ?? (0,node_config_provider_dist_es.loadConfig)(middleware_retry_dist_es.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region: config?.region ??
            (0,node_config_provider_dist_es.loadConfig)(config_resolver_dist_es.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_dist_es.NODE_REGION_CONFIG_FILE_OPTIONS, ...loaderConfig }),
        requestHandler: node_http_handler_dist_es.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ??
            (0,node_config_provider_dist_es.loadConfig)({
                ...middleware_retry_dist_es.NODE_RETRY_MODE_CONFIG_OPTIONS,
                default: async () => (await defaultConfigProvider()).retryMode || util_retry_dist_es.DEFAULT_RETRY_MODE,
            }, config),
        sha256: config?.sha256 ?? hash_node_dist_es.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_dist_es.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0,node_config_provider_dist_es.loadConfig)(config_resolver_dist_es.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0,node_config_provider_dist_es.loadConfig)(config_resolver_dist_es.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        userAgentAppId: config?.userAgentAppId ?? (0,node_config_provider_dist_es.loadConfig)(util_user_agent_node_dist_es.NODE_APP_ID_CONFIG_OPTIONS, loaderConfig),
    };
};

// EXTERNAL MODULE: ./node_modules/@aws-sdk/region-config-resolver/dist-es/index.js + 6 modules
var region_config_resolver_dist_es = __webpack_require__(6264);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var protocol_http_dist_es = __webpack_require__(3608);
;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/auth/httpAuthExtensionConfiguration.js
const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/runtimeExtensions.js




const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0,region_config_resolver_dist_es.getAwsRegionExtensionConfiguration)(runtimeConfig), (0,smithy_client_dist_es.getDefaultExtensionConfiguration)(runtimeConfig), (0,protocol_http_dist_es.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0,region_config_resolver_dist_es.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0,smithy_client_dist_es.resolveDefaultRuntimeConfig)(extensionConfiguration), (0,protocol_http_dist_es.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/CognitoIdentityProviderClient.js















class CognitoIdentityProviderClient extends smithy_client_dist_es.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig_getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0,middleware_user_agent_dist_es.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0,middleware_retry_dist_es.resolveRetryConfig)(_config_2);
        const _config_4 = (0,config_resolver_dist_es.resolveRegionConfig)(_config_3);
        const _config_5 = (0,dist_es.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0,middleware_endpoint_dist_es.resolveEndpointConfig)(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use((0,middleware_user_agent_dist_es.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0,middleware_retry_dist_es.getRetryPlugin)(this.config));
        this.middlewareStack.use((0,middleware_content_length_dist_es.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0,dist_es.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0,middleware_logger_dist_es.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0,middleware_recursion_detection_dist_es.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0,getHttpAuthSchemeEndpointRuleSetPlugin.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: defaultCognitoIdentityProviderHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use((0,getHttpSigningMiddleware.getHttpSigningPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-serde/dist-es/index.js + 3 modules
var middleware_serde_dist_es = __webpack_require__(1208);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody = __webpack_require__(1919);
;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/models/CognitoIdentityProviderServiceException.js


class CognitoIdentityProviderServiceException extends smithy_client_dist_es.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CognitoIdentityProviderServiceException.prototype);
    }
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/models/models_0.js


const RecoveryOptionNameType = {
    ADMIN_ONLY: "admin_only",
    VERIFIED_EMAIL: "verified_email",
    VERIFIED_PHONE_NUMBER: "verified_phone_number",
};
const AccountTakeoverEventActionType = {
    BLOCK: "BLOCK",
    MFA_IF_CONFIGURED: "MFA_IF_CONFIGURED",
    MFA_REQUIRED: "MFA_REQUIRED",
    NO_ACTION: "NO_ACTION",
};
const AttributeDataType = {
    BOOLEAN: "Boolean",
    DATETIME: "DateTime",
    NUMBER: "Number",
    STRING: "String",
};
class InternalErrorException extends CognitoIdentityProviderServiceException {
    name = "InternalErrorException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalErrorException.prototype);
    }
}
class InvalidParameterException extends CognitoIdentityProviderServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    reasonCode;
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.reasonCode = opts.reasonCode;
    }
}
class NotAuthorizedException extends CognitoIdentityProviderServiceException {
    name = "NotAuthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
    }
}
class ResourceNotFoundException extends CognitoIdentityProviderServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class TooManyRequestsException extends CognitoIdentityProviderServiceException {
    name = "TooManyRequestsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
class UserImportInProgressException extends CognitoIdentityProviderServiceException {
    name = "UserImportInProgressException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserImportInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserImportInProgressException.prototype);
    }
}
class UserNotFoundException extends CognitoIdentityProviderServiceException {
    name = "UserNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserNotFoundException.prototype);
    }
}
class InvalidLambdaResponseException extends CognitoIdentityProviderServiceException {
    name = "InvalidLambdaResponseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidLambdaResponseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidLambdaResponseException.prototype);
    }
}
class LimitExceededException extends CognitoIdentityProviderServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class TooManyFailedAttemptsException extends CognitoIdentityProviderServiceException {
    name = "TooManyFailedAttemptsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyFailedAttemptsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyFailedAttemptsException.prototype);
    }
}
class UnexpectedLambdaException extends CognitoIdentityProviderServiceException {
    name = "UnexpectedLambdaException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnexpectedLambdaException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnexpectedLambdaException.prototype);
    }
}
class UserLambdaValidationException extends CognitoIdentityProviderServiceException {
    name = "UserLambdaValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserLambdaValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserLambdaValidationException.prototype);
    }
}
const DeliveryMediumType = {
    EMAIL: "EMAIL",
    SMS: "SMS",
};
const MessageActionType = {
    RESEND: "RESEND",
    SUPPRESS: "SUPPRESS",
};
const UserStatusType = {
    ARCHIVED: "ARCHIVED",
    COMPROMISED: "COMPROMISED",
    CONFIRMED: "CONFIRMED",
    EXTERNAL_PROVIDER: "EXTERNAL_PROVIDER",
    FORCE_CHANGE_PASSWORD: "FORCE_CHANGE_PASSWORD",
    RESET_REQUIRED: "RESET_REQUIRED",
    UNCONFIRMED: "UNCONFIRMED",
    UNKNOWN: "UNKNOWN",
};
class CodeDeliveryFailureException extends CognitoIdentityProviderServiceException {
    name = "CodeDeliveryFailureException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CodeDeliveryFailureException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CodeDeliveryFailureException.prototype);
    }
}
class InvalidPasswordException extends CognitoIdentityProviderServiceException {
    name = "InvalidPasswordException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidPasswordException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidPasswordException.prototype);
    }
}
class InvalidSmsRoleAccessPolicyException extends CognitoIdentityProviderServiceException {
    name = "InvalidSmsRoleAccessPolicyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSmsRoleAccessPolicyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSmsRoleAccessPolicyException.prototype);
    }
}
class InvalidSmsRoleTrustRelationshipException extends CognitoIdentityProviderServiceException {
    name = "InvalidSmsRoleTrustRelationshipException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSmsRoleTrustRelationshipException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSmsRoleTrustRelationshipException.prototype);
    }
}
class PreconditionNotMetException extends CognitoIdentityProviderServiceException {
    name = "PreconditionNotMetException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PreconditionNotMetException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PreconditionNotMetException.prototype);
    }
}
class UnsupportedUserStateException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedUserStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedUserStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedUserStateException.prototype);
    }
}
class UsernameExistsException extends CognitoIdentityProviderServiceException {
    name = "UsernameExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UsernameExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UsernameExistsException.prototype);
    }
}
class AliasExistsException extends CognitoIdentityProviderServiceException {
    name = "AliasExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AliasExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AliasExistsException.prototype);
    }
}
class InvalidUserPoolConfigurationException extends CognitoIdentityProviderServiceException {
    name = "InvalidUserPoolConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidUserPoolConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidUserPoolConfigurationException.prototype);
    }
}
const AuthFlowType = {
    ADMIN_NO_SRP_AUTH: "ADMIN_NO_SRP_AUTH",
    ADMIN_USER_PASSWORD_AUTH: "ADMIN_USER_PASSWORD_AUTH",
    CUSTOM_AUTH: "CUSTOM_AUTH",
    REFRESH_TOKEN: "REFRESH_TOKEN",
    REFRESH_TOKEN_AUTH: "REFRESH_TOKEN_AUTH",
    USER_AUTH: "USER_AUTH",
    USER_PASSWORD_AUTH: "USER_PASSWORD_AUTH",
    USER_SRP_AUTH: "USER_SRP_AUTH",
};
const ChallengeNameType = {
    ADMIN_NO_SRP_AUTH: "ADMIN_NO_SRP_AUTH",
    CUSTOM_CHALLENGE: "CUSTOM_CHALLENGE",
    DEVICE_PASSWORD_VERIFIER: "DEVICE_PASSWORD_VERIFIER",
    DEVICE_SRP_AUTH: "DEVICE_SRP_AUTH",
    EMAIL_OTP: "EMAIL_OTP",
    MFA_SETUP: "MFA_SETUP",
    NEW_PASSWORD_REQUIRED: "NEW_PASSWORD_REQUIRED",
    PASSWORD: "PASSWORD",
    PASSWORD_SRP: "PASSWORD_SRP",
    PASSWORD_VERIFIER: "PASSWORD_VERIFIER",
    SELECT_CHALLENGE: "SELECT_CHALLENGE",
    SELECT_MFA_TYPE: "SELECT_MFA_TYPE",
    SMS_MFA: "SMS_MFA",
    SMS_OTP: "SMS_OTP",
    SOFTWARE_TOKEN_MFA: "SOFTWARE_TOKEN_MFA",
    WEB_AUTHN: "WEB_AUTHN",
};
class InvalidEmailRoleAccessPolicyException extends CognitoIdentityProviderServiceException {
    name = "InvalidEmailRoleAccessPolicyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidEmailRoleAccessPolicyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidEmailRoleAccessPolicyException.prototype);
    }
}
class MFAMethodNotFoundException extends CognitoIdentityProviderServiceException {
    name = "MFAMethodNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MFAMethodNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MFAMethodNotFoundException.prototype);
    }
}
class PasswordResetRequiredException extends CognitoIdentityProviderServiceException {
    name = "PasswordResetRequiredException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PasswordResetRequiredException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PasswordResetRequiredException.prototype);
    }
}
class UnsupportedOperationException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedOperationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedOperationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
    }
}
class UserNotConfirmedException extends CognitoIdentityProviderServiceException {
    name = "UserNotConfirmedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserNotConfirmedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserNotConfirmedException.prototype);
    }
}
const ChallengeName = {
    Mfa: "Mfa",
    Password: "Password",
};
const ChallengeResponse = {
    Failure: "Failure",
    Success: "Success",
};
const FeedbackValueType = {
    INVALID: "Invalid",
    VALID: "Valid",
};
const EventResponseType = {
    Fail: "Fail",
    InProgress: "InProgress",
    Pass: "Pass",
};
const RiskDecisionType = {
    AccountTakeover: "AccountTakeover",
    Block: "Block",
    NoRisk: "NoRisk",
};
const RiskLevelType = {
    High: "High",
    Low: "Low",
    Medium: "Medium",
};
const EventType = {
    ForgotPassword: "ForgotPassword",
    PasswordChange: "PasswordChange",
    ResendCode: "ResendCode",
    SignIn: "SignIn",
    SignUp: "SignUp",
};
class UserPoolAddOnNotEnabledException extends CognitoIdentityProviderServiceException {
    name = "UserPoolAddOnNotEnabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserPoolAddOnNotEnabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserPoolAddOnNotEnabledException.prototype);
    }
}
class CodeMismatchException extends CognitoIdentityProviderServiceException {
    name = "CodeMismatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CodeMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CodeMismatchException.prototype);
    }
}
class ExpiredCodeException extends CognitoIdentityProviderServiceException {
    name = "ExpiredCodeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExpiredCodeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExpiredCodeException.prototype);
    }
}
class PasswordHistoryPolicyViolationException extends CognitoIdentityProviderServiceException {
    name = "PasswordHistoryPolicyViolationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PasswordHistoryPolicyViolationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PasswordHistoryPolicyViolationException.prototype);
    }
}
class SoftwareTokenMFANotFoundException extends CognitoIdentityProviderServiceException {
    name = "SoftwareTokenMFANotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SoftwareTokenMFANotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SoftwareTokenMFANotFoundException.prototype);
    }
}
const DeviceRememberedStatusType = {
    NOT_REMEMBERED: "not_remembered",
    REMEMBERED: "remembered",
};
const AdvancedSecurityEnabledModeType = {
    AUDIT: "AUDIT",
    ENFORCED: "ENFORCED",
};
const AdvancedSecurityModeType = {
    AUDIT: "AUDIT",
    ENFORCED: "ENFORCED",
    OFF: "OFF",
};
const AliasAttributeType = {
    EMAIL: "email",
    PHONE_NUMBER: "phone_number",
    PREFERRED_USERNAME: "preferred_username",
};
const AuthFactorType = {
    EMAIL_OTP: "EMAIL_OTP",
    PASSWORD: "PASSWORD",
    SMS_OTP: "SMS_OTP",
    WEB_AUTHN: "WEB_AUTHN",
};
const AssetCategoryType = {
    AUTH_APP_GRAPHIC: "AUTH_APP_GRAPHIC",
    EMAIL_GRAPHIC: "EMAIL_GRAPHIC",
    FAVICON_ICO: "FAVICON_ICO",
    FAVICON_SVG: "FAVICON_SVG",
    FORM_BACKGROUND: "FORM_BACKGROUND",
    FORM_LOGO: "FORM_LOGO",
    IDP_BUTTON_ICON: "IDP_BUTTON_ICON",
    PAGE_BACKGROUND: "PAGE_BACKGROUND",
    PAGE_FOOTER_BACKGROUND: "PAGE_FOOTER_BACKGROUND",
    PAGE_FOOTER_LOGO: "PAGE_FOOTER_LOGO",
    PAGE_HEADER_BACKGROUND: "PAGE_HEADER_BACKGROUND",
    PAGE_HEADER_LOGO: "PAGE_HEADER_LOGO",
    PASSKEY_GRAPHIC: "PASSKEY_GRAPHIC",
    PASSWORD_GRAPHIC: "PASSWORD_GRAPHIC",
    SMS_GRAPHIC: "SMS_GRAPHIC",
};
const AssetExtensionType = {
    ICO: "ICO",
    JPEG: "JPEG",
    PNG: "PNG",
    SVG: "SVG",
    WEBP: "WEBP",
};
const ColorSchemeModeType = {
    DARK: "DARK",
    DYNAMIC: "DYNAMIC",
    LIGHT: "LIGHT",
};
class ConcurrentModificationException extends CognitoIdentityProviderServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
class ForbiddenException extends CognitoIdentityProviderServiceException {
    name = "ForbiddenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
const VerifiedAttributeType = {
    EMAIL: "email",
    PHONE_NUMBER: "phone_number",
};
class WebAuthnChallengeNotFoundException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnChallengeNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnChallengeNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnChallengeNotFoundException.prototype);
    }
}
class WebAuthnClientMismatchException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnClientMismatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnClientMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnClientMismatchException.prototype);
    }
}
class WebAuthnCredentialNotSupportedException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnCredentialNotSupportedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnCredentialNotSupportedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnCredentialNotSupportedException.prototype);
    }
}
class WebAuthnNotEnabledException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnNotEnabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnNotEnabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnNotEnabledException.prototype);
    }
}
class WebAuthnOriginNotAllowedException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnOriginNotAllowedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnOriginNotAllowedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnOriginNotAllowedException.prototype);
    }
}
class WebAuthnRelyingPartyMismatchException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnRelyingPartyMismatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnRelyingPartyMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnRelyingPartyMismatchException.prototype);
    }
}
class DeviceKeyExistsException extends CognitoIdentityProviderServiceException {
    name = "DeviceKeyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DeviceKeyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DeviceKeyExistsException.prototype);
    }
}
class GroupExistsException extends CognitoIdentityProviderServiceException {
    name = "GroupExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "GroupExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, GroupExistsException.prototype);
    }
}
const IdentityProviderTypeType = {
    Facebook: "Facebook",
    Google: "Google",
    LoginWithAmazon: "LoginWithAmazon",
    OIDC: "OIDC",
    SAML: "SAML",
    SignInWithApple: "SignInWithApple",
};
class DuplicateProviderException extends CognitoIdentityProviderServiceException {
    name = "DuplicateProviderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DuplicateProviderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DuplicateProviderException.prototype);
    }
}
class ManagedLoginBrandingExistsException extends CognitoIdentityProviderServiceException {
    name = "ManagedLoginBrandingExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ManagedLoginBrandingExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ManagedLoginBrandingExistsException.prototype);
    }
}
const UserImportJobStatusType = {
    Created: "Created",
    Expired: "Expired",
    Failed: "Failed",
    InProgress: "InProgress",
    Pending: "Pending",
    Stopped: "Stopped",
    Stopping: "Stopping",
    Succeeded: "Succeeded",
};
const DeletionProtectionType = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
const EmailSendingAccountType = {
    COGNITO_DEFAULT: "COGNITO_DEFAULT",
    DEVELOPER: "DEVELOPER",
};
const CustomEmailSenderLambdaVersionType = {
    V1_0: "V1_0",
};
const CustomSMSSenderLambdaVersionType = {
    V1_0: "V1_0",
};
const PreTokenGenerationLambdaVersionType = {
    V1_0: "V1_0",
    V2_0: "V2_0",
    V3_0: "V3_0",
};
const UserPoolMfaType = {
    OFF: "OFF",
    ON: "ON",
    OPTIONAL: "OPTIONAL",
};
const UsernameAttributeType = {
    EMAIL: "email",
    PHONE_NUMBER: "phone_number",
};
const UserPoolTierType = {
    ESSENTIALS: "ESSENTIALS",
    LITE: "LITE",
    PLUS: "PLUS",
};
const DefaultEmailOptionType = {
    CONFIRM_WITH_CODE: "CONFIRM_WITH_CODE",
    CONFIRM_WITH_LINK: "CONFIRM_WITH_LINK",
};
const StatusType = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
class FeatureUnavailableInTierException extends CognitoIdentityProviderServiceException {
    name = "FeatureUnavailableInTierException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "FeatureUnavailableInTierException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, FeatureUnavailableInTierException.prototype);
    }
}
class TierChangeNotAllowedException extends CognitoIdentityProviderServiceException {
    name = "TierChangeNotAllowedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TierChangeNotAllowedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TierChangeNotAllowedException.prototype);
    }
}
class UserPoolTaggingException extends CognitoIdentityProviderServiceException {
    name = "UserPoolTaggingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserPoolTaggingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserPoolTaggingException.prototype);
    }
}
const OAuthFlowType = {
    client_credentials: "client_credentials",
    code: "code",
    implicit: "implicit",
};
const ExplicitAuthFlowsType = {
    ADMIN_NO_SRP_AUTH: "ADMIN_NO_SRP_AUTH",
    ALLOW_ADMIN_USER_PASSWORD_AUTH: "ALLOW_ADMIN_USER_PASSWORD_AUTH",
    ALLOW_CUSTOM_AUTH: "ALLOW_CUSTOM_AUTH",
    ALLOW_REFRESH_TOKEN_AUTH: "ALLOW_REFRESH_TOKEN_AUTH",
    ALLOW_USER_AUTH: "ALLOW_USER_AUTH",
    ALLOW_USER_PASSWORD_AUTH: "ALLOW_USER_PASSWORD_AUTH",
    ALLOW_USER_SRP_AUTH: "ALLOW_USER_SRP_AUTH",
    CUSTOM_AUTH_FLOW_ONLY: "CUSTOM_AUTH_FLOW_ONLY",
    USER_PASSWORD_AUTH: "USER_PASSWORD_AUTH",
};
const PreventUserExistenceErrorTypes = {
    ENABLED: "ENABLED",
    LEGACY: "LEGACY",
};
const FeatureType = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const TimeUnitsType = {
    DAYS: "days",
    HOURS: "hours",
    MINUTES: "minutes",
    SECONDS: "seconds",
};
class InvalidOAuthFlowException extends CognitoIdentityProviderServiceException {
    name = "InvalidOAuthFlowException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidOAuthFlowException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidOAuthFlowException.prototype);
    }
}
class ScopeDoesNotExistException extends CognitoIdentityProviderServiceException {
    name = "ScopeDoesNotExistException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ScopeDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ScopeDoesNotExistException.prototype);
    }
}
class UnsupportedIdentityProviderException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedIdentityProviderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedIdentityProviderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedIdentityProviderException.prototype);
    }
}
const CompromisedCredentialsEventActionType = {
    BLOCK: "BLOCK",
    NO_ACTION: "NO_ACTION",
};
const EventFilterType = {
    PASSWORD_CHANGE: "PASSWORD_CHANGE",
    SIGN_IN: "SIGN_IN",
    SIGN_UP: "SIGN_UP",
};
const DomainStatusType = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
const EventSourceName = {
    USER_AUTH_EVENTS: "userAuthEvents",
    USER_NOTIFICATION: "userNotification",
};
const LogLevel = {
    ERROR: "ERROR",
    INFO: "INFO",
};
class RefreshTokenReuseException extends CognitoIdentityProviderServiceException {
    name = "RefreshTokenReuseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RefreshTokenReuseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RefreshTokenReuseException.prototype);
    }
}
const AdminAddUserToGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminConfirmSignUpRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AttributeTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminCreateUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.ValidationData && {
        ValidationData: obj.ValidationData.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.TemporaryPassword && { TemporaryPassword: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UserTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Attributes && { Attributes: obj.Attributes.map((item) => AttributeTypeFilterSensitiveLog(item)) }),
});
const AdminCreateUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.User && { User: UserTypeFilterSensitiveLog(obj.User) }),
});
const AdminDeleteUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminDeleteUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminDisableUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminEnableUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminForgetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminGetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DeviceTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DeviceAttributes && {
        DeviceAttributes: obj.DeviceAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const AdminGetDeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Device && { Device: DeviceTypeFilterSensitiveLog(obj.Device) }),
});
const AdminGetUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminGetUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const AdminInitiateAuthRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.AuthParameters && { AuthParameters: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AuthenticationResultTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.RefreshToken && { RefreshToken: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.IdToken && { IdToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminInitiateAuthResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const AdminListDevicesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminListDevicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AdminListGroupsForUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminListUserAuthEventsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminRemoveUserFromGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminResetUserPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminRespondToAuthChallengeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ChallengeResponses && { ChallengeResponses: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminRespondToAuthChallengeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const AdminSetUserMFAPreferenceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminSetUserPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminSetUserSettingsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminUpdateDeviceStatusRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AdminUpdateUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const AdminUserGlobalSignOutRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AssociateSoftwareTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const AssociateSoftwareTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretCode && { SecretCode: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ChangePasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PreviousPassword && { PreviousPassword: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ProposedPassword && { ProposedPassword: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const CompleteWebAuthnRegistrationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ConfirmDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UserContextDataTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ConfirmForgotPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ConfirmSignUpRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ConfirmSignUpResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const CreateManagedLoginBrandingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UserPoolClientTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ClientSecret && { ClientSecret: smithy_client_dist_es.SENSITIVE_STRING }),
});
const CreateUserPoolClientResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClient && { UserPoolClient: UserPoolClientTypeFilterSensitiveLog(obj.UserPoolClient) }),
});
const DeleteUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DeleteUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DeleteUserPoolClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DeleteWebAuthnCredentialRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DescribeRiskConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const RiskConfigurationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DescribeRiskConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RiskConfiguration && { RiskConfiguration: RiskConfigurationTypeFilterSensitiveLog(obj.RiskConfiguration) }),
});
const DescribeUserPoolClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const DescribeUserPoolClientResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClient && { UserPoolClient: UserPoolClientTypeFilterSensitiveLog(obj.UserPoolClient) }),
});
const ForgetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ForgotPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const GetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const GetDeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Device && { Device: DeviceTypeFilterSensitiveLog(obj.Device) }),
});
const GetTokensFromRefreshTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RefreshToken && { RefreshToken: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ClientSecret && { ClientSecret: smithy_client_dist_es.SENSITIVE_STRING }),
});
const GetTokensFromRefreshTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const GetUICustomizationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UICustomizationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const GetUICustomizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UICustomization && { UICustomization: UICustomizationTypeFilterSensitiveLog(obj.UICustomization) }),
});
const GetUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const GetUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const GetUserAttributeVerificationCodeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/models/models_1.js



const UserVerificationType = {
    PREFERRED: "preferred",
    REQUIRED: "required",
};
class UnauthorizedException extends CognitoIdentityProviderServiceException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
class UnsupportedTokenTypeException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedTokenTypeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedTokenTypeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedTokenTypeException.prototype);
    }
}
class WebAuthnConfigurationMissingException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnConfigurationMissingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnConfigurationMissingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnConfigurationMissingException.prototype);
    }
}
class EnableSoftwareTokenMFAException extends CognitoIdentityProviderServiceException {
    name = "EnableSoftwareTokenMFAException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "EnableSoftwareTokenMFAException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, EnableSoftwareTokenMFAException.prototype);
    }
}
const VerifySoftwareTokenResponseType = {
    ERROR: "ERROR",
    SUCCESS: "SUCCESS",
};
const GetUserAuthFactorsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const GetUserAuthFactorsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const GlobalSignOutRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const InitiateAuthRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthParameters && { AuthParameters: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const InitiateAuthResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const ListDevicesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ListDevicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UserPoolClientDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ListUserPoolClientsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClients && {
        UserPoolClients: obj.UserPoolClients.map((item) => UserPoolClientDescriptionFilterSensitiveLog(item)),
    }),
});
const ListUsersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserTypeFilterSensitiveLog(item)) }),
});
const ListUsersInGroupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserTypeFilterSensitiveLog(item)) }),
});
const ListWebAuthnCredentialsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const ResendConfirmationCodeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
});
const RespondToAuthChallengeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ChallengeResponses && { ChallengeResponses: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithy_client_dist_es.SENSITIVE_STRING }),
});
const RespondToAuthChallengeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const RevokeTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Token && { Token: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.ClientSecret && { ClientSecret: smithy_client_dist_es.SENSITIVE_STRING }),
});
const SetRiskConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const SetRiskConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RiskConfiguration && { RiskConfiguration: RiskConfigurationTypeFilterSensitiveLog(obj.RiskConfiguration) }),
});
const SetUICustomizationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const SetUICustomizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UICustomization && { UICustomization: UICustomizationTypeFilterSensitiveLog(obj.UICustomization) }),
});
const SetUserMFAPreferenceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const SetUserSettingsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const SignUpRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.ValidationData && {
        ValidationData: obj.ValidationData.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.UserContextData && { UserContextData: smithy_client_dist_es.SENSITIVE_STRING }),
});
const SignUpResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const StartWebAuthnRegistrationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UpdateAuthEventFeedbackRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.FeedbackToken && { FeedbackToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UpdateDeviceStatusRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UpdateUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UpdateUserPoolClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithy_client_dist_es.SENSITIVE_STRING }),
});
const UpdateUserPoolClientResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClient && { UserPoolClient: UserPoolClientTypeFilterSensitiveLog(obj.UserPoolClient) }),
});
const VerifySoftwareTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
    ...(obj.UserCode && { UserCode: smithy_client_dist_es.SENSITIVE_STRING }),
});
const VerifySoftwareTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithy_client_dist_es.SENSITIVE_STRING }),
});
const VerifyUserAttributeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es.SENSITIVE_STRING }),
});

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/protocols/Aws_json1_1.js






const se_AddCustomAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("AddCustomAttributes");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminAddUserToGroupCommand = async (input, context) => {
    const headers = sharedHeaders("AdminAddUserToGroup");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminConfirmSignUpCommand = async (input, context) => {
    const headers = sharedHeaders("AdminConfirmSignUp");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminCreateUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminCreateUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDeleteUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDeleteUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDeleteUserAttributes");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDisableProviderForUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDisableProviderForUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDisableUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDisableUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminEnableUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminEnableUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminForgetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("AdminForgetDevice");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminGetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("AdminGetDevice");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminGetUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminGetUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminInitiateAuthCommand = async (input, context) => {
    const headers = sharedHeaders("AdminInitiateAuth");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminLinkProviderForUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminLinkProviderForUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminListDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("AdminListDevices");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminListGroupsForUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminListGroupsForUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminListUserAuthEventsCommand = async (input, context) => {
    const headers = sharedHeaders("AdminListUserAuthEvents");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminRemoveUserFromGroupCommand = async (input, context) => {
    const headers = sharedHeaders("AdminRemoveUserFromGroup");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminResetUserPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("AdminResetUserPassword");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminRespondToAuthChallengeCommand = async (input, context) => {
    const headers = sharedHeaders("AdminRespondToAuthChallenge");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminSetUserMFAPreferenceCommand = async (input, context) => {
    const headers = sharedHeaders("AdminSetUserMFAPreference");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminSetUserPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("AdminSetUserPassword");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminSetUserSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("AdminSetUserSettings");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUpdateAuthEventFeedbackCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUpdateAuthEventFeedback");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUpdateDeviceStatusCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUpdateDeviceStatus");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUpdateUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUpdateUserAttributes");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUserGlobalSignOutCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUserGlobalSignOut");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateSoftwareTokenCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateSoftwareToken");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ChangePasswordCommand = async (input, context) => {
    const headers = sharedHeaders("ChangePassword");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CompleteWebAuthnRegistrationCommand = async (input, context) => {
    const headers = sharedHeaders("CompleteWebAuthnRegistration");
    let body;
    body = JSON.stringify(se_CompleteWebAuthnRegistrationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("ConfirmDevice");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmForgotPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("ConfirmForgotPassword");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmSignUpCommand = async (input, context) => {
    const headers = sharedHeaders("ConfirmSignUp");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGroup");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("CreateIdentityProvider");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("CreateManagedLoginBranding");
    let body;
    body = JSON.stringify(se_CreateManagedLoginBrandingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResourceServer");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserImportJob");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserPool");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserPoolClient");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserPoolDomain");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteGroup");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIdentityProvider");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteManagedLoginBranding");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceServer");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserAttributes");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserPool");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserPoolClient");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserPoolDomain");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteWebAuthnCredentialCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWebAuthnCredential");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeIdentityProvider");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeManagedLoginBranding");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeManagedLoginBrandingByClientCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeManagedLoginBrandingByClient");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourceServer");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRiskConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRiskConfiguration");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserImportJob");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserPool");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserPoolClient");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserPoolDomain");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ForgetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("ForgetDevice");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ForgotPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("ForgotPassword");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCSVHeaderCommand = async (input, context) => {
    const headers = sharedHeaders("GetCSVHeader");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevice");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("GetGroup");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIdentityProviderByIdentifierCommand = async (input, context) => {
    const headers = sharedHeaders("GetIdentityProviderByIdentifier");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLogDeliveryConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetLogDeliveryConfiguration");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSigningCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("GetSigningCertificate");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTokensFromRefreshTokenCommand = async (input, context) => {
    const headers = sharedHeaders("GetTokensFromRefreshToken");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUICustomizationCommand = async (input, context) => {
    const headers = sharedHeaders("GetUICustomization");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserCommand = async (input, context) => {
    const headers = sharedHeaders("GetUser");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserAttributeVerificationCodeCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserAttributeVerificationCode");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserAuthFactorsCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserAuthFactors");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserPoolMfaConfigCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserPoolMfaConfig");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GlobalSignOutCommand = async (input, context) => {
    const headers = sharedHeaders("GlobalSignOut");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_InitiateAuthCommand = async (input, context) => {
    const headers = sharedHeaders("InitiateAuth");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevices");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListGroups");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListIdentityProvidersCommand = async (input, context) => {
    const headers = sharedHeaders("ListIdentityProviders");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceServersCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceServers");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserImportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserImportJobs");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserPoolClientsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserPoolClients");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserPoolsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserPools");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUsersCommand = async (input, context) => {
    const headers = sharedHeaders("ListUsers");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUsersInGroupCommand = async (input, context) => {
    const headers = sharedHeaders("ListUsersInGroup");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListWebAuthnCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWebAuthnCredentials");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResendConfirmationCodeCommand = async (input, context) => {
    const headers = sharedHeaders("ResendConfirmationCode");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RespondToAuthChallengeCommand = async (input, context) => {
    const headers = sharedHeaders("RespondToAuthChallenge");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RevokeTokenCommand = async (input, context) => {
    const headers = sharedHeaders("RevokeToken");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetLogDeliveryConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("SetLogDeliveryConfiguration");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetRiskConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("SetRiskConfiguration");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUICustomizationCommand = async (input, context) => {
    const headers = sharedHeaders("SetUICustomization");
    let body;
    body = JSON.stringify(se_SetUICustomizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUserMFAPreferenceCommand = async (input, context) => {
    const headers = sharedHeaders("SetUserMFAPreference");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUserPoolMfaConfigCommand = async (input, context) => {
    const headers = sharedHeaders("SetUserPoolMfaConfig");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUserSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("SetUserSettings");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SignUpCommand = async (input, context) => {
    const headers = sharedHeaders("SignUp");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartUserImportJob");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartWebAuthnRegistrationCommand = async (input, context) => {
    const headers = sharedHeaders("StartWebAuthnRegistration");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopUserImportJob");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAuthEventFeedbackCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAuthEventFeedback");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDeviceStatusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDeviceStatus");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGroup");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateIdentityProvider");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateManagedLoginBranding");
    let body;
    body = JSON.stringify(se_UpdateManagedLoginBrandingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateResourceServer");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserAttributes");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserPool");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserPoolClient");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserPoolDomain");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_VerifySoftwareTokenCommand = async (input, context) => {
    const headers = sharedHeaders("VerifySoftwareToken");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_VerifyUserAttributeCommand = async (input, context) => {
    const headers = sharedHeaders("VerifyUserAttribute");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AddCustomAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminAddUserToGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminConfirmSignUpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminCreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_AdminCreateUserResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminDeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminDeleteUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminDisableProviderForUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminDisableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminEnableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminForgetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminGetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_AdminGetDeviceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminGetUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_AdminGetUserResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminInitiateAuthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminLinkProviderForUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_AdminListDevicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminListGroupsForUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_AdminListGroupsForUserResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminListUserAuthEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_AdminListUserAuthEventsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminRemoveUserFromGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminResetUserPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminRespondToAuthChallengeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminSetUserMFAPreferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminSetUserPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminSetUserSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUpdateAuthEventFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUpdateDeviceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUpdateUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUserGlobalSignOutCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateSoftwareTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ChangePasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CompleteWebAuthnRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmForgotPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmSignUpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateIdentityProviderResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateManagedLoginBrandingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateUserImportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateUserPoolResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateUserPoolClientResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteWebAuthnCredentialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeIdentityProviderResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeManagedLoginBrandingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeManagedLoginBrandingByClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeManagedLoginBrandingByClientResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRiskConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeRiskConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeUserImportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeUserPoolResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeUserPoolClientResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ForgetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,smithy_client_dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ForgotPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCSVHeaderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetDeviceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIdentityProviderByIdentifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetIdentityProviderByIdentifierResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLogDeliveryConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSigningCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTokensFromRefreshTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUICustomizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetUICustomizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserAttributeVerificationCodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserAuthFactorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserPoolMfaConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GlobalSignOutCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_InitiateAuthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListDevicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListIdentityProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListIdentityProvidersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceServersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserImportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListUserImportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserPoolClientsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListUserPoolsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListUsersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUsersInGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListUsersInGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListWebAuthnCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListWebAuthnCredentialsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResendConfirmationCodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RespondToAuthChallengeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetLogDeliveryConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetRiskConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_SetRiskConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUICustomizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_SetUICustomizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUserMFAPreferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUserPoolMfaConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUserSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SignUpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_StartUserImportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartWebAuthnRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_StartWebAuthnRegistrationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_StopUserImportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAuthEventFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDeviceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateIdentityProviderResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateManagedLoginBrandingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateUserPoolClientResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_VerifySoftwareTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_VerifyUserAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,smithy_client_dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await (0,parseJsonBody.parseJsonErrorBody)(output.body, context),
    };
    const errorCode = (0,parseJsonBody.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentityprovider#InternalErrorException":
            throw await de_InternalErrorExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentityprovider#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentityprovider#NotAuthorizedException":
            throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentityprovider#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UserImportInProgressException":
        case "com.amazonaws.cognitoidentityprovider#UserImportInProgressException":
            throw await de_UserImportInProgressExceptionRes(parsedOutput, context);
        case "UserNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#UserNotFoundException":
            throw await de_UserNotFoundExceptionRes(parsedOutput, context);
        case "InvalidLambdaResponseException":
        case "com.amazonaws.cognitoidentityprovider#InvalidLambdaResponseException":
            throw await de_InvalidLambdaResponseExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentityprovider#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TooManyFailedAttemptsException":
        case "com.amazonaws.cognitoidentityprovider#TooManyFailedAttemptsException":
            throw await de_TooManyFailedAttemptsExceptionRes(parsedOutput, context);
        case "UnexpectedLambdaException":
        case "com.amazonaws.cognitoidentityprovider#UnexpectedLambdaException":
            throw await de_UnexpectedLambdaExceptionRes(parsedOutput, context);
        case "UserLambdaValidationException":
        case "com.amazonaws.cognitoidentityprovider#UserLambdaValidationException":
            throw await de_UserLambdaValidationExceptionRes(parsedOutput, context);
        case "CodeDeliveryFailureException":
        case "com.amazonaws.cognitoidentityprovider#CodeDeliveryFailureException":
            throw await de_CodeDeliveryFailureExceptionRes(parsedOutput, context);
        case "InvalidPasswordException":
        case "com.amazonaws.cognitoidentityprovider#InvalidPasswordException":
            throw await de_InvalidPasswordExceptionRes(parsedOutput, context);
        case "InvalidSmsRoleAccessPolicyException":
        case "com.amazonaws.cognitoidentityprovider#InvalidSmsRoleAccessPolicyException":
            throw await de_InvalidSmsRoleAccessPolicyExceptionRes(parsedOutput, context);
        case "InvalidSmsRoleTrustRelationshipException":
        case "com.amazonaws.cognitoidentityprovider#InvalidSmsRoleTrustRelationshipException":
            throw await de_InvalidSmsRoleTrustRelationshipExceptionRes(parsedOutput, context);
        case "PreconditionNotMetException":
        case "com.amazonaws.cognitoidentityprovider#PreconditionNotMetException":
            throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
        case "UnsupportedUserStateException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedUserStateException":
            throw await de_UnsupportedUserStateExceptionRes(parsedOutput, context);
        case "UsernameExistsException":
        case "com.amazonaws.cognitoidentityprovider#UsernameExistsException":
            throw await de_UsernameExistsExceptionRes(parsedOutput, context);
        case "AliasExistsException":
        case "com.amazonaws.cognitoidentityprovider#AliasExistsException":
            throw await de_AliasExistsExceptionRes(parsedOutput, context);
        case "InvalidUserPoolConfigurationException":
        case "com.amazonaws.cognitoidentityprovider#InvalidUserPoolConfigurationException":
            throw await de_InvalidUserPoolConfigurationExceptionRes(parsedOutput, context);
        case "InvalidEmailRoleAccessPolicyException":
        case "com.amazonaws.cognitoidentityprovider#InvalidEmailRoleAccessPolicyException":
            throw await de_InvalidEmailRoleAccessPolicyExceptionRes(parsedOutput, context);
        case "MFAMethodNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#MFAMethodNotFoundException":
            throw await de_MFAMethodNotFoundExceptionRes(parsedOutput, context);
        case "PasswordResetRequiredException":
        case "com.amazonaws.cognitoidentityprovider#PasswordResetRequiredException":
            throw await de_PasswordResetRequiredExceptionRes(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput, context);
        case "UserNotConfirmedException":
        case "com.amazonaws.cognitoidentityprovider#UserNotConfirmedException":
            throw await de_UserNotConfirmedExceptionRes(parsedOutput, context);
        case "UserPoolAddOnNotEnabledException":
        case "com.amazonaws.cognitoidentityprovider#UserPoolAddOnNotEnabledException":
            throw await de_UserPoolAddOnNotEnabledExceptionRes(parsedOutput, context);
        case "CodeMismatchException":
        case "com.amazonaws.cognitoidentityprovider#CodeMismatchException":
            throw await de_CodeMismatchExceptionRes(parsedOutput, context);
        case "ExpiredCodeException":
        case "com.amazonaws.cognitoidentityprovider#ExpiredCodeException":
            throw await de_ExpiredCodeExceptionRes(parsedOutput, context);
        case "PasswordHistoryPolicyViolationException":
        case "com.amazonaws.cognitoidentityprovider#PasswordHistoryPolicyViolationException":
            throw await de_PasswordHistoryPolicyViolationExceptionRes(parsedOutput, context);
        case "SoftwareTokenMFANotFoundException":
        case "com.amazonaws.cognitoidentityprovider#SoftwareTokenMFANotFoundException":
            throw await de_SoftwareTokenMFANotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitoidentityprovider#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.cognitoidentityprovider#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "WebAuthnChallengeNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnChallengeNotFoundException":
            throw await de_WebAuthnChallengeNotFoundExceptionRes(parsedOutput, context);
        case "WebAuthnClientMismatchException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnClientMismatchException":
            throw await de_WebAuthnClientMismatchExceptionRes(parsedOutput, context);
        case "WebAuthnCredentialNotSupportedException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnCredentialNotSupportedException":
            throw await de_WebAuthnCredentialNotSupportedExceptionRes(parsedOutput, context);
        case "WebAuthnNotEnabledException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnNotEnabledException":
            throw await de_WebAuthnNotEnabledExceptionRes(parsedOutput, context);
        case "WebAuthnOriginNotAllowedException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnOriginNotAllowedException":
            throw await de_WebAuthnOriginNotAllowedExceptionRes(parsedOutput, context);
        case "WebAuthnRelyingPartyMismatchException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnRelyingPartyMismatchException":
            throw await de_WebAuthnRelyingPartyMismatchExceptionRes(parsedOutput, context);
        case "DeviceKeyExistsException":
        case "com.amazonaws.cognitoidentityprovider#DeviceKeyExistsException":
            throw await de_DeviceKeyExistsExceptionRes(parsedOutput, context);
        case "GroupExistsException":
        case "com.amazonaws.cognitoidentityprovider#GroupExistsException":
            throw await de_GroupExistsExceptionRes(parsedOutput, context);
        case "DuplicateProviderException":
        case "com.amazonaws.cognitoidentityprovider#DuplicateProviderException":
            throw await de_DuplicateProviderExceptionRes(parsedOutput, context);
        case "ManagedLoginBrandingExistsException":
        case "com.amazonaws.cognitoidentityprovider#ManagedLoginBrandingExistsException":
            throw await de_ManagedLoginBrandingExistsExceptionRes(parsedOutput, context);
        case "FeatureUnavailableInTierException":
        case "com.amazonaws.cognitoidentityprovider#FeatureUnavailableInTierException":
            throw await de_FeatureUnavailableInTierExceptionRes(parsedOutput, context);
        case "TierChangeNotAllowedException":
        case "com.amazonaws.cognitoidentityprovider#TierChangeNotAllowedException":
            throw await de_TierChangeNotAllowedExceptionRes(parsedOutput, context);
        case "UserPoolTaggingException":
        case "com.amazonaws.cognitoidentityprovider#UserPoolTaggingException":
            throw await de_UserPoolTaggingExceptionRes(parsedOutput, context);
        case "InvalidOAuthFlowException":
        case "com.amazonaws.cognitoidentityprovider#InvalidOAuthFlowException":
            throw await de_InvalidOAuthFlowExceptionRes(parsedOutput, context);
        case "ScopeDoesNotExistException":
        case "com.amazonaws.cognitoidentityprovider#ScopeDoesNotExistException":
            throw await de_ScopeDoesNotExistExceptionRes(parsedOutput, context);
        case "UnsupportedIdentityProviderException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedIdentityProviderException":
            throw await de_UnsupportedIdentityProviderExceptionRes(parsedOutput, context);
        case "RefreshTokenReuseException":
        case "com.amazonaws.cognitoidentityprovider#RefreshTokenReuseException":
            throw await de_RefreshTokenReuseExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.cognitoidentityprovider#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "UnsupportedTokenTypeException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedTokenTypeException":
            throw await de_UnsupportedTokenTypeExceptionRes(parsedOutput, context);
        case "WebAuthnConfigurationMissingException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnConfigurationMissingException":
            throw await de_WebAuthnConfigurationMissingExceptionRes(parsedOutput, context);
        case "EnableSoftwareTokenMFAException":
        case "com.amazonaws.cognitoidentityprovider#EnableSoftwareTokenMFAException":
            throw await de_EnableSoftwareTokenMFAExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AliasExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new AliasExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_CodeDeliveryFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new CodeDeliveryFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_CodeMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new CodeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_DeviceKeyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new DeviceKeyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_DuplicateProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new DuplicateProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_EnableSoftwareTokenMFAExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new EnableSoftwareTokenMFAException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_ExpiredCodeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new ExpiredCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_FeatureUnavailableInTierExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new FeatureUnavailableInTierException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_GroupExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new GroupExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidEmailRoleAccessPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidEmailRoleAccessPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidLambdaResponseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidLambdaResponseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidOAuthFlowExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidOAuthFlowException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidPasswordExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidPasswordException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidSmsRoleAccessPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidSmsRoleAccessPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidSmsRoleTrustRelationshipExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidSmsRoleTrustRelationshipException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_InvalidUserPoolConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new InvalidUserPoolConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_ManagedLoginBrandingExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new ManagedLoginBrandingExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_MFAMethodNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new MFAMethodNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_PasswordHistoryPolicyViolationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new PasswordHistoryPolicyViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_PasswordResetRequiredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new PasswordResetRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_PreconditionNotMetExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new PreconditionNotMetException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_RefreshTokenReuseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new RefreshTokenReuseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_ScopeDoesNotExistExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new ScopeDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_SoftwareTokenMFANotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new SoftwareTokenMFANotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_TierChangeNotAllowedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new TierChangeNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_TooManyFailedAttemptsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new TooManyFailedAttemptsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UnexpectedLambdaExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UnexpectedLambdaException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UnsupportedIdentityProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UnsupportedIdentityProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UnsupportedTokenTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UnsupportedTokenTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UnsupportedUserStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UnsupportedUserStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UserImportInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UserImportInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UserLambdaValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UserLambdaValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UsernameExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UsernameExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UserNotConfirmedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UserNotConfirmedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UserNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UserNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UserPoolAddOnNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UserPoolAddOnNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_UserPoolTaggingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new UserPoolTaggingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_WebAuthnChallengeNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new WebAuthnChallengeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_WebAuthnClientMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new WebAuthnClientMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_WebAuthnConfigurationMissingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new WebAuthnConfigurationMissingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_WebAuthnCredentialNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new WebAuthnCredentialNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_WebAuthnNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new WebAuthnNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_WebAuthnOriginNotAllowedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new WebAuthnOriginNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const de_WebAuthnRelyingPartyMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,smithy_client_dist_es._json)(body);
    const exception = new WebAuthnRelyingPartyMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,smithy_client_dist_es.decorateServiceException)(exception, body);
};
const se_AssetListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AssetType(entry, context);
    });
};
const se_AssetType = (input, context) => {
    return (0,smithy_client_dist_es.take)(input, {
        Bytes: context.base64Encoder,
        Category: [],
        ColorMode: [],
        Extension: [],
        ResourceId: [],
    });
};
const se_CompleteWebAuthnRegistrationRequest = (input, context) => {
    return (0,smithy_client_dist_es.take)(input, {
        AccessToken: [],
        Credential: (_) => se_Document(_, context),
    });
};
const se_CreateManagedLoginBrandingRequest = (input, context) => {
    return (0,smithy_client_dist_es.take)(input, {
        Assets: (_) => se_AssetListType(_, context),
        ClientId: [],
        Settings: (_) => se_Document(_, context),
        UseCognitoProvidedValues: [],
        UserPoolId: [],
    });
};
const se_Document = (input, context) => {
    return input;
};
const se_SetUICustomizationRequest = (input, context) => {
    return (0,smithy_client_dist_es.take)(input, {
        CSS: [],
        ClientId: [],
        ImageFile: context.base64Encoder,
        UserPoolId: [],
    });
};
const se_UpdateManagedLoginBrandingRequest = (input, context) => {
    return (0,smithy_client_dist_es.take)(input, {
        Assets: (_) => se_AssetListType(_, context),
        ManagedLoginBrandingId: [],
        Settings: (_) => se_Document(_, context),
        UseCognitoProvidedValues: [],
        UserPoolId: [],
    });
};
const de_AdminCreateUserResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        User: (_) => de_UserType(_, context),
    });
};
const de_AdminGetDeviceResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Device: (_) => de_DeviceType(_, context),
    });
};
const de_AdminGetUserResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Enabled: smithy_client_dist_es.expectBoolean,
        MFAOptions: smithy_client_dist_es._json,
        PreferredMfaSetting: smithy_client_dist_es.expectString,
        UserAttributes: smithy_client_dist_es._json,
        UserCreateDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        UserLastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        UserMFASettingList: smithy_client_dist_es._json,
        UserStatus: smithy_client_dist_es.expectString,
        Username: smithy_client_dist_es.expectString,
    });
};
const de_AdminListDevicesResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Devices: (_) => de_DeviceListType(_, context),
        PaginationToken: smithy_client_dist_es.expectString,
    });
};
const de_AdminListGroupsForUserResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Groups: (_) => de_GroupListType(_, context),
        NextToken: smithy_client_dist_es.expectString,
    });
};
const de_AdminListUserAuthEventsResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        AuthEvents: (_) => de_AuthEventsType(_, context),
        NextToken: smithy_client_dist_es.expectString,
    });
};
const de_AssetListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssetType(entry, context);
    });
    return retVal;
};
const de_AssetType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Bytes: context.base64Decoder,
        Category: smithy_client_dist_es.expectString,
        ColorMode: smithy_client_dist_es.expectString,
        Extension: smithy_client_dist_es.expectString,
        ResourceId: smithy_client_dist_es.expectString,
    });
};
const de_AuthEventsType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthEventType(entry, context);
    });
    return retVal;
};
const de_AuthEventType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        ChallengeResponses: smithy_client_dist_es._json,
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        EventContextData: smithy_client_dist_es._json,
        EventFeedback: (_) => de_EventFeedbackType(_, context),
        EventId: smithy_client_dist_es.expectString,
        EventResponse: smithy_client_dist_es.expectString,
        EventRisk: smithy_client_dist_es._json,
        EventType: smithy_client_dist_es.expectString,
    });
};
const de_CreateGroupResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Group: (_) => de_GroupType(_, context),
    });
};
const de_CreateIdentityProviderResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_, context),
    });
};
const de_CreateManagedLoginBrandingResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_CreateUserImportJobResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserImportJob: (_) => de_UserImportJobType(_, context),
    });
};
const de_CreateUserPoolClientResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserPoolClient: (_) => de_UserPoolClientType(_, context),
    });
};
const de_CreateUserPoolResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserPool: (_) => de_UserPoolType(_, context),
    });
};
const de_DescribeIdentityProviderResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_, context),
    });
};
const de_DescribeManagedLoginBrandingByClientResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_DescribeManagedLoginBrandingResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_DescribeRiskConfigurationResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        RiskConfiguration: (_) => de_RiskConfigurationType(_, context),
    });
};
const de_DescribeUserImportJobResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserImportJob: (_) => de_UserImportJobType(_, context),
    });
};
const de_DescribeUserPoolClientResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserPoolClient: (_) => de_UserPoolClientType(_, context),
    });
};
const de_DescribeUserPoolResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserPool: (_) => de_UserPoolType(_, context),
    });
};
const de_DeviceListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceType(entry, context);
    });
    return retVal;
};
const de_DeviceType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        DeviceAttributes: smithy_client_dist_es._json,
        DeviceCreateDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        DeviceKey: smithy_client_dist_es.expectString,
        DeviceLastAuthenticatedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        DeviceLastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
    });
};
const de_Document = (output, context) => {
    return output;
};
const de_EventFeedbackType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        FeedbackDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        FeedbackValue: smithy_client_dist_es.expectString,
        Provider: smithy_client_dist_es.expectString,
    });
};
const de_GetDeviceResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Device: (_) => de_DeviceType(_, context),
    });
};
const de_GetGroupResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Group: (_) => de_GroupType(_, context),
    });
};
const de_GetIdentityProviderByIdentifierResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_, context),
    });
};
const de_GetUICustomizationResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UICustomization: (_) => de_UICustomizationType(_, context),
    });
};
const de_GroupListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupType(entry, context);
    });
    return retVal;
};
const de_GroupType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        Description: smithy_client_dist_es.expectString,
        GroupName: smithy_client_dist_es.expectString,
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        Precedence: smithy_client_dist_es.expectInt32,
        RoleArn: smithy_client_dist_es.expectString,
        UserPoolId: smithy_client_dist_es.expectString,
    });
};
const de_IdentityProviderType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        AttributeMapping: smithy_client_dist_es._json,
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        IdpIdentifiers: smithy_client_dist_es._json,
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        ProviderDetails: smithy_client_dist_es._json,
        ProviderName: smithy_client_dist_es.expectString,
        ProviderType: smithy_client_dist_es.expectString,
        UserPoolId: smithy_client_dist_es.expectString,
    });
};
const de_ListDevicesResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Devices: (_) => de_DeviceListType(_, context),
        PaginationToken: smithy_client_dist_es.expectString,
    });
};
const de_ListGroupsResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Groups: (_) => de_GroupListType(_, context),
        NextToken: smithy_client_dist_es.expectString,
    });
};
const de_ListIdentityProvidersResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        NextToken: smithy_client_dist_es.expectString,
        Providers: (_) => de_ProvidersListType(_, context),
    });
};
const de_ListUserImportJobsResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        PaginationToken: smithy_client_dist_es.expectString,
        UserImportJobs: (_) => de_UserImportJobsListType(_, context),
    });
};
const de_ListUserPoolsResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        NextToken: smithy_client_dist_es.expectString,
        UserPools: (_) => de_UserPoolListType(_, context),
    });
};
const de_ListUsersInGroupResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        NextToken: smithy_client_dist_es.expectString,
        Users: (_) => de_UsersListType(_, context),
    });
};
const de_ListUsersResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        PaginationToken: smithy_client_dist_es.expectString,
        Users: (_) => de_UsersListType(_, context),
    });
};
const de_ListWebAuthnCredentialsResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Credentials: (_) => de_WebAuthnCredentialDescriptionListType(_, context),
        NextToken: smithy_client_dist_es.expectString,
    });
};
const de_ManagedLoginBrandingType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Assets: (_) => de_AssetListType(_, context),
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        ManagedLoginBrandingId: smithy_client_dist_es.expectString,
        Settings: (_) => de_Document(_, context),
        UseCognitoProvidedValues: smithy_client_dist_es.expectBoolean,
        UserPoolId: smithy_client_dist_es.expectString,
    });
};
const de_ProviderDescription = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        ProviderName: smithy_client_dist_es.expectString,
        ProviderType: smithy_client_dist_es.expectString,
    });
};
const de_ProvidersListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProviderDescription(entry, context);
    });
    return retVal;
};
const de_RiskConfigurationType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        AccountTakeoverRiskConfiguration: smithy_client_dist_es._json,
        ClientId: smithy_client_dist_es.expectString,
        CompromisedCredentialsRiskConfiguration: smithy_client_dist_es._json,
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        RiskExceptionConfiguration: smithy_client_dist_es._json,
        UserPoolId: smithy_client_dist_es.expectString,
    });
};
const de_SetRiskConfigurationResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        RiskConfiguration: (_) => de_RiskConfigurationType(_, context),
    });
};
const de_SetUICustomizationResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UICustomization: (_) => de_UICustomizationType(_, context),
    });
};
const de_StartUserImportJobResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserImportJob: (_) => de_UserImportJobType(_, context),
    });
};
const de_StartWebAuthnRegistrationResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        CredentialCreationOptions: (_) => de_Document(_, context),
    });
};
const de_StopUserImportJobResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserImportJob: (_) => de_UserImportJobType(_, context),
    });
};
const de_UICustomizationType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        CSS: smithy_client_dist_es.expectString,
        CSSVersion: smithy_client_dist_es.expectString,
        ClientId: smithy_client_dist_es.expectString,
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        ImageUrl: smithy_client_dist_es.expectString,
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        UserPoolId: smithy_client_dist_es.expectString,
    });
};
const de_UpdateGroupResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Group: (_) => de_GroupType(_, context),
    });
};
const de_UpdateIdentityProviderResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_, context),
    });
};
const de_UpdateManagedLoginBrandingResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_UpdateUserPoolClientResponse = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        UserPoolClient: (_) => de_UserPoolClientType(_, context),
    });
};
const de_UserImportJobsListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserImportJobType(entry, context);
    });
    return retVal;
};
const de_UserImportJobType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        CloudWatchLogsRoleArn: smithy_client_dist_es.expectString,
        CompletionDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        CompletionMessage: smithy_client_dist_es.expectString,
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        FailedUsers: smithy_client_dist_es.expectLong,
        ImportedUsers: smithy_client_dist_es.expectLong,
        JobId: smithy_client_dist_es.expectString,
        JobName: smithy_client_dist_es.expectString,
        PreSignedUrl: smithy_client_dist_es.expectString,
        SkippedUsers: smithy_client_dist_es.expectLong,
        StartDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        Status: smithy_client_dist_es.expectString,
        UserPoolId: smithy_client_dist_es.expectString,
    });
};
const de_UserPoolClientType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        AccessTokenValidity: smithy_client_dist_es.expectInt32,
        AllowedOAuthFlows: smithy_client_dist_es._json,
        AllowedOAuthFlowsUserPoolClient: smithy_client_dist_es.expectBoolean,
        AllowedOAuthScopes: smithy_client_dist_es._json,
        AnalyticsConfiguration: smithy_client_dist_es._json,
        AuthSessionValidity: smithy_client_dist_es.expectInt32,
        CallbackURLs: smithy_client_dist_es._json,
        ClientId: smithy_client_dist_es.expectString,
        ClientName: smithy_client_dist_es.expectString,
        ClientSecret: smithy_client_dist_es.expectString,
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        DefaultRedirectURI: smithy_client_dist_es.expectString,
        EnablePropagateAdditionalUserContextData: smithy_client_dist_es.expectBoolean,
        EnableTokenRevocation: smithy_client_dist_es.expectBoolean,
        ExplicitAuthFlows: smithy_client_dist_es._json,
        IdTokenValidity: smithy_client_dist_es.expectInt32,
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        LogoutURLs: smithy_client_dist_es._json,
        PreventUserExistenceErrors: smithy_client_dist_es.expectString,
        ReadAttributes: smithy_client_dist_es._json,
        RefreshTokenRotation: smithy_client_dist_es._json,
        RefreshTokenValidity: smithy_client_dist_es.expectInt32,
        SupportedIdentityProviders: smithy_client_dist_es._json,
        TokenValidityUnits: smithy_client_dist_es._json,
        UserPoolId: smithy_client_dist_es.expectString,
        WriteAttributes: smithy_client_dist_es._json,
    });
};
const de_UserPoolDescriptionType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        Id: smithy_client_dist_es.expectString,
        LambdaConfig: smithy_client_dist_es._json,
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        Name: smithy_client_dist_es.expectString,
        Status: smithy_client_dist_es.expectString,
    });
};
const de_UserPoolListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserPoolDescriptionType(entry, context);
    });
    return retVal;
};
const de_UserPoolType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        AccountRecoverySetting: smithy_client_dist_es._json,
        AdminCreateUserConfig: smithy_client_dist_es._json,
        AliasAttributes: smithy_client_dist_es._json,
        Arn: smithy_client_dist_es.expectString,
        AutoVerifiedAttributes: smithy_client_dist_es._json,
        CreationDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        CustomDomain: smithy_client_dist_es.expectString,
        DeletionProtection: smithy_client_dist_es.expectString,
        DeviceConfiguration: smithy_client_dist_es._json,
        Domain: smithy_client_dist_es.expectString,
        EmailConfiguration: smithy_client_dist_es._json,
        EmailConfigurationFailure: smithy_client_dist_es.expectString,
        EmailVerificationMessage: smithy_client_dist_es.expectString,
        EmailVerificationSubject: smithy_client_dist_es.expectString,
        EstimatedNumberOfUsers: smithy_client_dist_es.expectInt32,
        Id: smithy_client_dist_es.expectString,
        LambdaConfig: smithy_client_dist_es._json,
        LastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        MfaConfiguration: smithy_client_dist_es.expectString,
        Name: smithy_client_dist_es.expectString,
        Policies: smithy_client_dist_es._json,
        SchemaAttributes: smithy_client_dist_es._json,
        SmsAuthenticationMessage: smithy_client_dist_es.expectString,
        SmsConfiguration: smithy_client_dist_es._json,
        SmsConfigurationFailure: smithy_client_dist_es.expectString,
        SmsVerificationMessage: smithy_client_dist_es.expectString,
        Status: smithy_client_dist_es.expectString,
        UserAttributeUpdateSettings: smithy_client_dist_es._json,
        UserPoolAddOns: smithy_client_dist_es._json,
        UserPoolTags: smithy_client_dist_es._json,
        UserPoolTier: smithy_client_dist_es.expectString,
        UsernameAttributes: smithy_client_dist_es._json,
        UsernameConfiguration: smithy_client_dist_es._json,
        VerificationMessageTemplate: smithy_client_dist_es._json,
    });
};
const de_UsersListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserType(entry, context);
    });
    return retVal;
};
const de_UserType = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        Attributes: smithy_client_dist_es._json,
        Enabled: smithy_client_dist_es.expectBoolean,
        MFAOptions: smithy_client_dist_es._json,
        UserCreateDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        UserLastModifiedDate: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        UserStatus: smithy_client_dist_es.expectString,
        Username: smithy_client_dist_es.expectString,
    });
};
const de_WebAuthnCredentialDescription = (output, context) => {
    return (0,smithy_client_dist_es.take)(output, {
        AuthenticatorAttachment: smithy_client_dist_es.expectString,
        AuthenticatorTransports: smithy_client_dist_es._json,
        CreatedAt: (_) => (0,smithy_client_dist_es.expectNonNull)((0,smithy_client_dist_es.parseEpochTimestamp)((0,smithy_client_dist_es.expectNumber)(_))),
        CredentialId: smithy_client_dist_es.expectString,
        FriendlyCredentialName: smithy_client_dist_es.expectString,
        RelyingPartyId: smithy_client_dist_es.expectString,
    });
};
const de_WebAuthnCredentialDescriptionListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WebAuthnCredentialDescription(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0,smithy_client_dist_es.withBaseException)(CognitoIdentityProviderServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_dist_es.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSCognitoIdentityProviderService.${operation}`,
    };
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AddCustomAttributesCommand.js






class AddCustomAttributesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AddCustomAttributes", {})
    .n("CognitoIdentityProviderClient", "AddCustomAttributesCommand")
    .f(void 0, void 0)
    .ser(se_AddCustomAttributesCommand)
    .de(de_AddCustomAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminAddUserToGroupCommand.js







class AdminAddUserToGroupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminAddUserToGroup", {})
    .n("CognitoIdentityProviderClient", "AdminAddUserToGroupCommand")
    .f(AdminAddUserToGroupRequestFilterSensitiveLog, void 0)
    .ser(se_AdminAddUserToGroupCommand)
    .de(de_AdminAddUserToGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminConfirmSignUpCommand.js







class AdminConfirmSignUpCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminConfirmSignUp", {})
    .n("CognitoIdentityProviderClient", "AdminConfirmSignUpCommand")
    .f(AdminConfirmSignUpRequestFilterSensitiveLog, void 0)
    .ser(se_AdminConfirmSignUpCommand)
    .de(de_AdminConfirmSignUpCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminCreateUserCommand.js







class AdminCreateUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminCreateUser", {})
    .n("CognitoIdentityProviderClient", "AdminCreateUserCommand")
    .f(AdminCreateUserRequestFilterSensitiveLog, AdminCreateUserResponseFilterSensitiveLog)
    .ser(se_AdminCreateUserCommand)
    .de(de_AdminCreateUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminDeleteUserAttributesCommand.js







class AdminDeleteUserAttributesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDeleteUserAttributes", {})
    .n("CognitoIdentityProviderClient", "AdminDeleteUserAttributesCommand")
    .f(AdminDeleteUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_AdminDeleteUserAttributesCommand)
    .de(de_AdminDeleteUserAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminDeleteUserCommand.js







class AdminDeleteUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDeleteUser", {})
    .n("CognitoIdentityProviderClient", "AdminDeleteUserCommand")
    .f(AdminDeleteUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminDeleteUserCommand)
    .de(de_AdminDeleteUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminDisableProviderForUserCommand.js






class AdminDisableProviderForUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDisableProviderForUser", {})
    .n("CognitoIdentityProviderClient", "AdminDisableProviderForUserCommand")
    .f(void 0, void 0)
    .ser(se_AdminDisableProviderForUserCommand)
    .de(de_AdminDisableProviderForUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminDisableUserCommand.js







class AdminDisableUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDisableUser", {})
    .n("CognitoIdentityProviderClient", "AdminDisableUserCommand")
    .f(AdminDisableUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminDisableUserCommand)
    .de(de_AdminDisableUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminEnableUserCommand.js







class AdminEnableUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminEnableUser", {})
    .n("CognitoIdentityProviderClient", "AdminEnableUserCommand")
    .f(AdminEnableUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminEnableUserCommand)
    .de(de_AdminEnableUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminForgetDeviceCommand.js







class AdminForgetDeviceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminForgetDevice", {})
    .n("CognitoIdentityProviderClient", "AdminForgetDeviceCommand")
    .f(AdminForgetDeviceRequestFilterSensitiveLog, void 0)
    .ser(se_AdminForgetDeviceCommand)
    .de(de_AdminForgetDeviceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminGetDeviceCommand.js







class AdminGetDeviceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminGetDevice", {})
    .n("CognitoIdentityProviderClient", "AdminGetDeviceCommand")
    .f(AdminGetDeviceRequestFilterSensitiveLog, AdminGetDeviceResponseFilterSensitiveLog)
    .ser(se_AdminGetDeviceCommand)
    .de(de_AdminGetDeviceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminGetUserCommand.js







class AdminGetUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminGetUser", {})
    .n("CognitoIdentityProviderClient", "AdminGetUserCommand")
    .f(AdminGetUserRequestFilterSensitiveLog, AdminGetUserResponseFilterSensitiveLog)
    .ser(se_AdminGetUserCommand)
    .de(de_AdminGetUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminInitiateAuthCommand.js







class AdminInitiateAuthCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminInitiateAuth", {})
    .n("CognitoIdentityProviderClient", "AdminInitiateAuthCommand")
    .f(AdminInitiateAuthRequestFilterSensitiveLog, AdminInitiateAuthResponseFilterSensitiveLog)
    .ser(se_AdminInitiateAuthCommand)
    .de(de_AdminInitiateAuthCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminLinkProviderForUserCommand.js






class AdminLinkProviderForUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminLinkProviderForUser", {})
    .n("CognitoIdentityProviderClient", "AdminLinkProviderForUserCommand")
    .f(void 0, void 0)
    .ser(se_AdminLinkProviderForUserCommand)
    .de(de_AdminLinkProviderForUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminListDevicesCommand.js







class AdminListDevicesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminListDevices", {})
    .n("CognitoIdentityProviderClient", "AdminListDevicesCommand")
    .f(AdminListDevicesRequestFilterSensitiveLog, AdminListDevicesResponseFilterSensitiveLog)
    .ser(se_AdminListDevicesCommand)
    .de(de_AdminListDevicesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminListGroupsForUserCommand.js







class AdminListGroupsForUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminListGroupsForUser", {})
    .n("CognitoIdentityProviderClient", "AdminListGroupsForUserCommand")
    .f(AdminListGroupsForUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminListGroupsForUserCommand)
    .de(de_AdminListGroupsForUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminListUserAuthEventsCommand.js







class AdminListUserAuthEventsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminListUserAuthEvents", {})
    .n("CognitoIdentityProviderClient", "AdminListUserAuthEventsCommand")
    .f(AdminListUserAuthEventsRequestFilterSensitiveLog, void 0)
    .ser(se_AdminListUserAuthEventsCommand)
    .de(de_AdminListUserAuthEventsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminRemoveUserFromGroupCommand.js







class AdminRemoveUserFromGroupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminRemoveUserFromGroup", {})
    .n("CognitoIdentityProviderClient", "AdminRemoveUserFromGroupCommand")
    .f(AdminRemoveUserFromGroupRequestFilterSensitiveLog, void 0)
    .ser(se_AdminRemoveUserFromGroupCommand)
    .de(de_AdminRemoveUserFromGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminResetUserPasswordCommand.js







class AdminResetUserPasswordCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminResetUserPassword", {})
    .n("CognitoIdentityProviderClient", "AdminResetUserPasswordCommand")
    .f(AdminResetUserPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_AdminResetUserPasswordCommand)
    .de(de_AdminResetUserPasswordCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminRespondToAuthChallengeCommand.js







class AdminRespondToAuthChallengeCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminRespondToAuthChallenge", {})
    .n("CognitoIdentityProviderClient", "AdminRespondToAuthChallengeCommand")
    .f(AdminRespondToAuthChallengeRequestFilterSensitiveLog, AdminRespondToAuthChallengeResponseFilterSensitiveLog)
    .ser(se_AdminRespondToAuthChallengeCommand)
    .de(de_AdminRespondToAuthChallengeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminSetUserMFAPreferenceCommand.js







class AdminSetUserMFAPreferenceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminSetUserMFAPreference", {})
    .n("CognitoIdentityProviderClient", "AdminSetUserMFAPreferenceCommand")
    .f(AdminSetUserMFAPreferenceRequestFilterSensitiveLog, void 0)
    .ser(se_AdminSetUserMFAPreferenceCommand)
    .de(de_AdminSetUserMFAPreferenceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminSetUserPasswordCommand.js







class AdminSetUserPasswordCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminSetUserPassword", {})
    .n("CognitoIdentityProviderClient", "AdminSetUserPasswordCommand")
    .f(AdminSetUserPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_AdminSetUserPasswordCommand)
    .de(de_AdminSetUserPasswordCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminSetUserSettingsCommand.js







class AdminSetUserSettingsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminSetUserSettings", {})
    .n("CognitoIdentityProviderClient", "AdminSetUserSettingsCommand")
    .f(AdminSetUserSettingsRequestFilterSensitiveLog, void 0)
    .ser(se_AdminSetUserSettingsCommand)
    .de(de_AdminSetUserSettingsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminUpdateAuthEventFeedbackCommand.js







class AdminUpdateAuthEventFeedbackCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUpdateAuthEventFeedback", {})
    .n("CognitoIdentityProviderClient", "AdminUpdateAuthEventFeedbackCommand")
    .f(AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUpdateAuthEventFeedbackCommand)
    .de(de_AdminUpdateAuthEventFeedbackCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminUpdateDeviceStatusCommand.js







class AdminUpdateDeviceStatusCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUpdateDeviceStatus", {})
    .n("CognitoIdentityProviderClient", "AdminUpdateDeviceStatusCommand")
    .f(AdminUpdateDeviceStatusRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUpdateDeviceStatusCommand)
    .de(de_AdminUpdateDeviceStatusCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminUpdateUserAttributesCommand.js







class AdminUpdateUserAttributesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUpdateUserAttributes", {})
    .n("CognitoIdentityProviderClient", "AdminUpdateUserAttributesCommand")
    .f(AdminUpdateUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUpdateUserAttributesCommand)
    .de(de_AdminUpdateUserAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminUserGlobalSignOutCommand.js







class AdminUserGlobalSignOutCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUserGlobalSignOut", {})
    .n("CognitoIdentityProviderClient", "AdminUserGlobalSignOutCommand")
    .f(AdminUserGlobalSignOutRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUserGlobalSignOutCommand)
    .de(de_AdminUserGlobalSignOutCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AssociateSoftwareTokenCommand.js







class AssociateSoftwareTokenCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AssociateSoftwareToken", {})
    .n("CognitoIdentityProviderClient", "AssociateSoftwareTokenCommand")
    .f(AssociateSoftwareTokenRequestFilterSensitiveLog, AssociateSoftwareTokenResponseFilterSensitiveLog)
    .ser(se_AssociateSoftwareTokenCommand)
    .de(de_AssociateSoftwareTokenCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ChangePasswordCommand.js







class ChangePasswordCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ChangePassword", {})
    .n("CognitoIdentityProviderClient", "ChangePasswordCommand")
    .f(ChangePasswordRequestFilterSensitiveLog, void 0)
    .ser(se_ChangePasswordCommand)
    .de(de_ChangePasswordCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CompleteWebAuthnRegistrationCommand.js







class CompleteWebAuthnRegistrationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CompleteWebAuthnRegistration", {})
    .n("CognitoIdentityProviderClient", "CompleteWebAuthnRegistrationCommand")
    .f(CompleteWebAuthnRegistrationRequestFilterSensitiveLog, void 0)
    .ser(se_CompleteWebAuthnRegistrationCommand)
    .de(de_CompleteWebAuthnRegistrationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ConfirmDeviceCommand.js







class ConfirmDeviceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ConfirmDevice", {})
    .n("CognitoIdentityProviderClient", "ConfirmDeviceCommand")
    .f(ConfirmDeviceRequestFilterSensitiveLog, void 0)
    .ser(se_ConfirmDeviceCommand)
    .de(de_ConfirmDeviceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ConfirmForgotPasswordCommand.js







class ConfirmForgotPasswordCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ConfirmForgotPassword", {})
    .n("CognitoIdentityProviderClient", "ConfirmForgotPasswordCommand")
    .f(ConfirmForgotPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_ConfirmForgotPasswordCommand)
    .de(de_ConfirmForgotPasswordCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ConfirmSignUpCommand.js







class ConfirmSignUpCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ConfirmSignUp", {})
    .n("CognitoIdentityProviderClient", "ConfirmSignUpCommand")
    .f(ConfirmSignUpRequestFilterSensitiveLog, ConfirmSignUpResponseFilterSensitiveLog)
    .ser(se_ConfirmSignUpCommand)
    .de(de_ConfirmSignUpCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateGroupCommand.js






class CreateGroupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateGroup", {})
    .n("CognitoIdentityProviderClient", "CreateGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateGroupCommand)
    .de(de_CreateGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateIdentityProviderCommand.js






class CreateIdentityProviderCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "CreateIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_CreateIdentityProviderCommand)
    .de(de_CreateIdentityProviderCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateManagedLoginBrandingCommand.js







class CreateManagedLoginBrandingCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "CreateManagedLoginBrandingCommand")
    .f(CreateManagedLoginBrandingRequestFilterSensitiveLog, void 0)
    .ser(se_CreateManagedLoginBrandingCommand)
    .de(de_CreateManagedLoginBrandingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateResourceServerCommand.js






class CreateResourceServerCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateResourceServer", {})
    .n("CognitoIdentityProviderClient", "CreateResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_CreateResourceServerCommand)
    .de(de_CreateResourceServerCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateUserImportJobCommand.js






class CreateUserImportJobCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserImportJob", {})
    .n("CognitoIdentityProviderClient", "CreateUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserImportJobCommand)
    .de(de_CreateUserImportJobCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateUserPoolClientCommand.js







class CreateUserPoolClientCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "CreateUserPoolClientCommand")
    .f(void 0, CreateUserPoolClientResponseFilterSensitiveLog)
    .ser(se_CreateUserPoolClientCommand)
    .de(de_CreateUserPoolClientCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateUserPoolCommand.js






class CreateUserPoolCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserPool", {})
    .n("CognitoIdentityProviderClient", "CreateUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserPoolCommand)
    .de(de_CreateUserPoolCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/CreateUserPoolDomainCommand.js






class CreateUserPoolDomainCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "CreateUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserPoolDomainCommand)
    .de(de_CreateUserPoolDomainCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteGroupCommand.js






class DeleteGroupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteGroup", {})
    .n("CognitoIdentityProviderClient", "DeleteGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteGroupCommand)
    .de(de_DeleteGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteIdentityProviderCommand.js






class DeleteIdentityProviderCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "DeleteIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIdentityProviderCommand)
    .de(de_DeleteIdentityProviderCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteManagedLoginBrandingCommand.js






class DeleteManagedLoginBrandingCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "DeleteManagedLoginBrandingCommand")
    .f(void 0, void 0)
    .ser(se_DeleteManagedLoginBrandingCommand)
    .de(de_DeleteManagedLoginBrandingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteResourceServerCommand.js






class DeleteResourceServerCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteResourceServer", {})
    .n("CognitoIdentityProviderClient", "DeleteResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteResourceServerCommand)
    .de(de_DeleteResourceServerCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteUserAttributesCommand.js







class DeleteUserAttributesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserAttributes", {})
    .n("CognitoIdentityProviderClient", "DeleteUserAttributesCommand")
    .f(DeleteUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteUserAttributesCommand)
    .de(de_DeleteUserAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteUserCommand.js







class DeleteUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUser", {})
    .n("CognitoIdentityProviderClient", "DeleteUserCommand")
    .f(DeleteUserRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteUserCommand)
    .de(de_DeleteUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteUserPoolClientCommand.js







class DeleteUserPoolClientCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "DeleteUserPoolClientCommand")
    .f(DeleteUserPoolClientRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteUserPoolClientCommand)
    .de(de_DeleteUserPoolClientCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteUserPoolCommand.js






class DeleteUserPoolCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserPool", {})
    .n("CognitoIdentityProviderClient", "DeleteUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserPoolCommand)
    .de(de_DeleteUserPoolCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteUserPoolDomainCommand.js






class DeleteUserPoolDomainCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "DeleteUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserPoolDomainCommand)
    .de(de_DeleteUserPoolDomainCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DeleteWebAuthnCredentialCommand.js







class DeleteWebAuthnCredentialCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteWebAuthnCredential", {})
    .n("CognitoIdentityProviderClient", "DeleteWebAuthnCredentialCommand")
    .f(DeleteWebAuthnCredentialRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteWebAuthnCredentialCommand)
    .de(de_DeleteWebAuthnCredentialCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeIdentityProviderCommand.js






class DescribeIdentityProviderCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "DescribeIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIdentityProviderCommand)
    .de(de_DescribeIdentityProviderCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeManagedLoginBrandingByClientCommand.js







class DescribeManagedLoginBrandingByClientCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeManagedLoginBrandingByClient", {})
    .n("CognitoIdentityProviderClient", "DescribeManagedLoginBrandingByClientCommand")
    .f(DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog, void 0)
    .ser(se_DescribeManagedLoginBrandingByClientCommand)
    .de(de_DescribeManagedLoginBrandingByClientCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeManagedLoginBrandingCommand.js






class DescribeManagedLoginBrandingCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "DescribeManagedLoginBrandingCommand")
    .f(void 0, void 0)
    .ser(se_DescribeManagedLoginBrandingCommand)
    .de(de_DescribeManagedLoginBrandingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeResourceServerCommand.js






class DescribeResourceServerCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeResourceServer", {})
    .n("CognitoIdentityProviderClient", "DescribeResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_DescribeResourceServerCommand)
    .de(de_DescribeResourceServerCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeRiskConfigurationCommand.js







class DescribeRiskConfigurationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeRiskConfiguration", {})
    .n("CognitoIdentityProviderClient", "DescribeRiskConfigurationCommand")
    .f(DescribeRiskConfigurationRequestFilterSensitiveLog, DescribeRiskConfigurationResponseFilterSensitiveLog)
    .ser(se_DescribeRiskConfigurationCommand)
    .de(de_DescribeRiskConfigurationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeUserImportJobCommand.js






class DescribeUserImportJobCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserImportJob", {})
    .n("CognitoIdentityProviderClient", "DescribeUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserImportJobCommand)
    .de(de_DescribeUserImportJobCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeUserPoolClientCommand.js







class DescribeUserPoolClientCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "DescribeUserPoolClientCommand")
    .f(DescribeUserPoolClientRequestFilterSensitiveLog, DescribeUserPoolClientResponseFilterSensitiveLog)
    .ser(se_DescribeUserPoolClientCommand)
    .de(de_DescribeUserPoolClientCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeUserPoolCommand.js






class DescribeUserPoolCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserPool", {})
    .n("CognitoIdentityProviderClient", "DescribeUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserPoolCommand)
    .de(de_DescribeUserPoolCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/DescribeUserPoolDomainCommand.js






class DescribeUserPoolDomainCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "DescribeUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserPoolDomainCommand)
    .de(de_DescribeUserPoolDomainCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ForgetDeviceCommand.js







class ForgetDeviceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ForgetDevice", {})
    .n("CognitoIdentityProviderClient", "ForgetDeviceCommand")
    .f(ForgetDeviceRequestFilterSensitiveLog, void 0)
    .ser(se_ForgetDeviceCommand)
    .de(de_ForgetDeviceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ForgotPasswordCommand.js







class ForgotPasswordCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ForgotPassword", {})
    .n("CognitoIdentityProviderClient", "ForgotPasswordCommand")
    .f(ForgotPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_ForgotPasswordCommand)
    .de(de_ForgotPasswordCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetCSVHeaderCommand.js






class GetCSVHeaderCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetCSVHeader", {})
    .n("CognitoIdentityProviderClient", "GetCSVHeaderCommand")
    .f(void 0, void 0)
    .ser(se_GetCSVHeaderCommand)
    .de(de_GetCSVHeaderCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetDeviceCommand.js







class GetDeviceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetDevice", {})
    .n("CognitoIdentityProviderClient", "GetDeviceCommand")
    .f(GetDeviceRequestFilterSensitiveLog, GetDeviceResponseFilterSensitiveLog)
    .ser(se_GetDeviceCommand)
    .de(de_GetDeviceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetGroupCommand.js






class GetGroupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetGroup", {})
    .n("CognitoIdentityProviderClient", "GetGroupCommand")
    .f(void 0, void 0)
    .ser(se_GetGroupCommand)
    .de(de_GetGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetIdentityProviderByIdentifierCommand.js






class GetIdentityProviderByIdentifierCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetIdentityProviderByIdentifier", {})
    .n("CognitoIdentityProviderClient", "GetIdentityProviderByIdentifierCommand")
    .f(void 0, void 0)
    .ser(se_GetIdentityProviderByIdentifierCommand)
    .de(de_GetIdentityProviderByIdentifierCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetLogDeliveryConfigurationCommand.js






class GetLogDeliveryConfigurationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetLogDeliveryConfiguration", {})
    .n("CognitoIdentityProviderClient", "GetLogDeliveryConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_GetLogDeliveryConfigurationCommand)
    .de(de_GetLogDeliveryConfigurationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetSigningCertificateCommand.js






class GetSigningCertificateCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetSigningCertificate", {})
    .n("CognitoIdentityProviderClient", "GetSigningCertificateCommand")
    .f(void 0, void 0)
    .ser(se_GetSigningCertificateCommand)
    .de(de_GetSigningCertificateCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetTokensFromRefreshTokenCommand.js







class GetTokensFromRefreshTokenCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetTokensFromRefreshToken", {})
    .n("CognitoIdentityProviderClient", "GetTokensFromRefreshTokenCommand")
    .f(GetTokensFromRefreshTokenRequestFilterSensitiveLog, GetTokensFromRefreshTokenResponseFilterSensitiveLog)
    .ser(se_GetTokensFromRefreshTokenCommand)
    .de(de_GetTokensFromRefreshTokenCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetUICustomizationCommand.js







class GetUICustomizationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUICustomization", {})
    .n("CognitoIdentityProviderClient", "GetUICustomizationCommand")
    .f(GetUICustomizationRequestFilterSensitiveLog, GetUICustomizationResponseFilterSensitiveLog)
    .ser(se_GetUICustomizationCommand)
    .de(de_GetUICustomizationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetUserAttributeVerificationCodeCommand.js







class GetUserAttributeVerificationCodeCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUserAttributeVerificationCode", {})
    .n("CognitoIdentityProviderClient", "GetUserAttributeVerificationCodeCommand")
    .f(GetUserAttributeVerificationCodeRequestFilterSensitiveLog, void 0)
    .ser(se_GetUserAttributeVerificationCodeCommand)
    .de(de_GetUserAttributeVerificationCodeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetUserAuthFactorsCommand.js







class GetUserAuthFactorsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUserAuthFactors", {})
    .n("CognitoIdentityProviderClient", "GetUserAuthFactorsCommand")
    .f(GetUserAuthFactorsRequestFilterSensitiveLog, GetUserAuthFactorsResponseFilterSensitiveLog)
    .ser(se_GetUserAuthFactorsCommand)
    .de(de_GetUserAuthFactorsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetUserCommand.js







class GetUserCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUser", {})
    .n("CognitoIdentityProviderClient", "GetUserCommand")
    .f(GetUserRequestFilterSensitiveLog, GetUserResponseFilterSensitiveLog)
    .ser(se_GetUserCommand)
    .de(de_GetUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetUserPoolMfaConfigCommand.js






class GetUserPoolMfaConfigCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUserPoolMfaConfig", {})
    .n("CognitoIdentityProviderClient", "GetUserPoolMfaConfigCommand")
    .f(void 0, void 0)
    .ser(se_GetUserPoolMfaConfigCommand)
    .de(de_GetUserPoolMfaConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GlobalSignOutCommand.js







class GlobalSignOutCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GlobalSignOut", {})
    .n("CognitoIdentityProviderClient", "GlobalSignOutCommand")
    .f(GlobalSignOutRequestFilterSensitiveLog, void 0)
    .ser(se_GlobalSignOutCommand)
    .de(de_GlobalSignOutCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/InitiateAuthCommand.js







class InitiateAuthCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "InitiateAuth", {})
    .n("CognitoIdentityProviderClient", "InitiateAuthCommand")
    .f(InitiateAuthRequestFilterSensitiveLog, InitiateAuthResponseFilterSensitiveLog)
    .ser(se_InitiateAuthCommand)
    .de(de_InitiateAuthCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListDevicesCommand.js







class ListDevicesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListDevices", {})
    .n("CognitoIdentityProviderClient", "ListDevicesCommand")
    .f(ListDevicesRequestFilterSensitiveLog, ListDevicesResponseFilterSensitiveLog)
    .ser(se_ListDevicesCommand)
    .de(de_ListDevicesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListGroupsCommand.js






class ListGroupsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListGroups", {})
    .n("CognitoIdentityProviderClient", "ListGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListGroupsCommand)
    .de(de_ListGroupsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListIdentityProvidersCommand.js






class ListIdentityProvidersCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListIdentityProviders", {})
    .n("CognitoIdentityProviderClient", "ListIdentityProvidersCommand")
    .f(void 0, void 0)
    .ser(se_ListIdentityProvidersCommand)
    .de(de_ListIdentityProvidersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListResourceServersCommand.js






class ListResourceServersCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListResourceServers", {})
    .n("CognitoIdentityProviderClient", "ListResourceServersCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceServersCommand)
    .de(de_ListResourceServersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListTagsForResourceCommand.js






class ListTagsForResourceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListTagsForResource", {})
    .n("CognitoIdentityProviderClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListUserImportJobsCommand.js






class ListUserImportJobsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUserImportJobs", {})
    .n("CognitoIdentityProviderClient", "ListUserImportJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListUserImportJobsCommand)
    .de(de_ListUserImportJobsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListUserPoolClientsCommand.js







class ListUserPoolClientsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUserPoolClients", {})
    .n("CognitoIdentityProviderClient", "ListUserPoolClientsCommand")
    .f(void 0, ListUserPoolClientsResponseFilterSensitiveLog)
    .ser(se_ListUserPoolClientsCommand)
    .de(de_ListUserPoolClientsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListUserPoolsCommand.js






class ListUserPoolsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUserPools", {})
    .n("CognitoIdentityProviderClient", "ListUserPoolsCommand")
    .f(void 0, void 0)
    .ser(se_ListUserPoolsCommand)
    .de(de_ListUserPoolsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListUsersCommand.js







class ListUsersCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUsers", {})
    .n("CognitoIdentityProviderClient", "ListUsersCommand")
    .f(void 0, ListUsersResponseFilterSensitiveLog)
    .ser(se_ListUsersCommand)
    .de(de_ListUsersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListUsersInGroupCommand.js







class ListUsersInGroupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUsersInGroup", {})
    .n("CognitoIdentityProviderClient", "ListUsersInGroupCommand")
    .f(void 0, ListUsersInGroupResponseFilterSensitiveLog)
    .ser(se_ListUsersInGroupCommand)
    .de(de_ListUsersInGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ListWebAuthnCredentialsCommand.js







class ListWebAuthnCredentialsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListWebAuthnCredentials", {})
    .n("CognitoIdentityProviderClient", "ListWebAuthnCredentialsCommand")
    .f(ListWebAuthnCredentialsRequestFilterSensitiveLog, void 0)
    .ser(se_ListWebAuthnCredentialsCommand)
    .de(de_ListWebAuthnCredentialsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ResendConfirmationCodeCommand.js







class ResendConfirmationCodeCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ResendConfirmationCode", {})
    .n("CognitoIdentityProviderClient", "ResendConfirmationCodeCommand")
    .f(ResendConfirmationCodeRequestFilterSensitiveLog, void 0)
    .ser(se_ResendConfirmationCodeCommand)
    .de(de_ResendConfirmationCodeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/RespondToAuthChallengeCommand.js







class RespondToAuthChallengeCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "RespondToAuthChallenge", {})
    .n("CognitoIdentityProviderClient", "RespondToAuthChallengeCommand")
    .f(RespondToAuthChallengeRequestFilterSensitiveLog, RespondToAuthChallengeResponseFilterSensitiveLog)
    .ser(se_RespondToAuthChallengeCommand)
    .de(de_RespondToAuthChallengeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/RevokeTokenCommand.js







class RevokeTokenCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "RevokeToken", {})
    .n("CognitoIdentityProviderClient", "RevokeTokenCommand")
    .f(RevokeTokenRequestFilterSensitiveLog, void 0)
    .ser(se_RevokeTokenCommand)
    .de(de_RevokeTokenCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SetLogDeliveryConfigurationCommand.js






class SetLogDeliveryConfigurationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetLogDeliveryConfiguration", {})
    .n("CognitoIdentityProviderClient", "SetLogDeliveryConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_SetLogDeliveryConfigurationCommand)
    .de(de_SetLogDeliveryConfigurationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SetRiskConfigurationCommand.js







class SetRiskConfigurationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetRiskConfiguration", {})
    .n("CognitoIdentityProviderClient", "SetRiskConfigurationCommand")
    .f(SetRiskConfigurationRequestFilterSensitiveLog, SetRiskConfigurationResponseFilterSensitiveLog)
    .ser(se_SetRiskConfigurationCommand)
    .de(de_SetRiskConfigurationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SetUICustomizationCommand.js







class SetUICustomizationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUICustomization", {})
    .n("CognitoIdentityProviderClient", "SetUICustomizationCommand")
    .f(SetUICustomizationRequestFilterSensitiveLog, SetUICustomizationResponseFilterSensitiveLog)
    .ser(se_SetUICustomizationCommand)
    .de(de_SetUICustomizationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SetUserMFAPreferenceCommand.js







class SetUserMFAPreferenceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUserMFAPreference", {})
    .n("CognitoIdentityProviderClient", "SetUserMFAPreferenceCommand")
    .f(SetUserMFAPreferenceRequestFilterSensitiveLog, void 0)
    .ser(se_SetUserMFAPreferenceCommand)
    .de(de_SetUserMFAPreferenceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SetUserPoolMfaConfigCommand.js






class SetUserPoolMfaConfigCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUserPoolMfaConfig", {})
    .n("CognitoIdentityProviderClient", "SetUserPoolMfaConfigCommand")
    .f(void 0, void 0)
    .ser(se_SetUserPoolMfaConfigCommand)
    .de(de_SetUserPoolMfaConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SetUserSettingsCommand.js







class SetUserSettingsCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUserSettings", {})
    .n("CognitoIdentityProviderClient", "SetUserSettingsCommand")
    .f(SetUserSettingsRequestFilterSensitiveLog, void 0)
    .ser(se_SetUserSettingsCommand)
    .de(de_SetUserSettingsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SignUpCommand.js







class SignUpCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SignUp", {})
    .n("CognitoIdentityProviderClient", "SignUpCommand")
    .f(SignUpRequestFilterSensitiveLog, SignUpResponseFilterSensitiveLog)
    .ser(se_SignUpCommand)
    .de(de_SignUpCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/StartUserImportJobCommand.js






class StartUserImportJobCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "StartUserImportJob", {})
    .n("CognitoIdentityProviderClient", "StartUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_StartUserImportJobCommand)
    .de(de_StartUserImportJobCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/StartWebAuthnRegistrationCommand.js







class StartWebAuthnRegistrationCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "StartWebAuthnRegistration", {})
    .n("CognitoIdentityProviderClient", "StartWebAuthnRegistrationCommand")
    .f(StartWebAuthnRegistrationRequestFilterSensitiveLog, void 0)
    .ser(se_StartWebAuthnRegistrationCommand)
    .de(de_StartWebAuthnRegistrationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/StopUserImportJobCommand.js






class StopUserImportJobCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "StopUserImportJob", {})
    .n("CognitoIdentityProviderClient", "StopUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_StopUserImportJobCommand)
    .de(de_StopUserImportJobCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/TagResourceCommand.js






class TagResourceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "TagResource", {})
    .n("CognitoIdentityProviderClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UntagResourceCommand.js






class UntagResourceCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UntagResource", {})
    .n("CognitoIdentityProviderClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateAuthEventFeedbackCommand.js







class UpdateAuthEventFeedbackCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateAuthEventFeedback", {})
    .n("CognitoIdentityProviderClient", "UpdateAuthEventFeedbackCommand")
    .f(UpdateAuthEventFeedbackRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateAuthEventFeedbackCommand)
    .de(de_UpdateAuthEventFeedbackCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateDeviceStatusCommand.js







class UpdateDeviceStatusCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateDeviceStatus", {})
    .n("CognitoIdentityProviderClient", "UpdateDeviceStatusCommand")
    .f(UpdateDeviceStatusRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateDeviceStatusCommand)
    .de(de_UpdateDeviceStatusCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateGroupCommand.js






class UpdateGroupCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateGroup", {})
    .n("CognitoIdentityProviderClient", "UpdateGroupCommand")
    .f(void 0, void 0)
    .ser(se_UpdateGroupCommand)
    .de(de_UpdateGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateIdentityProviderCommand.js






class UpdateIdentityProviderCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "UpdateIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_UpdateIdentityProviderCommand)
    .de(de_UpdateIdentityProviderCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateManagedLoginBrandingCommand.js






class UpdateManagedLoginBrandingCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "UpdateManagedLoginBrandingCommand")
    .f(void 0, void 0)
    .ser(se_UpdateManagedLoginBrandingCommand)
    .de(de_UpdateManagedLoginBrandingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateResourceServerCommand.js






class UpdateResourceServerCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateResourceServer", {})
    .n("CognitoIdentityProviderClient", "UpdateResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_UpdateResourceServerCommand)
    .de(de_UpdateResourceServerCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateUserAttributesCommand.js







class UpdateUserAttributesCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserAttributes", {})
    .n("CognitoIdentityProviderClient", "UpdateUserAttributesCommand")
    .f(UpdateUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateUserAttributesCommand)
    .de(de_UpdateUserAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateUserPoolClientCommand.js







class UpdateUserPoolClientCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "UpdateUserPoolClientCommand")
    .f(UpdateUserPoolClientRequestFilterSensitiveLog, UpdateUserPoolClientResponseFilterSensitiveLog)
    .ser(se_UpdateUserPoolClientCommand)
    .de(de_UpdateUserPoolClientCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateUserPoolCommand.js






class UpdateUserPoolCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserPool", {})
    .n("CognitoIdentityProviderClient", "UpdateUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserPoolCommand)
    .de(de_UpdateUserPoolCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/UpdateUserPoolDomainCommand.js






class UpdateUserPoolDomainCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "UpdateUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserPoolDomainCommand)
    .de(de_UpdateUserPoolDomainCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/VerifySoftwareTokenCommand.js







class VerifySoftwareTokenCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "VerifySoftwareToken", {})
    .n("CognitoIdentityProviderClient", "VerifySoftwareTokenCommand")
    .f(VerifySoftwareTokenRequestFilterSensitiveLog, VerifySoftwareTokenResponseFilterSensitiveLog)
    .ser(se_VerifySoftwareTokenCommand)
    .de(de_VerifySoftwareTokenCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/VerifyUserAttributeCommand.js







class VerifyUserAttributeCommand extends smithy_client_dist_es.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "VerifyUserAttribute", {})
    .n("CognitoIdentityProviderClient", "VerifyUserAttributeCommand")
    .f(VerifyUserAttributeRequestFilterSensitiveLog, void 0)
    .ser(se_VerifyUserAttributeCommand)
    .de(de_VerifyUserAttributeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/CognitoIdentityProvider.js




















































































































const commands = {
    AddCustomAttributesCommand: AddCustomAttributesCommand,
    AdminAddUserToGroupCommand: AdminAddUserToGroupCommand,
    AdminConfirmSignUpCommand: AdminConfirmSignUpCommand,
    AdminCreateUserCommand: AdminCreateUserCommand,
    AdminDeleteUserCommand: AdminDeleteUserCommand,
    AdminDeleteUserAttributesCommand: AdminDeleteUserAttributesCommand,
    AdminDisableProviderForUserCommand: AdminDisableProviderForUserCommand,
    AdminDisableUserCommand: AdminDisableUserCommand,
    AdminEnableUserCommand: AdminEnableUserCommand,
    AdminForgetDeviceCommand: AdminForgetDeviceCommand,
    AdminGetDeviceCommand: AdminGetDeviceCommand,
    AdminGetUserCommand: AdminGetUserCommand,
    AdminInitiateAuthCommand: AdminInitiateAuthCommand,
    AdminLinkProviderForUserCommand: AdminLinkProviderForUserCommand,
    AdminListDevicesCommand: AdminListDevicesCommand,
    AdminListGroupsForUserCommand: AdminListGroupsForUserCommand,
    AdminListUserAuthEventsCommand: AdminListUserAuthEventsCommand,
    AdminRemoveUserFromGroupCommand: AdminRemoveUserFromGroupCommand,
    AdminResetUserPasswordCommand: AdminResetUserPasswordCommand,
    AdminRespondToAuthChallengeCommand: AdminRespondToAuthChallengeCommand,
    AdminSetUserMFAPreferenceCommand: AdminSetUserMFAPreferenceCommand,
    AdminSetUserPasswordCommand: AdminSetUserPasswordCommand,
    AdminSetUserSettingsCommand: AdminSetUserSettingsCommand,
    AdminUpdateAuthEventFeedbackCommand: AdminUpdateAuthEventFeedbackCommand,
    AdminUpdateDeviceStatusCommand: AdminUpdateDeviceStatusCommand,
    AdminUpdateUserAttributesCommand: AdminUpdateUserAttributesCommand,
    AdminUserGlobalSignOutCommand: AdminUserGlobalSignOutCommand,
    AssociateSoftwareTokenCommand: AssociateSoftwareTokenCommand,
    ChangePasswordCommand: ChangePasswordCommand,
    CompleteWebAuthnRegistrationCommand: CompleteWebAuthnRegistrationCommand,
    ConfirmDeviceCommand: ConfirmDeviceCommand,
    ConfirmForgotPasswordCommand: ConfirmForgotPasswordCommand,
    ConfirmSignUpCommand: ConfirmSignUpCommand,
    CreateGroupCommand: CreateGroupCommand,
    CreateIdentityProviderCommand: CreateIdentityProviderCommand,
    CreateManagedLoginBrandingCommand: CreateManagedLoginBrandingCommand,
    CreateResourceServerCommand: CreateResourceServerCommand,
    CreateUserImportJobCommand: CreateUserImportJobCommand,
    CreateUserPoolCommand: CreateUserPoolCommand,
    CreateUserPoolClientCommand: CreateUserPoolClientCommand,
    CreateUserPoolDomainCommand: CreateUserPoolDomainCommand,
    DeleteGroupCommand: DeleteGroupCommand,
    DeleteIdentityProviderCommand: DeleteIdentityProviderCommand,
    DeleteManagedLoginBrandingCommand: DeleteManagedLoginBrandingCommand,
    DeleteResourceServerCommand: DeleteResourceServerCommand,
    DeleteUserCommand: DeleteUserCommand,
    DeleteUserAttributesCommand: DeleteUserAttributesCommand,
    DeleteUserPoolCommand: DeleteUserPoolCommand,
    DeleteUserPoolClientCommand: DeleteUserPoolClientCommand,
    DeleteUserPoolDomainCommand: DeleteUserPoolDomainCommand,
    DeleteWebAuthnCredentialCommand: DeleteWebAuthnCredentialCommand,
    DescribeIdentityProviderCommand: DescribeIdentityProviderCommand,
    DescribeManagedLoginBrandingCommand: DescribeManagedLoginBrandingCommand,
    DescribeManagedLoginBrandingByClientCommand: DescribeManagedLoginBrandingByClientCommand,
    DescribeResourceServerCommand: DescribeResourceServerCommand,
    DescribeRiskConfigurationCommand: DescribeRiskConfigurationCommand,
    DescribeUserImportJobCommand: DescribeUserImportJobCommand,
    DescribeUserPoolCommand: DescribeUserPoolCommand,
    DescribeUserPoolClientCommand: DescribeUserPoolClientCommand,
    DescribeUserPoolDomainCommand: DescribeUserPoolDomainCommand,
    ForgetDeviceCommand: ForgetDeviceCommand,
    ForgotPasswordCommand: ForgotPasswordCommand,
    GetCSVHeaderCommand: GetCSVHeaderCommand,
    GetDeviceCommand: GetDeviceCommand,
    GetGroupCommand: GetGroupCommand,
    GetIdentityProviderByIdentifierCommand: GetIdentityProviderByIdentifierCommand,
    GetLogDeliveryConfigurationCommand: GetLogDeliveryConfigurationCommand,
    GetSigningCertificateCommand: GetSigningCertificateCommand,
    GetTokensFromRefreshTokenCommand: GetTokensFromRefreshTokenCommand,
    GetUICustomizationCommand: GetUICustomizationCommand,
    GetUserCommand: GetUserCommand,
    GetUserAttributeVerificationCodeCommand: GetUserAttributeVerificationCodeCommand,
    GetUserAuthFactorsCommand: GetUserAuthFactorsCommand,
    GetUserPoolMfaConfigCommand: GetUserPoolMfaConfigCommand,
    GlobalSignOutCommand: GlobalSignOutCommand,
    InitiateAuthCommand: InitiateAuthCommand,
    ListDevicesCommand: ListDevicesCommand,
    ListGroupsCommand: ListGroupsCommand,
    ListIdentityProvidersCommand: ListIdentityProvidersCommand,
    ListResourceServersCommand: ListResourceServersCommand,
    ListTagsForResourceCommand: ListTagsForResourceCommand,
    ListUserImportJobsCommand: ListUserImportJobsCommand,
    ListUserPoolClientsCommand: ListUserPoolClientsCommand,
    ListUserPoolsCommand: ListUserPoolsCommand,
    ListUsersCommand: ListUsersCommand,
    ListUsersInGroupCommand: ListUsersInGroupCommand,
    ListWebAuthnCredentialsCommand: ListWebAuthnCredentialsCommand,
    ResendConfirmationCodeCommand: ResendConfirmationCodeCommand,
    RespondToAuthChallengeCommand: RespondToAuthChallengeCommand,
    RevokeTokenCommand: RevokeTokenCommand,
    SetLogDeliveryConfigurationCommand: SetLogDeliveryConfigurationCommand,
    SetRiskConfigurationCommand: SetRiskConfigurationCommand,
    SetUICustomizationCommand: SetUICustomizationCommand,
    SetUserMFAPreferenceCommand: SetUserMFAPreferenceCommand,
    SetUserPoolMfaConfigCommand: SetUserPoolMfaConfigCommand,
    SetUserSettingsCommand: SetUserSettingsCommand,
    SignUpCommand: SignUpCommand,
    StartUserImportJobCommand: StartUserImportJobCommand,
    StartWebAuthnRegistrationCommand: StartWebAuthnRegistrationCommand,
    StopUserImportJobCommand: StopUserImportJobCommand,
    TagResourceCommand: TagResourceCommand,
    UntagResourceCommand: UntagResourceCommand,
    UpdateAuthEventFeedbackCommand: UpdateAuthEventFeedbackCommand,
    UpdateDeviceStatusCommand: UpdateDeviceStatusCommand,
    UpdateGroupCommand: UpdateGroupCommand,
    UpdateIdentityProviderCommand: UpdateIdentityProviderCommand,
    UpdateManagedLoginBrandingCommand: UpdateManagedLoginBrandingCommand,
    UpdateResourceServerCommand: UpdateResourceServerCommand,
    UpdateUserAttributesCommand: UpdateUserAttributesCommand,
    UpdateUserPoolCommand: UpdateUserPoolCommand,
    UpdateUserPoolClientCommand: UpdateUserPoolClientCommand,
    UpdateUserPoolDomainCommand: UpdateUserPoolDomainCommand,
    VerifySoftwareTokenCommand: VerifySoftwareTokenCommand,
    VerifyUserAttributeCommand: VerifyUserAttributeCommand,
};
class CognitoIdentityProvider extends CognitoIdentityProviderClient {
}
(0,smithy_client_dist_es.createAggregatedClient)(commands, CognitoIdentityProvider);

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/index.js



















































































































// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/pagination/createPaginator.js
var createPaginator = __webpack_require__(2809);
;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/AdminListGroupsForUserPaginator.js



const paginateAdminListGroupsForUser = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, AdminListGroupsForUserCommand, "NextToken", "NextToken", "Limit");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/AdminListUserAuthEventsPaginator.js



const paginateAdminListUserAuthEvents = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, AdminListUserAuthEventsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/ListGroupsPaginator.js



const paginateListGroups = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, ListGroupsCommand, "NextToken", "NextToken", "Limit");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/ListIdentityProvidersPaginator.js



const paginateListIdentityProviders = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, ListIdentityProvidersCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/ListResourceServersPaginator.js



const paginateListResourceServers = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, ListResourceServersCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/ListUserPoolClientsPaginator.js



const paginateListUserPoolClients = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, ListUserPoolClientsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/ListUserPoolsPaginator.js



const paginateListUserPools = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, ListUserPoolsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/ListUsersInGroupPaginator.js



const paginateListUsersInGroup = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, ListUsersInGroupCommand, "NextToken", "NextToken", "Limit");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/ListUsersPaginator.js



const paginateListUsers = (0,createPaginator.createPaginator)(CognitoIdentityProviderClient, ListUsersCommand, "PaginationToken", "PaginationToken", "Limit");

;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/pagination/index.js











;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/models/index.js



;// ./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/index.js








/***/ }),

/***/ 5122:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   emitWarningIfUnsupportedVersion: () => (/* binding */ emitWarningIfUnsupportedVersion),
/* harmony export */   state: () => (/* binding */ state)
/* harmony export */ });
const state = {
    warningEmitted: false,
};
const emitWarningIfUnsupportedVersion = (version) => {
    if (version && !state.warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 18) {
        state.warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
    }
};


/***/ }),

/***/ 5172:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  getHttpSigningPlugin: () => (/* binding */ getHttpSigningPlugin),
  httpSigningMiddlewareOptions: () => (/* binding */ httpSigningMiddlewareOptions)
});

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var dist_es = __webpack_require__(3608);
// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var types_dist_es = __webpack_require__(7523);
// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js



const defaultErrorHandler = (signingProperties) => (error) => {
    throw error;
};
const defaultSuccessHandler = (httpResponse, signingProperties) => { };
const httpSigningMiddleware = (config) => (next, context) => async (args) => {
    if (!dist_es.HttpRequest.isInstance(args.request)) {
        return next(args);
    }
    const smithyContext = (0,util_middleware_dist_es.getSmithyContext)(context);
    const scheme = smithyContext.selectedHttpAuthScheme;
    if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
    }
    const { httpAuthOption: { signingProperties = {} }, identity, signer, } = scheme;
    const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties),
    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
    return output;
};

;// ./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js

const httpSigningMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["HTTP_SIGNING"],
    name: "httpSigningMiddleware",
    aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
    override: true,
    relation: "after",
    toMiddleware: "retryMiddleware",
};
const getHttpSigningPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
    },
});


/***/ }),

/***/ 5310:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  DEFAULT_REQUEST_TIMEOUT: () => (/* reexport */ DEFAULT_REQUEST_TIMEOUT),
  NodeHttp2Handler: () => (/* reexport */ NodeHttp2Handler),
  NodeHttpHandler: () => (/* reexport */ NodeHttpHandler),
  streamCollector: () => (/* reexport */ streamCollector)
});

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var dist_es = __webpack_require__(3608);
// EXTERNAL MODULE: ./node_modules/@smithy/querystring-builder/dist-es/index.js
var querystring_builder_dist_es = __webpack_require__(5901);
// EXTERNAL MODULE: external "http"
var external_http_ = __webpack_require__(8611);
// EXTERNAL MODULE: external "https"
var external_https_ = __webpack_require__(5692);
;// ./node_modules/@smithy/node-http-handler/dist-es/constants.js
const NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];

;// ./node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js
const getTransformedHeaders = (headers) => {
    const transformedHeaders = {};
    for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
    }
    return transformedHeaders;
};


;// ./node_modules/@smithy/node-http-handler/dist-es/timing.js
const timing = {
    setTimeout: (cb, ms) => setTimeout(cb, ms),
    clearTimeout: (timeoutId) => clearTimeout(timeoutId),
};

;// ./node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js

const DEFER_EVENT_LISTENER_TIME = 1000;
const setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
    if (!timeoutInMs) {
        return -1;
    }
    const registerTimeout = (offset) => {
        const timeoutId = timing.setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
                name: "TimeoutError",
            }));
        }, timeoutInMs - offset);
        const doWithSocket = (socket) => {
            if (socket?.connecting) {
                socket.on("connect", () => {
                    timing.clearTimeout(timeoutId);
                });
            }
            else {
                timing.clearTimeout(timeoutId);
            }
        };
        if (request.socket) {
            doWithSocket(request.socket);
        }
        else {
            request.on("socket", doWithSocket);
        }
    };
    if (timeoutInMs < 2000) {
        registerTimeout(0);
        return 0;
    }
    return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);
};

;// ./node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js

const set_socket_keep_alive_DEFER_EVENT_LISTENER_TIME = 3000;
const setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs }, deferTimeMs = set_socket_keep_alive_DEFER_EVENT_LISTENER_TIME) => {
    if (keepAlive !== true) {
        return -1;
    }
    const registerListener = () => {
        if (request.socket) {
            request.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        }
        else {
            request.on("socket", (socket) => {
                socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
            });
        }
    };
    if (deferTimeMs === 0) {
        registerListener();
        return 0;
    }
    return timing.setTimeout(registerListener, deferTimeMs);
};

;// ./node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js


const set_socket_timeout_DEFER_EVENT_LISTENER_TIME = 3000;
const setSocketTimeout = (request, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT) => {
    const registerTimeout = (offset) => {
        const timeout = timeoutInMs - offset;
        const onTimeout = () => {
            request.destroy();
            reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
        };
        if (request.socket) {
            request.socket.setTimeout(timeout, onTimeout);
            request.on("close", () => request.socket?.removeListener("timeout", onTimeout));
        }
        else {
            request.setTimeout(timeout, onTimeout);
        }
    };
    if (0 < timeoutInMs && timeoutInMs < 6000) {
        registerTimeout(0);
        return 0;
    }
    return timing.setTimeout(registerTimeout.bind(null, timeoutInMs === 0 ? 0 : set_socket_timeout_DEFER_EVENT_LISTENER_TIME), set_socket_timeout_DEFER_EVENT_LISTENER_TIME);
};

// EXTERNAL MODULE: external "stream"
var external_stream_ = __webpack_require__(2203);
;// ./node_modules/@smithy/node-http-handler/dist-es/write-request-body.js


const MIN_WAIT_TIME = 6000;
async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
    const headers = request.headers ?? {};
    const expect = headers["Expect"] || headers["expect"];
    let timeoutId = -1;
    let sendBody = true;
    if (expect === "100-continue") {
        sendBody = await Promise.race([
            new Promise((resolve) => {
                timeoutId = Number(timing.setTimeout(() => resolve(true), Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
            }),
            new Promise((resolve) => {
                httpRequest.on("continue", () => {
                    timing.clearTimeout(timeoutId);
                    resolve(true);
                });
                httpRequest.on("response", () => {
                    timing.clearTimeout(timeoutId);
                    resolve(false);
                });
                httpRequest.on("error", () => {
                    timing.clearTimeout(timeoutId);
                    resolve(false);
                });
            }),
        ]);
    }
    if (sendBody) {
        writeBody(httpRequest, request.body);
    }
}
function writeBody(httpRequest, body) {
    if (body instanceof external_stream_.Readable) {
        body.pipe(httpRequest);
        return;
    }
    if (body) {
        if (Buffer.isBuffer(body) || typeof body === "string") {
            httpRequest.end(body);
            return;
        }
        const uint8 = body;
        if (typeof uint8 === "object" &&
            uint8.buffer &&
            typeof uint8.byteOffset === "number" &&
            typeof uint8.byteLength === "number") {
            httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
            return;
        }
        httpRequest.end(Buffer.from(body));
        return;
    }
    httpRequest.end();
}

;// ./node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js











const DEFAULT_REQUEST_TIMEOUT = 0;
class NodeHttpHandler {
    static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
            return instanceOrOptions;
        }
        return new NodeHttpHandler(instanceOrOptions);
    }
    static checkSocketUsage(agent, socketWarningTimestamp, logger = console) {
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
            return socketWarningTimestamp;
        }
        const interval = 15000;
        if (Date.now() - interval < socketWarningTimestamp) {
            return socketWarningTimestamp;
        }
        if (sockets && requests) {
            for (const origin in sockets) {
                const socketsInUse = sockets[origin]?.length ?? 0;
                const requestsEnqueued = requests[origin]?.length ?? 0;
                if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
                    logger?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`);
                    return Date.now();
                }
            }
        }
        return socketWarningTimestamp;
    }
    constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
            if (typeof options === "function") {
                options()
                    .then((_options) => {
                    resolve(this.resolveDefaultConfig(_options));
                })
                    .catch(reject);
            }
            else {
                resolve(this.resolveDefaultConfig(options));
            }
        });
    }
    resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, socketAcquisitionWarningTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
            connectionTimeout,
            requestTimeout: requestTimeout ?? socketTimeout,
            socketAcquisitionWarningTimeout,
            httpAgent: (() => {
                if (httpAgent instanceof external_http_.Agent || typeof httpAgent?.destroy === "function") {
                    return httpAgent;
                }
                return new external_http_.Agent({ keepAlive, maxSockets, ...httpAgent });
            })(),
            httpsAgent: (() => {
                if (httpsAgent instanceof external_https_.Agent || typeof httpsAgent?.destroy === "function") {
                    return httpsAgent;
                }
                return new external_https_.Agent({ keepAlive, maxSockets, ...httpsAgent });
            })(),
            logger: console,
        };
    }
    destroy() {
        this.config?.httpAgent?.destroy();
        this.config?.httpsAgent?.destroy();
    }
    async handle(request, { abortSignal, requestTimeout } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
            let writeRequestBodyPromise = undefined;
            const timeouts = [];
            const resolve = async (arg) => {
                await writeRequestBodyPromise;
                timeouts.forEach(timing.clearTimeout);
                _resolve(arg);
            };
            const reject = async (arg) => {
                await writeRequestBodyPromise;
                timeouts.forEach(timing.clearTimeout);
                _reject(arg);
            };
            if (!this.config) {
                throw new Error("Node HTTP request handler config is not resolved");
            }
            if (abortSignal?.aborted) {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
                return;
            }
            const isSSL = request.protocol === "https:";
            const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
            timeouts.push(timing.setTimeout(() => {
                this.socketWarningTimestamp = NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp, this.config.logger);
            }, this.config.socketAcquisitionWarningTimeout ??
                (this.config.requestTimeout ?? 2000) + (this.config.connectionTimeout ?? 1000)));
            const queryString = (0,querystring_builder_dist_es.buildQueryString)(request.query || {});
            let auth = undefined;
            if (request.username != null || request.password != null) {
                const username = request.username ?? "";
                const password = request.password ?? "";
                auth = `${username}:${password}`;
            }
            let path = request.path;
            if (queryString) {
                path += `?${queryString}`;
            }
            if (request.fragment) {
                path += `#${request.fragment}`;
            }
            let hostname = request.hostname ?? "";
            if (hostname[0] === "[" && hostname.endsWith("]")) {
                hostname = request.hostname.slice(1, -1);
            }
            else {
                hostname = request.hostname;
            }
            const nodeHttpsOptions = {
                headers: request.headers,
                host: hostname,
                method: request.method,
                path,
                port: request.port,
                agent,
                auth,
            };
            const requestFunc = isSSL ? external_https_.request : external_http_.request;
            const req = requestFunc(nodeHttpsOptions, (res) => {
                const httpResponse = new dist_es.HttpResponse({
                    statusCode: res.statusCode || -1,
                    reason: res.statusMessage,
                    headers: getTransformedHeaders(res.headers),
                    body: res,
                });
                resolve({ response: httpResponse });
            });
            req.on("error", (err) => {
                if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
                    reject(Object.assign(err, { name: "TimeoutError" }));
                }
                else {
                    reject(err);
                }
            });
            if (abortSignal) {
                const onAbort = () => {
                    req.destroy();
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    reject(abortError);
                };
                if (typeof abortSignal.addEventListener === "function") {
                    const signal = abortSignal;
                    signal.addEventListener("abort", onAbort, { once: true });
                    req.once("close", () => signal.removeEventListener("abort", onAbort));
                }
                else {
                    abortSignal.onabort = onAbort;
                }
            }
            const effectiveRequestTimeout = requestTimeout ?? this.config.requestTimeout;
            timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));
            timeouts.push(setSocketTimeout(req, reject, effectiveRequestTimeout));
            const httpAgent = nodeHttpsOptions.agent;
            if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
                timeouts.push(setSocketKeepAlive(req, {
                    keepAlive: httpAgent.keepAlive,
                    keepAliveMsecs: httpAgent.keepAliveMsecs,
                }));
            }
            writeRequestBodyPromise = writeRequestBody(req, request, effectiveRequestTimeout).catch((e) => {
                timeouts.forEach(timing.clearTimeout);
                return _reject(e);
            });
        });
    }
    updateHttpClientConfig(key, value) {
        this.config = undefined;
        this.configProvider = this.configProvider.then((config) => {
            return {
                ...config,
                [key]: value,
            };
        });
    }
    httpHandlerConfigs() {
        return this.config ?? {};
    }
}

;// external "http2"
const external_http2_namespaceObject = require("http2");
var external_http2_default = /*#__PURE__*/__webpack_require__.n(external_http2_namespaceObject);
;// ./node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-pool.js
class NodeHttp2ConnectionPool {
    constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions ?? [];
    }
    poll() {
        if (this.sessions.length > 0) {
            return this.sessions.shift();
        }
    }
    offerLast(session) {
        this.sessions.push(session);
    }
    contains(session) {
        return this.sessions.includes(session);
    }
    remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
    }
    [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
    }
    destroy(connection) {
        for (const session of this.sessions) {
            if (session === connection) {
                if (!session.destroyed) {
                    session.destroy();
                }
            }
        }
    }
}

;// ./node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-manager.js


class NodeHttp2ConnectionManager {
    constructor(config) {
        this.sessionCache = new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
            throw new RangeError("maxConcurrency must be greater than zero.");
        }
    }
    lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
            const existingSession = existingPool.poll();
            if (existingSession && !this.config.disableConcurrency) {
                return existingSession;
            }
        }
        const session = external_http2_default().connect(url);
        if (this.config.maxConcurrency) {
            session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
                if (err) {
                    throw new Error("Fail to set maxConcurrentStreams to " +
                        this.config.maxConcurrency +
                        "when creating new session for " +
                        requestContext.destination.toString());
                }
            });
        }
        session.unref();
        const destroySessionCb = () => {
            session.destroy();
            this.deleteSession(url, session);
        };
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
            session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
    }
    deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
            return;
        }
        if (!existingConnectionPool.contains(session)) {
            return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
    }
    release(requestContext, session) {
        const cacheKey = this.getUrlString(requestContext);
        this.sessionCache.get(cacheKey)?.offerLast(session);
    }
    destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
            for (const session of connectionPool) {
                if (!session.destroyed) {
                    session.destroy();
                }
                connectionPool.remove(session);
            }
            this.sessionCache.delete(key);
        }
    }
    setMaxConcurrentStreams(maxConcurrentStreams) {
        if (maxConcurrentStreams && maxConcurrentStreams <= 0) {
            throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
    }
    setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
    }
    getUrlString(request) {
        return request.destination.toString();
    }
}

;// ./node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js






class NodeHttp2Handler {
    static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
            return instanceOrOptions;
        }
        return new NodeHttp2Handler(instanceOrOptions);
    }
    constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
            if (typeof options === "function") {
                options()
                    .then((opts) => {
                    resolve(opts || {});
                })
                    .catch(reject);
            }
            else {
                resolve(options || {});
            }
        });
    }
    destroy() {
        this.connectionManager.destroy();
    }
    async handle(request, { abortSignal, requestTimeout } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
            this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
            if (this.config.maxConcurrentStreams) {
                this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
            }
        }
        const { requestTimeout: configRequestTimeout, disableConcurrentStreams } = this.config;
        const effectiveRequestTimeout = requestTimeout ?? configRequestTimeout;
        return new Promise((_resolve, _reject) => {
            let fulfilled = false;
            let writeRequestBodyPromise = undefined;
            const resolve = async (arg) => {
                await writeRequestBodyPromise;
                _resolve(arg);
            };
            const reject = async (arg) => {
                await writeRequestBodyPromise;
                _reject(arg);
            };
            if (abortSignal?.aborted) {
                fulfilled = true;
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
                return;
            }
            const { hostname, method, port, protocol, query } = request;
            let auth = "";
            if (request.username != null || request.password != null) {
                const username = request.username ?? "";
                const password = request.password ?? "";
                auth = `${username}:${password}@`;
            }
            const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
            const requestContext = { destination: new URL(authority) };
            const session = this.connectionManager.lease(requestContext, {
                requestTimeout: this.config?.sessionTimeout,
                disableConcurrentStreams: disableConcurrentStreams || false,
            });
            const rejectWithDestroy = (err) => {
                if (disableConcurrentStreams) {
                    this.destroySession(session);
                }
                fulfilled = true;
                reject(err);
            };
            const queryString = (0,querystring_builder_dist_es.buildQueryString)(query || {});
            let path = request.path;
            if (queryString) {
                path += `?${queryString}`;
            }
            if (request.fragment) {
                path += `#${request.fragment}`;
            }
            const req = session.request({
                ...request.headers,
                [external_http2_namespaceObject.constants.HTTP2_HEADER_PATH]: path,
                [external_http2_namespaceObject.constants.HTTP2_HEADER_METHOD]: method,
            });
            session.ref();
            req.on("response", (headers) => {
                const httpResponse = new dist_es.HttpResponse({
                    statusCode: headers[":status"] || -1,
                    headers: getTransformedHeaders(headers),
                    body: req,
                });
                fulfilled = true;
                resolve({ response: httpResponse });
                if (disableConcurrentStreams) {
                    session.close();
                    this.connectionManager.deleteSession(authority, session);
                }
            });
            if (effectiveRequestTimeout) {
                req.setTimeout(effectiveRequestTimeout, () => {
                    req.close();
                    const timeoutError = new Error(`Stream timed out because of no activity for ${effectiveRequestTimeout} ms`);
                    timeoutError.name = "TimeoutError";
                    rejectWithDestroy(timeoutError);
                });
            }
            if (abortSignal) {
                const onAbort = () => {
                    req.close();
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    rejectWithDestroy(abortError);
                };
                if (typeof abortSignal.addEventListener === "function") {
                    const signal = abortSignal;
                    signal.addEventListener("abort", onAbort, { once: true });
                    req.once("close", () => signal.removeEventListener("abort", onAbort));
                }
                else {
                    abortSignal.onabort = onAbort;
                }
            }
            req.on("frameError", (type, code, id) => {
                rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
            });
            req.on("error", rejectWithDestroy);
            req.on("aborted", () => {
                rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
            });
            req.on("close", () => {
                session.unref();
                if (disableConcurrentStreams) {
                    session.destroy();
                }
                if (!fulfilled) {
                    rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
                }
            });
            writeRequestBodyPromise = writeRequestBody(req, request, effectiveRequestTimeout);
        });
    }
    updateHttpClientConfig(key, value) {
        this.config = undefined;
        this.configProvider = this.configProvider.then((config) => {
            return {
                ...config,
                [key]: value,
            };
        });
    }
    httpHandlerConfigs() {
        return this.config ?? {};
    }
    destroySession(session) {
        if (!session.destroyed) {
            session.destroy();
        }
    }
}

;// ./node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js

class Collector extends external_stream_.Writable {
    constructor() {
        super(...arguments);
        this.bufferedBytes = [];
    }
    _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
    }
}

;// ./node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js

const streamCollector = (stream) => {
    if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
    }
    return new Promise((resolve, reject) => {
        const collector = new Collector();
        stream.pipe(collector);
        stream.on("error", (err) => {
            collector.end();
            reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function () {
            const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
            resolve(bytes);
        });
    });
};
const isReadableStreamInstance = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;
async function collectReadableStream(stream) {
    const chunks = [];
    const reader = stream.getReader();
    let isDone = false;
    let length = 0;
    while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
            chunks.push(value);
            length += value.length;
        }
        isDone = done;
    }
    const collected = new Uint8Array(length);
    let offset = 0;
    for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
    }
    return collected;
}

;// ./node_modules/@smithy/node-http-handler/dist-es/index.js





/***/ }),

/***/ 5317:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 5384:
/***/ ((__unused_webpack_module, exports) => {

/**
 * Mnemonist Typed Array Helpers
 * ==============================
 *
 * Miscellaneous helpers related to typed arrays.
 */

/**
 * When using an unsigned integer array to store pointers, one might want to
 * choose the optimal word size in regards to the actual numbers of pointers
 * to store.
 *
 * This helpers does just that.
 *
 * @param  {number} size - Expected size of the array to map.
 * @return {TypedArray}
 */
var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1,
    MAX_16BIT_INTEGER = Math.pow(2, 16) - 1,
    MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;

var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1,
    MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1,
    MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;

exports.getPointerArray = function(size) {
  var maxIndex = size - 1;

  if (maxIndex <= MAX_8BIT_INTEGER)
    return Uint8Array;

  if (maxIndex <= MAX_16BIT_INTEGER)
    return Uint16Array;

  if (maxIndex <= MAX_32BIT_INTEGER)
    return Uint32Array;

  return Float64Array;
};

exports.getSignedPointerArray = function(size) {
  var maxIndex = size - 1;

  if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
    return Int8Array;

  if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
    return Int16Array;

  if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
    return Int32Array;

  return Float64Array;
};

/**
 * Function returning the minimal type able to represent the given number.
 *
 * @param  {number} value - Value to test.
 * @return {TypedArrayClass}
 */
exports.getNumberType = function(value) {

  // <= 32 bits itnteger?
  if (value === (value | 0)) {

    // Negative
    if (Math.sign(value) === -1) {
      if (value <= 127 && value >= -128)
        return Int8Array;

      if (value <= 32767 && value >= -32768)
        return Int16Array;

      return Int32Array;
    }
    else {

      if (value <= 255)
        return Uint8Array;

      if (value <= 65535)
        return Uint16Array;

      return Uint32Array;
    }
  }

  // 53 bits integer & floats
  // NOTE: it's kinda hard to tell whether we could use 32bits or not...
  return Float64Array;
};

/**
 * Function returning the minimal type able to represent the given array
 * of JavaScript numbers.
 *
 * @param  {array}    array  - Array to represent.
 * @param  {function} getter - Optional getter.
 * @return {TypedArrayClass}
 */
var TYPE_PRIORITY = {
  Uint8Array: 1,
  Int8Array: 2,
  Uint16Array: 3,
  Int16Array: 4,
  Uint32Array: 5,
  Int32Array: 6,
  Float32Array: 7,
  Float64Array: 8
};

// TODO: make this a one-shot for one value
exports.getMinimalRepresentation = function(array, getter) {
  var maxType = null,
      maxPriority = 0,
      p,
      t,
      v,
      i,
      l;

  for (i = 0, l = array.length; i < l; i++) {
    v = getter ? getter(array[i]) : array[i];
    t = exports.getNumberType(v);
    p = TYPE_PRIORITY[t.name];

    if (p > maxPriority) {
      maxPriority = p;
      maxType = t;
    }
  }

  return maxType;
};

/**
 * Function returning whether the given value is a typed array.
 *
 * @param  {any} value - Value to test.
 * @return {boolean}
 */
exports.isTypedArray = function(value) {
  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(value);
};

/**
 * Function used to concat byte arrays.
 *
 * @param  {...ByteArray}
 * @return {ByteArray}
 */
exports.concat = function() {
  var length = 0,
      i,
      o,
      l;

  for (i = 0, l = arguments.length; i < l; i++)
    length += arguments[i].length;

  var array = new (arguments[0].constructor)(length);

  for (i = 0, o = 0; i < l; i++) {
    array.set(arguments[i], o);
    o += arguments[i].length;
  }

  return array;
};

/**
 * Function used to initialize a byte array of indices.
 *
 * @param  {number}    length - Length of target.
 * @return {ByteArray}
 */
exports.indices = function(length) {
  var PointerArray = exports.getPointerArray(length);

  var array = new PointerArray(length);

  for (var i = 0; i < length; i++)
    array[i] = i;

  return array;
};


/***/ }),

/***/ 5536:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoAuthSigner: () => (/* binding */ NoAuthSigner)
/* harmony export */ });
class NoAuthSigner {
    async sign(httpRequest, identity, signingProperties) {
        return httpRequest;
    }
}


/***/ }),

/***/ 5692:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 5901:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildQueryString: () => (/* binding */ buildQueryString)
/* harmony export */ });
/* harmony import */ var _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2531);

function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0,_smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key);
        if (Array.isArray(value)) {
            for (let i = 0, iLen = value.length; i < iLen; i++) {
                parts.push(`${key}=${(0,_smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value[i])}`);
            }
        }
        else {
            let qsEntry = key;
            if (value || typeof value === "string") {
                qsEntry += `=${(0,_smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`;
            }
            parts.push(qsEntry);
        }
    }
    return parts.join("&");
}


/***/ }),

/***/ 6021:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  de_BatchExecuteStatementCommand: () => (/* binding */ de_BatchExecuteStatementCommand),
  de_BatchGetItemCommand: () => (/* binding */ de_BatchGetItemCommand),
  de_BatchWriteItemCommand: () => (/* binding */ de_BatchWriteItemCommand),
  de_CreateBackupCommand: () => (/* binding */ de_CreateBackupCommand),
  de_CreateGlobalTableCommand: () => (/* binding */ de_CreateGlobalTableCommand),
  de_CreateTableCommand: () => (/* binding */ de_CreateTableCommand),
  de_DeleteBackupCommand: () => (/* binding */ de_DeleteBackupCommand),
  de_DeleteItemCommand: () => (/* binding */ de_DeleteItemCommand),
  de_DeleteResourcePolicyCommand: () => (/* binding */ de_DeleteResourcePolicyCommand),
  de_DeleteTableCommand: () => (/* binding */ de_DeleteTableCommand),
  de_DescribeBackupCommand: () => (/* binding */ de_DescribeBackupCommand),
  de_DescribeContinuousBackupsCommand: () => (/* binding */ de_DescribeContinuousBackupsCommand),
  de_DescribeContributorInsightsCommand: () => (/* binding */ de_DescribeContributorInsightsCommand),
  de_DescribeEndpointsCommand: () => (/* binding */ de_DescribeEndpointsCommand),
  de_DescribeExportCommand: () => (/* binding */ de_DescribeExportCommand),
  de_DescribeGlobalTableCommand: () => (/* binding */ de_DescribeGlobalTableCommand),
  de_DescribeGlobalTableSettingsCommand: () => (/* binding */ de_DescribeGlobalTableSettingsCommand),
  de_DescribeImportCommand: () => (/* binding */ de_DescribeImportCommand),
  de_DescribeKinesisStreamingDestinationCommand: () => (/* binding */ de_DescribeKinesisStreamingDestinationCommand),
  de_DescribeLimitsCommand: () => (/* binding */ de_DescribeLimitsCommand),
  de_DescribeTableCommand: () => (/* binding */ de_DescribeTableCommand),
  de_DescribeTableReplicaAutoScalingCommand: () => (/* binding */ de_DescribeTableReplicaAutoScalingCommand),
  de_DescribeTimeToLiveCommand: () => (/* binding */ de_DescribeTimeToLiveCommand),
  de_DisableKinesisStreamingDestinationCommand: () => (/* binding */ de_DisableKinesisStreamingDestinationCommand),
  de_EnableKinesisStreamingDestinationCommand: () => (/* binding */ de_EnableKinesisStreamingDestinationCommand),
  de_ExecuteStatementCommand: () => (/* binding */ de_ExecuteStatementCommand),
  de_ExecuteTransactionCommand: () => (/* binding */ de_ExecuteTransactionCommand),
  de_ExportTableToPointInTimeCommand: () => (/* binding */ de_ExportTableToPointInTimeCommand),
  de_GetItemCommand: () => (/* binding */ de_GetItemCommand),
  de_GetResourcePolicyCommand: () => (/* binding */ de_GetResourcePolicyCommand),
  de_ImportTableCommand: () => (/* binding */ de_ImportTableCommand),
  de_ListBackupsCommand: () => (/* binding */ de_ListBackupsCommand),
  de_ListContributorInsightsCommand: () => (/* binding */ de_ListContributorInsightsCommand),
  de_ListExportsCommand: () => (/* binding */ de_ListExportsCommand),
  de_ListGlobalTablesCommand: () => (/* binding */ de_ListGlobalTablesCommand),
  de_ListImportsCommand: () => (/* binding */ de_ListImportsCommand),
  de_ListTablesCommand: () => (/* binding */ de_ListTablesCommand),
  de_ListTagsOfResourceCommand: () => (/* binding */ de_ListTagsOfResourceCommand),
  de_PutItemCommand: () => (/* binding */ de_PutItemCommand),
  de_PutResourcePolicyCommand: () => (/* binding */ de_PutResourcePolicyCommand),
  de_QueryCommand: () => (/* binding */ de_QueryCommand),
  de_RestoreTableFromBackupCommand: () => (/* binding */ de_RestoreTableFromBackupCommand),
  de_RestoreTableToPointInTimeCommand: () => (/* binding */ de_RestoreTableToPointInTimeCommand),
  de_ScanCommand: () => (/* binding */ de_ScanCommand),
  de_TagResourceCommand: () => (/* binding */ de_TagResourceCommand),
  de_TransactGetItemsCommand: () => (/* binding */ de_TransactGetItemsCommand),
  de_TransactWriteItemsCommand: () => (/* binding */ de_TransactWriteItemsCommand),
  de_UntagResourceCommand: () => (/* binding */ de_UntagResourceCommand),
  de_UpdateContinuousBackupsCommand: () => (/* binding */ de_UpdateContinuousBackupsCommand),
  de_UpdateContributorInsightsCommand: () => (/* binding */ de_UpdateContributorInsightsCommand),
  de_UpdateGlobalTableCommand: () => (/* binding */ de_UpdateGlobalTableCommand),
  de_UpdateGlobalTableSettingsCommand: () => (/* binding */ de_UpdateGlobalTableSettingsCommand),
  de_UpdateItemCommand: () => (/* binding */ de_UpdateItemCommand),
  de_UpdateKinesisStreamingDestinationCommand: () => (/* binding */ de_UpdateKinesisStreamingDestinationCommand),
  de_UpdateTableCommand: () => (/* binding */ de_UpdateTableCommand),
  de_UpdateTableReplicaAutoScalingCommand: () => (/* binding */ de_UpdateTableReplicaAutoScalingCommand),
  de_UpdateTimeToLiveCommand: () => (/* binding */ de_UpdateTimeToLiveCommand),
  se_BatchExecuteStatementCommand: () => (/* binding */ se_BatchExecuteStatementCommand),
  se_BatchGetItemCommand: () => (/* binding */ se_BatchGetItemCommand),
  se_BatchWriteItemCommand: () => (/* binding */ se_BatchWriteItemCommand),
  se_CreateBackupCommand: () => (/* binding */ se_CreateBackupCommand),
  se_CreateGlobalTableCommand: () => (/* binding */ se_CreateGlobalTableCommand),
  se_CreateTableCommand: () => (/* binding */ se_CreateTableCommand),
  se_DeleteBackupCommand: () => (/* binding */ se_DeleteBackupCommand),
  se_DeleteItemCommand: () => (/* binding */ se_DeleteItemCommand),
  se_DeleteResourcePolicyCommand: () => (/* binding */ se_DeleteResourcePolicyCommand),
  se_DeleteTableCommand: () => (/* binding */ se_DeleteTableCommand),
  se_DescribeBackupCommand: () => (/* binding */ se_DescribeBackupCommand),
  se_DescribeContinuousBackupsCommand: () => (/* binding */ se_DescribeContinuousBackupsCommand),
  se_DescribeContributorInsightsCommand: () => (/* binding */ se_DescribeContributorInsightsCommand),
  se_DescribeEndpointsCommand: () => (/* binding */ se_DescribeEndpointsCommand),
  se_DescribeExportCommand: () => (/* binding */ se_DescribeExportCommand),
  se_DescribeGlobalTableCommand: () => (/* binding */ se_DescribeGlobalTableCommand),
  se_DescribeGlobalTableSettingsCommand: () => (/* binding */ se_DescribeGlobalTableSettingsCommand),
  se_DescribeImportCommand: () => (/* binding */ se_DescribeImportCommand),
  se_DescribeKinesisStreamingDestinationCommand: () => (/* binding */ se_DescribeKinesisStreamingDestinationCommand),
  se_DescribeLimitsCommand: () => (/* binding */ se_DescribeLimitsCommand),
  se_DescribeTableCommand: () => (/* binding */ se_DescribeTableCommand),
  se_DescribeTableReplicaAutoScalingCommand: () => (/* binding */ se_DescribeTableReplicaAutoScalingCommand),
  se_DescribeTimeToLiveCommand: () => (/* binding */ se_DescribeTimeToLiveCommand),
  se_DisableKinesisStreamingDestinationCommand: () => (/* binding */ se_DisableKinesisStreamingDestinationCommand),
  se_EnableKinesisStreamingDestinationCommand: () => (/* binding */ se_EnableKinesisStreamingDestinationCommand),
  se_ExecuteStatementCommand: () => (/* binding */ se_ExecuteStatementCommand),
  se_ExecuteTransactionCommand: () => (/* binding */ se_ExecuteTransactionCommand),
  se_ExportTableToPointInTimeCommand: () => (/* binding */ se_ExportTableToPointInTimeCommand),
  se_GetItemCommand: () => (/* binding */ se_GetItemCommand),
  se_GetResourcePolicyCommand: () => (/* binding */ se_GetResourcePolicyCommand),
  se_ImportTableCommand: () => (/* binding */ se_ImportTableCommand),
  se_ListBackupsCommand: () => (/* binding */ se_ListBackupsCommand),
  se_ListContributorInsightsCommand: () => (/* binding */ se_ListContributorInsightsCommand),
  se_ListExportsCommand: () => (/* binding */ se_ListExportsCommand),
  se_ListGlobalTablesCommand: () => (/* binding */ se_ListGlobalTablesCommand),
  se_ListImportsCommand: () => (/* binding */ se_ListImportsCommand),
  se_ListTablesCommand: () => (/* binding */ se_ListTablesCommand),
  se_ListTagsOfResourceCommand: () => (/* binding */ se_ListTagsOfResourceCommand),
  se_PutItemCommand: () => (/* binding */ se_PutItemCommand),
  se_PutResourcePolicyCommand: () => (/* binding */ se_PutResourcePolicyCommand),
  se_QueryCommand: () => (/* binding */ se_QueryCommand),
  se_RestoreTableFromBackupCommand: () => (/* binding */ se_RestoreTableFromBackupCommand),
  se_RestoreTableToPointInTimeCommand: () => (/* binding */ se_RestoreTableToPointInTimeCommand),
  se_ScanCommand: () => (/* binding */ se_ScanCommand),
  se_TagResourceCommand: () => (/* binding */ se_TagResourceCommand),
  se_TransactGetItemsCommand: () => (/* binding */ se_TransactGetItemsCommand),
  se_TransactWriteItemsCommand: () => (/* binding */ se_TransactWriteItemsCommand),
  se_UntagResourceCommand: () => (/* binding */ se_UntagResourceCommand),
  se_UpdateContinuousBackupsCommand: () => (/* binding */ se_UpdateContinuousBackupsCommand),
  se_UpdateContributorInsightsCommand: () => (/* binding */ se_UpdateContributorInsightsCommand),
  se_UpdateGlobalTableCommand: () => (/* binding */ se_UpdateGlobalTableCommand),
  se_UpdateGlobalTableSettingsCommand: () => (/* binding */ se_UpdateGlobalTableSettingsCommand),
  se_UpdateItemCommand: () => (/* binding */ se_UpdateItemCommand),
  se_UpdateKinesisStreamingDestinationCommand: () => (/* binding */ se_UpdateKinesisStreamingDestinationCommand),
  se_UpdateTableCommand: () => (/* binding */ se_UpdateTableCommand),
  se_UpdateTableReplicaAutoScalingCommand: () => (/* binding */ se_UpdateTableReplicaAutoScalingCommand),
  se_UpdateTimeToLiveCommand: () => (/* binding */ se_UpdateTimeToLiveCommand)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody = __webpack_require__(1919);
// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 41 modules
var dist_es = __webpack_require__(9764);
;// ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js

const awsExpectUnion = (value) => {
    if (value == null) {
        return undefined;
    }
    if (typeof value === "object" && "__type" in value) {
        delete value.__type;
    }
    return (0,dist_es.expectUnion)(value);
};

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var protocol_http_dist_es = __webpack_require__(3608);
// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6982);
var external_crypto_default = /*#__PURE__*/__webpack_require__.n(external_crypto_);
;// ./node_modules/@aws-sdk/client-dynamodb/node_modules/uuid/dist/esm-node/native.js

/* harmony default export */ const esm_node_native = ({
  randomUUID: (external_crypto_default()).randomUUID
});
;// ./node_modules/@aws-sdk/client-dynamodb/node_modules/uuid/dist/esm-node/rng.js

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    external_crypto_default().randomFillSync(rnds8Pool);
    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
;// ./node_modules/@aws-sdk/client-dynamodb/node_modules/uuid/dist/esm-node/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);
;// ./node_modules/@aws-sdk/client-dynamodb/node_modules/uuid/dist/esm-node/validate.js


function validate(uuid) {
  return typeof uuid === 'string' && regex.test(uuid);
}

/* harmony default export */ const esm_node_validate = (validate);
;// ./node_modules/@aws-sdk/client-dynamodb/node_modules/uuid/dist/esm-node/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!esm_node_validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_node_stringify = (stringify);
;// ./node_modules/@aws-sdk/client-dynamodb/node_modules/uuid/dist/esm-node/v4.js




function v4(options, buf, offset) {
  if (esm_node_native.randomUUID && !buf && !options) {
    return esm_node_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/* harmony default export */ const esm_node_v4 = (v4);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/models/DynamoDBServiceException.js
var DynamoDBServiceException = __webpack_require__(4007);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/client-dynamodb/dist-es/models/models_0.js
var models_0 = __webpack_require__(8394);
;// ./node_modules/@aws-sdk/client-dynamodb/dist-es/protocols/Aws_json1_0.js






const se_BatchExecuteStatementCommand = async (input, context) => {
    const headers = sharedHeaders("BatchExecuteStatement");
    let body;
    body = JSON.stringify(se_BatchExecuteStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetItemCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetItem");
    let body;
    body = JSON.stringify(se_BatchGetItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchWriteItemCommand = async (input, context) => {
    const headers = sharedHeaders("BatchWriteItem");
    let body;
    body = JSON.stringify(se_BatchWriteItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateBackupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBackup");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateGlobalTableCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGlobalTable");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTableCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTable");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteBackupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBackup");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteItemCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteItem");
    let body;
    body = JSON.stringify(se_DeleteItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTableCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTable");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeBackupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBackup");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeContinuousBackupsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeContinuousBackups");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeContributorInsightsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeContributorInsights");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpoints");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeExportCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExport");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeGlobalTableCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGlobalTable");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeGlobalTableSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGlobalTableSettings");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImportCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImport");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeKinesisStreamingDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeKinesisStreamingDestination");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLimitsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLimits");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTableCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTable");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTableReplicaAutoScalingCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTableReplicaAutoScaling");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTimeToLiveCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTimeToLive");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableKinesisStreamingDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("DisableKinesisStreamingDestination");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableKinesisStreamingDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("EnableKinesisStreamingDestination");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExecuteStatementCommand = async (input, context) => {
    const headers = sharedHeaders("ExecuteStatement");
    let body;
    body = JSON.stringify(se_ExecuteStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExecuteTransactionCommand = async (input, context) => {
    const headers = sharedHeaders("ExecuteTransaction");
    let body;
    body = JSON.stringify(se_ExecuteTransactionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExportTableToPointInTimeCommand = async (input, context) => {
    const headers = sharedHeaders("ExportTableToPointInTime");
    let body;
    body = JSON.stringify(se_ExportTableToPointInTimeInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetItemCommand = async (input, context) => {
    const headers = sharedHeaders("GetItem");
    let body;
    body = JSON.stringify(se_GetItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportTableCommand = async (input, context) => {
    const headers = sharedHeaders("ImportTable");
    let body;
    body = JSON.stringify(se_ImportTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListBackupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBackups");
    let body;
    body = JSON.stringify(se_ListBackupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListContributorInsightsCommand = async (input, context) => {
    const headers = sharedHeaders("ListContributorInsights");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListExportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListExports");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGlobalTablesCommand = async (input, context) => {
    const headers = sharedHeaders("ListGlobalTables");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListImportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListImports");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTablesCommand = async (input, context) => {
    const headers = sharedHeaders("ListTables");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsOfResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsOfResource");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutItemCommand = async (input, context) => {
    const headers = sharedHeaders("PutItem");
    let body;
    body = JSON.stringify(se_PutItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_QueryCommand = async (input, context) => {
    const headers = sharedHeaders("Query");
    let body;
    body = JSON.stringify(se_QueryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RestoreTableFromBackupCommand = async (input, context) => {
    const headers = sharedHeaders("RestoreTableFromBackup");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RestoreTableToPointInTimeCommand = async (input, context) => {
    const headers = sharedHeaders("RestoreTableToPointInTime");
    let body;
    body = JSON.stringify(se_RestoreTableToPointInTimeInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ScanCommand = async (input, context) => {
    const headers = sharedHeaders("Scan");
    let body;
    body = JSON.stringify(se_ScanInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TransactGetItemsCommand = async (input, context) => {
    const headers = sharedHeaders("TransactGetItems");
    let body;
    body = JSON.stringify(se_TransactGetItemsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TransactWriteItemsCommand = async (input, context) => {
    const headers = sharedHeaders("TransactWriteItems");
    let body;
    body = JSON.stringify(se_TransactWriteItemsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateContinuousBackupsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContinuousBackups");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateContributorInsightsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContributorInsights");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateGlobalTableCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGlobalTable");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateGlobalTableSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGlobalTableSettings");
    let body;
    body = JSON.stringify(se_UpdateGlobalTableSettingsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateItemCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateItem");
    let body;
    body = JSON.stringify(se_UpdateItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateKinesisStreamingDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateKinesisStreamingDestination");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTableCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTable");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTableReplicaAutoScalingCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTableReplicaAutoScaling");
    let body;
    body = JSON.stringify(se_UpdateTableReplicaAutoScalingInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTimeToLiveCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTimeToLive");
    let body;
    body = JSON.stringify((0,dist_es._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_BatchExecuteStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_BatchExecuteStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_BatchGetItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchWriteItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_BatchWriteItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateBackupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateGlobalTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateGlobalTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_CreateTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteBackupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DeleteBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DeleteItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DeleteTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeBackupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeContinuousBackupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeContinuousBackupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeContributorInsightsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeContributorInsightsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeExportOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeGlobalTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeGlobalTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeGlobalTableSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeGlobalTableSettingsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeImportOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeKinesisStreamingDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTableReplicaAutoScalingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeTableReplicaAutoScalingOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTimeToLiveCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableKinesisStreamingDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableKinesisStreamingDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExecuteStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ExecuteStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExecuteTransactionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ExecuteTransactionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportTableToPointInTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ExportTableToPointInTimeOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ImportTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListBackupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListBackupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListContributorInsightsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListExportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGlobalTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListImportsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsOfResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_PutItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_QueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_QueryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreTableFromBackupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_RestoreTableFromBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreTableToPointInTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_RestoreTableToPointInTimeOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ScanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ScanOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TransactGetItemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_TransactGetItemsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TransactWriteItemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_TransactWriteItemsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await (0,dist_es.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateContinuousBackupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateContinuousBackupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateContributorInsightsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateGlobalTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateGlobalTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateGlobalTableSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateGlobalTableSettingsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateItemCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateKinesisStreamingDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTableReplicaAutoScalingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_UpdateTableReplicaAutoScalingOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTimeToLiveCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await (0,parseJsonBody.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0,dist_es._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await (0,parseJsonBody.parseJsonErrorBody)(output.body, context),
    };
    const errorCode = (0,parseJsonBody.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
            throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ReplicatedWriteConflictException":
        case "com.amazonaws.dynamodb#ReplicatedWriteConflictException":
            throw await de_ReplicatedWriteConflictExceptionRes(parsedOutput, context);
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
            throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
            throw await de_ContinuousBackupsUnavailableExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
            throw await de_TableInUseExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        case "GlobalTableAlreadyExistsException":
        case "com.amazonaws.dynamodb#GlobalTableAlreadyExistsException":
            throw await de_GlobalTableAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
            throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
            throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
            throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.dynamodb#PolicyNotFoundException":
            throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "ExportNotFoundException":
        case "com.amazonaws.dynamodb#ExportNotFoundException":
            throw await de_ExportNotFoundExceptionRes(parsedOutput, context);
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
            throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "ImportNotFoundException":
        case "com.amazonaws.dynamodb#ImportNotFoundException":
            throw await de_ImportNotFoundExceptionRes(parsedOutput, context);
        case "DuplicateItemException":
        case "com.amazonaws.dynamodb#DuplicateItemException":
            throw await de_DuplicateItemExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
            throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
            throw await de_TransactionInProgressExceptionRes(parsedOutput, context);
        case "ExportConflictException":
        case "com.amazonaws.dynamodb#ExportConflictException":
            throw await de_ExportConflictExceptionRes(parsedOutput, context);
        case "InvalidExportTimeException":
        case "com.amazonaws.dynamodb#InvalidExportTimeException":
            throw await de_InvalidExportTimeExceptionRes(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
            throw await de_PointInTimeRecoveryUnavailableExceptionRes(parsedOutput, context);
        case "ImportConflictException":
        case "com.amazonaws.dynamodb#ImportConflictException":
            throw await de_ImportConflictExceptionRes(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
            throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidRestoreTimeException":
        case "com.amazonaws.dynamodb#InvalidRestoreTimeException":
            throw await de_InvalidRestoreTimeExceptionRes(parsedOutput, context);
        case "ReplicaAlreadyExistsException":
        case "com.amazonaws.dynamodb#ReplicaAlreadyExistsException":
            throw await de_ReplicaAlreadyExistsExceptionRes(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
            throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case "IndexNotFoundException":
        case "com.amazonaws.dynamodb#IndexNotFoundException":
            throw await de_IndexNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BackupInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.BackupInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_BackupNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.BackupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ConditionalCheckFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConditionalCheckFailedException(body, context);
    const exception = new models_0.ConditionalCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ContinuousBackupsUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_DuplicateItemExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.DuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ExportConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ExportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ExportNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ExportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_GlobalTableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_GlobalTableNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.GlobalTableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ImportConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ImportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ImportNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ImportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_IndexNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.IndexNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_InvalidEndpointExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_InvalidExportTimeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.InvalidExportTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_InvalidRestoreTimeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.InvalidRestoreTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ItemCollectionSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ItemCollectionSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_PointInTimeRecoveryUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_PolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.PolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ProvisionedThroughputExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ReplicaAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ReplicaNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ReplicaNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ReplicatedWriteConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ReplicatedWriteConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_RequestLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_TableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.TableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_TableInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.TableInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_TableNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.TableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_TransactionCanceledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TransactionCanceledException(body, context);
    const exception = new models_0.TransactionCanceledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_TransactionConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.TransactionConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const de_TransactionInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0,dist_es._json)(body);
    const exception = new models_0.TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,dist_es.decorateServiceException)(exception, body);
};
const se_AttributeUpdates = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AttributeValueUpdate(value, context);
        return acc;
    }, {});
};
const se_AttributeValue = (input, context) => {
    return models_0.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: se_BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: se_ListAttributeValue(value, context) }),
        M: (value) => ({ M: se_MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: (0,dist_es._json)(value) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: (0,dist_es._json)(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_AttributeValueList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AttributeValue(entry, context);
    });
};
const se_AttributeValueUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        Action: [],
        Value: (_) => se_AttributeValue(_, context),
    });
};
const se_AutoScalingPolicyUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        PolicyName: [],
        TargetTrackingScalingPolicyConfiguration: (_) => se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(_, context),
    });
};
const se_AutoScalingSettingsUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        AutoScalingDisabled: [],
        AutoScalingRoleArn: [],
        MaximumUnits: [],
        MinimumUnits: [],
        ScalingPolicyUpdate: (_) => se_AutoScalingPolicyUpdate(_, context),
    });
};
const se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        DisableScaleIn: [],
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: dist_es.serializeFloat,
    });
};
const se_BatchExecuteStatementInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ReturnConsumedCapacity: [],
        Statements: (_) => se_PartiQLBatchRequest(_, context),
    });
};
const se_BatchGetItemInput = (input, context) => {
    return (0,dist_es.take)(input, {
        RequestItems: (_) => se_BatchGetRequestMap(_, context),
        ReturnConsumedCapacity: [],
    });
};
const se_BatchGetRequestMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_KeysAndAttributes(value, context);
        return acc;
    }, {});
};
const se_BatchStatementRequest = (input, context) => {
    return (0,dist_es.take)(input, {
        ConsistentRead: [],
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: [],
    });
};
const se_BatchWriteItemInput = (input, context) => {
    return (0,dist_es.take)(input, {
        RequestItems: (_) => se_BatchWriteItemRequestMap(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
    });
};
const se_BatchWriteItemRequestMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_WriteRequests(value, context);
        return acc;
    }, {});
};
const se_BinarySetAttributeValue = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return context.base64Encoder(entry);
    });
};
const se_Condition = (input, context) => {
    return (0,dist_es.take)(input, {
        AttributeValueList: (_) => se_AttributeValueList(_, context),
        ComparisonOperator: [],
    });
};
const se_ConditionCheck = (input, context) => {
    return (0,dist_es.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
    });
};
const se_Delete = (input, context) => {
    return (0,dist_es.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
    });
};
const se_DeleteItemInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
    });
};
const se_DeleteRequest = (input, context) => {
    return (0,dist_es.take)(input, {
        Key: (_) => se_Key(_, context),
    });
};
const se_ExecuteStatementInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ConsistentRead: [],
        Limit: [],
        NextToken: [],
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnConsumedCapacity: [],
        ReturnValuesOnConditionCheckFailure: [],
        Statement: [],
    });
};
const se_ExecuteTransactionInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? esm_node_v4()],
        ReturnConsumedCapacity: [],
        TransactStatements: (_) => se_ParameterizedStatements(_, context),
    });
};
const se_ExpectedAttributeMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ExpectedAttributeValue(value, context);
        return acc;
    }, {});
};
const se_ExpectedAttributeValue = (input, context) => {
    return (0,dist_es.take)(input, {
        AttributeValueList: (_) => se_AttributeValueList(_, context),
        ComparisonOperator: [],
        Exists: [],
        Value: (_) => se_AttributeValue(_, context),
    });
};
const se_ExportTableToPointInTimeInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ClientToken: [true, (_) => _ ?? esm_node_v4()],
        ExportFormat: [],
        ExportTime: (_) => _.getTime() / 1_000,
        ExportType: [],
        IncrementalExportSpecification: (_) => se_IncrementalExportSpecification(_, context),
        S3Bucket: [],
        S3BucketOwner: [],
        S3Prefix: [],
        S3SseAlgorithm: [],
        S3SseKmsKeyId: [],
        TableArn: [],
    });
};
const se_ExpressionAttributeValueMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
    }, {});
};
const se_FilterConditionMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
    }, {});
};
const se_Get = (input, context) => {
    return (0,dist_es.take)(input, {
        ExpressionAttributeNames: dist_es._json,
        Key: (_) => se_Key(_, context),
        ProjectionExpression: [],
        TableName: [],
    });
};
const se_GetItemInput = (input, context) => {
    return (0,dist_es.take)(input, {
        AttributesToGet: dist_es._json,
        ConsistentRead: [],
        ExpressionAttributeNames: dist_es._json,
        Key: (_) => se_Key(_, context),
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        TableName: [],
    });
};
const se_GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
    });
};
const se_GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_GlobalSecondaryIndexAutoScalingUpdate(entry, context);
    });
};
const se_GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ProvisionedWriteCapacityUnits: [],
    });
};
const se_GlobalTableGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
    });
};
const se_ImportTableInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ClientToken: [true, (_) => _ ?? esm_node_v4()],
        InputCompressionType: [],
        InputFormat: [],
        InputFormatOptions: dist_es._json,
        S3BucketSource: dist_es._json,
        TableCreationParameters: dist_es._json,
    });
};
const se_IncrementalExportSpecification = (input, context) => {
    return (0,dist_es.take)(input, {
        ExportFromTime: (_) => _.getTime() / 1_000,
        ExportToTime: (_) => _.getTime() / 1_000,
        ExportViewType: [],
    });
};
const se_Key = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
    }, {});
};
const se_KeyConditions = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
    }, {});
};
const se_KeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Key(entry, context);
    });
};
const se_KeysAndAttributes = (input, context) => {
    return (0,dist_es.take)(input, {
        AttributesToGet: dist_es._json,
        ConsistentRead: [],
        ExpressionAttributeNames: dist_es._json,
        Keys: (_) => se_KeyList(_, context),
        ProjectionExpression: [],
    });
};
const se_ListAttributeValue = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AttributeValue(entry, context);
    });
};
const se_ListBackupsInput = (input, context) => {
    return (0,dist_es.take)(input, {
        BackupType: [],
        ExclusiveStartBackupArn: [],
        Limit: [],
        TableName: [],
        TimeRangeLowerBound: (_) => _.getTime() / 1_000,
        TimeRangeUpperBound: (_) => _.getTime() / 1_000,
    });
};
const se_MapAttributeValue = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
    }, {});
};
const se_ParameterizedStatement = (input, context) => {
    return (0,dist_es.take)(input, {
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: [],
    });
};
const se_ParameterizedStatements = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ParameterizedStatement(entry, context);
    });
};
const se_PartiQLBatchRequest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_BatchStatementRequest(entry, context);
    });
};
const se_PreparedStatementParameters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AttributeValue(entry, context);
    });
};
const se_Put = (input, context) => {
    return (0,dist_es.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Item: (_) => se_PutItemInputAttributeMap(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
    });
};
const se_PutItemInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Item: (_) => se_PutItemInputAttributeMap(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
    });
};
const se_PutItemInputAttributeMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
    }, {});
};
const se_PutRequest = (input, context) => {
    return (0,dist_es.take)(input, {
        Item: (_) => se_PutItemInputAttributeMap(_, context),
    });
};
const se_QueryInput = (input, context) => {
    return (0,dist_es.take)(input, {
        AttributesToGet: dist_es._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_) => se_Key(_, context),
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        FilterExpression: [],
        IndexName: [],
        KeyConditionExpression: [],
        KeyConditions: (_) => se_KeyConditions(_, context),
        Limit: [],
        ProjectionExpression: [],
        QueryFilter: (_) => se_FilterConditionMap(_, context),
        ReturnConsumedCapacity: [],
        ScanIndexForward: [],
        Select: [],
        TableName: [],
    });
};
const se_ReplicaAutoScalingUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexUpdates: (_) => se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
    });
};
const se_ReplicaAutoScalingUpdateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ReplicaAutoScalingUpdate(entry, context);
    });
};
const se_ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
    });
};
const se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
    });
};
const se_ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ProvisionedReadCapacityUnits: [],
    });
};
const se_ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
    });
};
const se_ReplicaSettingsUpdate = (input, context) => {
    return (0,dist_es.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexSettingsUpdate: (_) => se_ReplicaGlobalSecondaryIndexSettingsUpdateList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ReplicaProvisionedReadCapacityUnits: [],
        ReplicaTableClass: [],
    });
};
const se_ReplicaSettingsUpdateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ReplicaSettingsUpdate(entry, context);
    });
};
const se_RestoreTableToPointInTimeInput = (input, context) => {
    return (0,dist_es.take)(input, {
        BillingModeOverride: [],
        GlobalSecondaryIndexOverride: dist_es._json,
        LocalSecondaryIndexOverride: dist_es._json,
        OnDemandThroughputOverride: dist_es._json,
        ProvisionedThroughputOverride: dist_es._json,
        RestoreDateTime: (_) => _.getTime() / 1_000,
        SSESpecificationOverride: dist_es._json,
        SourceTableArn: [],
        SourceTableName: [],
        TargetTableName: [],
        UseLatestRestorableTime: [],
    });
};
const se_ScanInput = (input, context) => {
    return (0,dist_es.take)(input, {
        AttributesToGet: dist_es._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_) => se_Key(_, context),
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        FilterExpression: [],
        IndexName: [],
        Limit: [],
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        ScanFilter: (_) => se_FilterConditionMap(_, context),
        Segment: [],
        Select: [],
        TableName: [],
        TotalSegments: [],
    });
};
const se_TransactGetItem = (input, context) => {
    return (0,dist_es.take)(input, {
        Get: (_) => se_Get(_, context),
    });
};
const se_TransactGetItemList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TransactGetItem(entry, context);
    });
};
const se_TransactGetItemsInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ReturnConsumedCapacity: [],
        TransactItems: (_) => se_TransactGetItemList(_, context),
    });
};
const se_TransactWriteItem = (input, context) => {
    return (0,dist_es.take)(input, {
        ConditionCheck: (_) => se_ConditionCheck(_, context),
        Delete: (_) => se_Delete(_, context),
        Put: (_) => se_Put(_, context),
        Update: (_) => se_Update(_, context),
    });
};
const se_TransactWriteItemList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TransactWriteItem(entry, context);
    });
};
const se_TransactWriteItemsInput = (input, context) => {
    return (0,dist_es.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? esm_node_v4()],
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        TransactItems: (_) => se_TransactWriteItemList(_, context),
    });
};
const se_Update = (input, context) => {
    return (0,dist_es.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: [],
    });
};
const se_UpdateGlobalTableSettingsInput = (input, context) => {
    return (0,dist_es.take)(input, {
        GlobalTableBillingMode: [],
        GlobalTableGlobalSecondaryIndexSettingsUpdate: (_) => se_GlobalTableGlobalSecondaryIndexSettingsUpdateList(_, context),
        GlobalTableName: [],
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        GlobalTableProvisionedWriteCapacityUnits: [],
        ReplicaSettingsUpdate: (_) => se_ReplicaSettingsUpdateList(_, context),
    });
};
const se_UpdateItemInput = (input, context) => {
    return (0,dist_es.take)(input, {
        AttributeUpdates: (_) => se_AttributeUpdates(_, context),
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: dist_es._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: [],
    });
};
const se_UpdateTableReplicaAutoScalingInput = (input, context) => {
    return (0,dist_es.take)(input, {
        GlobalSecondaryIndexUpdates: (_) => se_GlobalSecondaryIndexAutoScalingUpdateList(_, context),
        ProvisionedWriteCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ReplicaUpdates: (_) => se_ReplicaAutoScalingUpdateList(_, context),
        TableName: [],
    });
};
const se_WriteRequest = (input, context) => {
    return (0,dist_es.take)(input, {
        DeleteRequest: (_) => se_DeleteRequest(_, context),
        PutRequest: (_) => se_PutRequest(_, context),
    });
};
const se_WriteRequests = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_WriteRequest(entry, context);
    });
};
const de_ArchivalSummary = (output, context) => {
    return (0,dist_es.take)(output, {
        ArchivalBackupArn: dist_es.expectString,
        ArchivalDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ArchivalReason: dist_es.expectString,
    });
};
const de_AttributeMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue(awsExpectUnion(value), context);
        return acc;
    }, {});
};
const de_AttributeValue = (output, context) => {
    if (output.B != null) {
        return {
            B: context.base64Decoder(output.B),
        };
    }
    if ((0,dist_es.expectBoolean)(output.BOOL) !== undefined) {
        return { BOOL: (0,dist_es.expectBoolean)(output.BOOL) };
    }
    if (output.BS != null) {
        return {
            BS: de_BinarySetAttributeValue(output.BS, context),
        };
    }
    if (output.L != null) {
        return {
            L: de_ListAttributeValue(output.L, context),
        };
    }
    if (output.M != null) {
        return {
            M: de_MapAttributeValue(output.M, context),
        };
    }
    if ((0,dist_es.expectString)(output.N) !== undefined) {
        return { N: (0,dist_es.expectString)(output.N) };
    }
    if (output.NS != null) {
        return {
            NS: (0,dist_es._json)(output.NS),
        };
    }
    if ((0,dist_es.expectBoolean)(output.NULL) !== undefined) {
        return { NULL: (0,dist_es.expectBoolean)(output.NULL) };
    }
    if ((0,dist_es.expectString)(output.S) !== undefined) {
        return { S: (0,dist_es.expectString)(output.S) };
    }
    if (output.SS != null) {
        return {
            SS: (0,dist_es._json)(output.SS),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_AutoScalingPolicyDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        PolicyName: dist_es.expectString,
        TargetTrackingScalingPolicyConfiguration: (_) => de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(_, context),
    });
};
const de_AutoScalingPolicyDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoScalingPolicyDescription(entry, context);
    });
    return retVal;
};
const de_AutoScalingSettingsDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        AutoScalingDisabled: dist_es.expectBoolean,
        AutoScalingRoleArn: dist_es.expectString,
        MaximumUnits: dist_es.expectLong,
        MinimumUnits: dist_es.expectLong,
        ScalingPolicies: (_) => de_AutoScalingPolicyDescriptionList(_, context),
    });
};
const de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        DisableScaleIn: dist_es.expectBoolean,
        ScaleInCooldown: dist_es.expectInt32,
        ScaleOutCooldown: dist_es.expectInt32,
        TargetValue: dist_es.limitedParseDouble,
    });
};
const de_BackupDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        BackupDetails: (_) => de_BackupDetails(_, context),
        SourceTableDetails: (_) => de_SourceTableDetails(_, context),
        SourceTableFeatureDetails: (_) => de_SourceTableFeatureDetails(_, context),
    });
};
const de_BackupDetails = (output, context) => {
    return (0,dist_es.take)(output, {
        BackupArn: dist_es.expectString,
        BackupCreationDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        BackupExpiryDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        BackupName: dist_es.expectString,
        BackupSizeBytes: dist_es.expectLong,
        BackupStatus: dist_es.expectString,
        BackupType: dist_es.expectString,
    });
};
const de_BackupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackupSummary(entry, context);
    });
    return retVal;
};
const de_BackupSummary = (output, context) => {
    return (0,dist_es.take)(output, {
        BackupArn: dist_es.expectString,
        BackupCreationDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        BackupExpiryDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        BackupName: dist_es.expectString,
        BackupSizeBytes: dist_es.expectLong,
        BackupStatus: dist_es.expectString,
        BackupType: dist_es.expectString,
        TableArn: dist_es.expectString,
        TableId: dist_es.expectString,
        TableName: dist_es.expectString,
    });
};
const de_BatchExecuteStatementOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_PartiQLBatchResponse(_, context),
    });
};
const de_BatchGetItemOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_BatchGetResponseMap(_, context),
        UnprocessedKeys: (_) => de_BatchGetRequestMap(_, context),
    });
};
const de_BatchGetRequestMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_KeysAndAttributes(value, context);
        return acc;
    }, {});
};
const de_BatchGetResponseMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ItemList(value, context);
        return acc;
    }, {});
};
const de_BatchStatementError = (output, context) => {
    return (0,dist_es.take)(output, {
        Code: dist_es.expectString,
        Item: (_) => de_AttributeMap(_, context),
        Message: dist_es.expectString,
    });
};
const de_BatchStatementResponse = (output, context) => {
    return (0,dist_es.take)(output, {
        Error: (_) => de_BatchStatementError(_, context),
        Item: (_) => de_AttributeMap(_, context),
        TableName: dist_es.expectString,
    });
};
const de_BatchWriteItemOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetricsPerTable(_, context),
        UnprocessedItems: (_) => de_BatchWriteItemRequestMap(_, context),
    });
};
const de_BatchWriteItemRequestMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_WriteRequests(value, context);
        return acc;
    }, {});
};
const de_BillingModeSummary = (output, context) => {
    return (0,dist_es.take)(output, {
        BillingMode: dist_es.expectString,
        LastUpdateToPayPerRequestDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
    });
};
const de_BinarySetAttributeValue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return context.base64Decoder(entry);
    });
    return retVal;
};
const de_CancellationReason = (output, context) => {
    return (0,dist_es.take)(output, {
        Code: dist_es.expectString,
        Item: (_) => de_AttributeMap(_, context),
        Message: dist_es.expectString,
    });
};
const de_CancellationReasonList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CancellationReason(entry, context);
    });
    return retVal;
};
const de_Capacity = (output, context) => {
    return (0,dist_es.take)(output, {
        CapacityUnits: dist_es.limitedParseDouble,
        ReadCapacityUnits: dist_es.limitedParseDouble,
        WriteCapacityUnits: dist_es.limitedParseDouble,
    });
};
const de_ConditionalCheckFailedException = (output, context) => {
    return (0,dist_es.take)(output, {
        Item: (_) => de_AttributeMap(_, context),
        message: dist_es.expectString,
    });
};
const de_ConsumedCapacity = (output, context) => {
    return (0,dist_es.take)(output, {
        CapacityUnits: dist_es.limitedParseDouble,
        GlobalSecondaryIndexes: (_) => de_SecondaryIndexesCapacityMap(_, context),
        LocalSecondaryIndexes: (_) => de_SecondaryIndexesCapacityMap(_, context),
        ReadCapacityUnits: dist_es.limitedParseDouble,
        Table: (_) => de_Capacity(_, context),
        TableName: dist_es.expectString,
        WriteCapacityUnits: dist_es.limitedParseDouble,
    });
};
const de_ConsumedCapacityMultiple = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConsumedCapacity(entry, context);
    });
    return retVal;
};
const de_ContinuousBackupsDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        ContinuousBackupsStatus: dist_es.expectString,
        PointInTimeRecoveryDescription: (_) => de_PointInTimeRecoveryDescription(_, context),
    });
};
const de_CreateBackupOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        BackupDetails: (_) => de_BackupDetails(_, context),
    });
};
const de_CreateGlobalTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context),
    });
};
const de_CreateTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context),
    });
};
const de_DeleteBackupOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        BackupDescription: (_) => de_BackupDescription(_, context),
    });
};
const de_DeleteItemOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context),
    });
};
const de_DeleteRequest = (output, context) => {
    return (0,dist_es.take)(output, {
        Key: (_) => de_Key(_, context),
    });
};
const de_DeleteTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context),
    });
};
const de_DescribeBackupOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        BackupDescription: (_) => de_BackupDescription(_, context),
    });
};
const de_DescribeContinuousBackupsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ContinuousBackupsDescription: (_) => de_ContinuousBackupsDescription(_, context),
    });
};
const de_DescribeContributorInsightsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ContributorInsightsRuleList: dist_es._json,
        ContributorInsightsStatus: dist_es.expectString,
        FailureException: dist_es._json,
        IndexName: dist_es.expectString,
        LastUpdateDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        TableName: dist_es.expectString,
    });
};
const de_DescribeExportOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ExportDescription: (_) => de_ExportDescription(_, context),
    });
};
const de_DescribeGlobalTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context),
    });
};
const de_DescribeGlobalTableSettingsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalTableName: dist_es.expectString,
        ReplicaSettings: (_) => de_ReplicaSettingsDescriptionList(_, context),
    });
};
const de_DescribeImportOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ImportTableDescription: (_) => de_ImportTableDescription(_, context),
    });
};
const de_DescribeTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        Table: (_) => de_TableDescription(_, context),
    });
};
const de_DescribeTableReplicaAutoScalingOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        TableAutoScalingDescription: (_) => de_TableAutoScalingDescription(_, context),
    });
};
const de_ExecuteStatementOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        NextToken: dist_es.expectString,
    });
};
const de_ExecuteTransactionOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_ItemResponseList(_, context),
    });
};
const de_ExportDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        BilledSizeBytes: dist_es.expectLong,
        ClientToken: dist_es.expectString,
        EndTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ExportArn: dist_es.expectString,
        ExportFormat: dist_es.expectString,
        ExportManifest: dist_es.expectString,
        ExportStatus: dist_es.expectString,
        ExportTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ExportType: dist_es.expectString,
        FailureCode: dist_es.expectString,
        FailureMessage: dist_es.expectString,
        IncrementalExportSpecification: (_) => de_IncrementalExportSpecification(_, context),
        ItemCount: dist_es.expectLong,
        S3Bucket: dist_es.expectString,
        S3BucketOwner: dist_es.expectString,
        S3Prefix: dist_es.expectString,
        S3SseAlgorithm: dist_es.expectString,
        S3SseKmsKeyId: dist_es.expectString,
        StartTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        TableArn: dist_es.expectString,
        TableId: dist_es.expectString,
    });
};
const de_ExportTableToPointInTimeOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ExportDescription: (_) => de_ExportDescription(_, context),
    });
};
const de_GetItemOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Item: (_) => de_AttributeMap(_, context),
    });
};
const de_GlobalSecondaryIndexDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        Backfilling: dist_es.expectBoolean,
        IndexArn: dist_es.expectString,
        IndexName: dist_es.expectString,
        IndexSizeBytes: dist_es.expectLong,
        IndexStatus: dist_es.expectString,
        ItemCount: dist_es.expectLong,
        KeySchema: dist_es._json,
        OnDemandThroughput: dist_es._json,
        Projection: dist_es._json,
        ProvisionedThroughput: (_) => de_ProvisionedThroughputDescription(_, context),
        WarmThroughput: dist_es._json,
    });
};
const de_GlobalSecondaryIndexDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GlobalSecondaryIndexDescription(entry, context);
    });
    return retVal;
};
const de_GlobalTableDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        CreationDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        GlobalTableArn: dist_es.expectString,
        GlobalTableName: dist_es.expectString,
        GlobalTableStatus: dist_es.expectString,
        ReplicationGroup: (_) => de_ReplicaDescriptionList(_, context),
    });
};
const de_ImportSummary = (output, context) => {
    return (0,dist_es.take)(output, {
        CloudWatchLogGroupArn: dist_es.expectString,
        EndTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ImportArn: dist_es.expectString,
        ImportStatus: dist_es.expectString,
        InputFormat: dist_es.expectString,
        S3BucketSource: dist_es._json,
        StartTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        TableArn: dist_es.expectString,
    });
};
const de_ImportSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportSummary(entry, context);
    });
    return retVal;
};
const de_ImportTableDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        ClientToken: dist_es.expectString,
        CloudWatchLogGroupArn: dist_es.expectString,
        EndTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ErrorCount: dist_es.expectLong,
        FailureCode: dist_es.expectString,
        FailureMessage: dist_es.expectString,
        ImportArn: dist_es.expectString,
        ImportStatus: dist_es.expectString,
        ImportedItemCount: dist_es.expectLong,
        InputCompressionType: dist_es.expectString,
        InputFormat: dist_es.expectString,
        InputFormatOptions: dist_es._json,
        ProcessedItemCount: dist_es.expectLong,
        ProcessedSizeBytes: dist_es.expectLong,
        S3BucketSource: dist_es._json,
        StartTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        TableArn: dist_es.expectString,
        TableCreationParameters: dist_es._json,
        TableId: dist_es.expectString,
    });
};
const de_ImportTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ImportTableDescription: (_) => de_ImportTableDescription(_, context),
    });
};
const de_IncrementalExportSpecification = (output, context) => {
    return (0,dist_es.take)(output, {
        ExportFromTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ExportToTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ExportViewType: dist_es.expectString,
    });
};
const de_ItemCollectionKeyAttributeMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue(awsExpectUnion(value), context);
        return acc;
    }, {});
};
const de_ItemCollectionMetrics = (output, context) => {
    return (0,dist_es.take)(output, {
        ItemCollectionKey: (_) => de_ItemCollectionKeyAttributeMap(_, context),
        SizeEstimateRangeGB: (_) => de_ItemCollectionSizeEstimateRange(_, context),
    });
};
const de_ItemCollectionMetricsMultiple = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ItemCollectionMetrics(entry, context);
    });
    return retVal;
};
const de_ItemCollectionMetricsPerTable = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ItemCollectionMetricsMultiple(value, context);
        return acc;
    }, {});
};
const de_ItemCollectionSizeEstimateRange = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,dist_es.limitedParseDouble)(entry);
    });
    return retVal;
};
const de_ItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeMap(entry, context);
    });
    return retVal;
};
const de_ItemResponse = (output, context) => {
    return (0,dist_es.take)(output, {
        Item: (_) => de_AttributeMap(_, context),
    });
};
const de_ItemResponseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ItemResponse(entry, context);
    });
    return retVal;
};
const de_Key = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue(awsExpectUnion(value), context);
        return acc;
    }, {});
};
const de_KeyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Key(entry, context);
    });
    return retVal;
};
const de_KeysAndAttributes = (output, context) => {
    return (0,dist_es.take)(output, {
        AttributesToGet: dist_es._json,
        ConsistentRead: dist_es.expectBoolean,
        ExpressionAttributeNames: dist_es._json,
        Keys: (_) => de_KeyList(_, context),
        ProjectionExpression: dist_es.expectString,
    });
};
const de_ListAttributeValue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeValue(awsExpectUnion(entry), context);
    });
    return retVal;
};
const de_ListBackupsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        BackupSummaries: (_) => de_BackupSummaries(_, context),
        LastEvaluatedBackupArn: dist_es.expectString,
    });
};
const de_ListImportsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ImportSummaryList: (_) => de_ImportSummaryList(_, context),
        NextToken: dist_es.expectString,
    });
};
const de_MapAttributeValue = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue(awsExpectUnion(value), context);
        return acc;
    }, {});
};
const de_PartiQLBatchResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchStatementResponse(entry, context);
    });
    return retVal;
};
const de_PointInTimeRecoveryDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        EarliestRestorableDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        LatestRestorableDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        PointInTimeRecoveryStatus: dist_es.expectString,
        RecoveryPeriodInDays: dist_es.expectInt32,
    });
};
const de_ProvisionedThroughputDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        LastDecreaseDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        LastIncreaseDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        NumberOfDecreasesToday: dist_es.expectLong,
        ReadCapacityUnits: dist_es.expectLong,
        WriteCapacityUnits: dist_es.expectLong,
    });
};
const de_PutItemInputAttributeMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue(awsExpectUnion(value), context);
        return acc;
    }, {});
};
const de_PutItemOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context),
    });
};
const de_PutRequest = (output, context) => {
    return (0,dist_es.take)(output, {
        Item: (_) => de_PutItemInputAttributeMap(_, context),
    });
};
const de_QueryOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Count: dist_es.expectInt32,
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        ScannedCount: dist_es.expectInt32,
    });
};
const de_ReplicaAutoScalingDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalSecondaryIndexes: (_) => de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(_, context),
        RegionName: dist_es.expectString,
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaStatus: dist_es.expectString,
    });
};
const de_ReplicaAutoScalingDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicaAutoScalingDescription(entry, context);
    });
    return retVal;
};
const de_ReplicaDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalSecondaryIndexes: dist_es._json,
        KMSMasterKeyId: dist_es.expectString,
        OnDemandThroughputOverride: dist_es._json,
        ProvisionedThroughputOverride: dist_es._json,
        RegionName: dist_es.expectString,
        ReplicaInaccessibleDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        ReplicaStatus: dist_es.expectString,
        ReplicaStatusDescription: dist_es.expectString,
        ReplicaStatusPercentProgress: dist_es.expectString,
        ReplicaTableClassSummary: (_) => de_TableClassSummary(_, context),
        WarmThroughput: dist_es._json,
    });
};
const de_ReplicaDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicaDescription(entry, context);
    });
    return retVal;
};
const de_ReplicaGlobalSecondaryIndexAutoScalingDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        IndexName: dist_es.expectString,
        IndexStatus: dist_es.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
    });
};
const de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
    });
    return retVal;
};
const de_ReplicaGlobalSecondaryIndexSettingsDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        IndexName: dist_es.expectString,
        IndexStatus: dist_es.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedReadCapacityUnits: dist_es.expectLong,
        ProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedWriteCapacityUnits: dist_es.expectLong,
    });
};
const de_ReplicaGlobalSecondaryIndexSettingsDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
    });
    return retVal;
};
const de_ReplicaSettingsDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        RegionName: dist_es.expectString,
        ReplicaBillingModeSummary: (_) => de_BillingModeSummary(_, context),
        ReplicaGlobalSecondaryIndexSettings: (_) => de_ReplicaGlobalSecondaryIndexSettingsDescriptionList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedReadCapacityUnits: dist_es.expectLong,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedWriteCapacityUnits: dist_es.expectLong,
        ReplicaStatus: dist_es.expectString,
        ReplicaTableClassSummary: (_) => de_TableClassSummary(_, context),
    });
};
const de_ReplicaSettingsDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicaSettingsDescription(entry, context);
    });
    return retVal;
};
const de_RestoreSummary = (output, context) => {
    return (0,dist_es.take)(output, {
        RestoreDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        RestoreInProgress: dist_es.expectBoolean,
        SourceBackupArn: dist_es.expectString,
        SourceTableArn: dist_es.expectString,
    });
};
const de_RestoreTableFromBackupOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context),
    });
};
const de_RestoreTableToPointInTimeOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context),
    });
};
const de_ScanOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Count: dist_es.expectInt32,
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        ScannedCount: dist_es.expectInt32,
    });
};
const de_SecondaryIndexesCapacityMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_Capacity(value, context);
        return acc;
    }, {});
};
const de_SourceTableDetails = (output, context) => {
    return (0,dist_es.take)(output, {
        BillingMode: dist_es.expectString,
        ItemCount: dist_es.expectLong,
        KeySchema: dist_es._json,
        OnDemandThroughput: dist_es._json,
        ProvisionedThroughput: dist_es._json,
        TableArn: dist_es.expectString,
        TableCreationDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        TableId: dist_es.expectString,
        TableName: dist_es.expectString,
        TableSizeBytes: dist_es.expectLong,
    });
};
const de_SourceTableFeatureDetails = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalSecondaryIndexes: dist_es._json,
        LocalSecondaryIndexes: dist_es._json,
        SSEDescription: (_) => de_SSEDescription(_, context),
        StreamDescription: dist_es._json,
        TimeToLiveDescription: dist_es._json,
    });
};
const de_SSEDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        InaccessibleEncryptionDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        KMSMasterKeyArn: dist_es.expectString,
        SSEType: dist_es.expectString,
        Status: dist_es.expectString,
    });
};
const de_TableAutoScalingDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        Replicas: (_) => de_ReplicaAutoScalingDescriptionList(_, context),
        TableName: dist_es.expectString,
        TableStatus: dist_es.expectString,
    });
};
const de_TableClassSummary = (output, context) => {
    return (0,dist_es.take)(output, {
        LastUpdateDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        TableClass: dist_es.expectString,
    });
};
const de_TableDescription = (output, context) => {
    return (0,dist_es.take)(output, {
        ArchivalSummary: (_) => de_ArchivalSummary(_, context),
        AttributeDefinitions: dist_es._json,
        BillingModeSummary: (_) => de_BillingModeSummary(_, context),
        CreationDateTime: (_) => (0,dist_es.expectNonNull)((0,dist_es.parseEpochTimestamp)((0,dist_es.expectNumber)(_))),
        DeletionProtectionEnabled: dist_es.expectBoolean,
        GlobalSecondaryIndexes: (_) => de_GlobalSecondaryIndexDescriptionList(_, context),
        GlobalTableVersion: dist_es.expectString,
        GlobalTableWitnesses: dist_es._json,
        ItemCount: dist_es.expectLong,
        KeySchema: dist_es._json,
        LatestStreamArn: dist_es.expectString,
        LatestStreamLabel: dist_es.expectString,
        LocalSecondaryIndexes: dist_es._json,
        MultiRegionConsistency: dist_es.expectString,
        OnDemandThroughput: dist_es._json,
        ProvisionedThroughput: (_) => de_ProvisionedThroughputDescription(_, context),
        Replicas: (_) => de_ReplicaDescriptionList(_, context),
        RestoreSummary: (_) => de_RestoreSummary(_, context),
        SSEDescription: (_) => de_SSEDescription(_, context),
        StreamSpecification: dist_es._json,
        TableArn: dist_es.expectString,
        TableClassSummary: (_) => de_TableClassSummary(_, context),
        TableId: dist_es.expectString,
        TableName: dist_es.expectString,
        TableSizeBytes: dist_es.expectLong,
        TableStatus: dist_es.expectString,
        WarmThroughput: dist_es._json,
    });
};
const de_TransactGetItemsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_ItemResponseList(_, context),
    });
};
const de_TransactionCanceledException = (output, context) => {
    return (0,dist_es.take)(output, {
        CancellationReasons: (_) => de_CancellationReasonList(_, context),
        Message: dist_es.expectString,
    });
};
const de_TransactWriteItemsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetricsPerTable(_, context),
    });
};
const de_UpdateContinuousBackupsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        ContinuousBackupsDescription: (_) => de_ContinuousBackupsDescription(_, context),
    });
};
const de_UpdateGlobalTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context),
    });
};
const de_UpdateGlobalTableSettingsOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        GlobalTableName: dist_es.expectString,
        ReplicaSettings: (_) => de_ReplicaSettingsDescriptionList(_, context),
    });
};
const de_UpdateItemOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context),
    });
};
const de_UpdateTableOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context),
    });
};
const de_UpdateTableReplicaAutoScalingOutput = (output, context) => {
    return (0,dist_es.take)(output, {
        TableAutoScalingDescription: (_) => de_TableAutoScalingDescription(_, context),
    });
};
const de_WriteRequest = (output, context) => {
    return (0,dist_es.take)(output, {
        DeleteRequest: (_) => de_DeleteRequest(_, context),
        PutRequest: (_) => de_PutRequest(_, context),
    });
};
const de_WriteRequests = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WriteRequest(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0,dist_es.withBaseException)(DynamoDBServiceException.DynamoDBServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_dist_es.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `DynamoDB_20120810.${operation}`,
    };
}


/***/ }),

/***/ 6228:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  AWSSDKSigV4Signer: () => (/* binding */ AWSSDKSigV4Signer),
  AwsSdkSigV4Signer: () => (/* binding */ AwsSdkSigV4Signer),
  validateSigningProperties: () => (/* binding */ validateSigningProperties)
});

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var dist_es = __webpack_require__(3608);
;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
const getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js

const getDateHeader = (response) => dist_es.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js

const isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js

const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
    const clockTimeInMs = Date.parse(clockTime);
    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
};

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js


const throwSigningPropertyError = (name, property) => {
    if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
    }
    return property;
};
const validateSigningProperties = async (signingProperties) => {
    const context = throwSigningPropertyError("context", signingProperties.context);
    const config = throwSigningPropertyError("config", signingProperties.config);
    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
    const signerFunction = throwSigningPropertyError("signer", config.signer);
    const signer = await signerFunction(authScheme);
    const signingRegion = signingProperties?.signingRegion;
    const signingRegionSet = signingProperties?.signingRegionSet;
    const signingName = signingProperties?.signingName;
    return {
        config,
        signer,
        signingRegion,
        signingRegionSet,
        signingName,
    };
};
class AwsSdkSigV4Signer {
    async sign(httpRequest, identity, signingProperties) {
        if (!dist_es.HttpRequest.isInstance(httpRequest)) {
            throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties(signingProperties);
        const { config, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
            const [first, second] = handlerExecutionContext.authSchemes;
            if (first?.name === "sigv4a" && second?.name === "sigv4") {
                signingRegion = second?.signingRegion ?? signingRegion;
                signingName = second?.signingName ?? signingName;
            }
        }
        const signedRequest = await signer.sign(httpRequest, {
            signingDate: getSkewCorrectedDate(config.systemClockOffset),
            signingRegion: signingRegion,
            signingService: signingName,
        });
        return signedRequest;
    }
    errorHandler(signingProperties) {
        return (error) => {
            const serverTime = error.ServerTime ?? getDateHeader(error.$response);
            if (serverTime) {
                const config = throwSigningPropertyError("config", signingProperties.config);
                const initialSystemClockOffset = config.systemClockOffset;
                config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
                const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
                if (clockSkewCorrected && error.$metadata) {
                    error.$metadata.clockSkewCorrected = true;
                }
            }
            throw error;
        };
    }
    successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
            const config = throwSigningPropertyError("config", signingProperties.config);
            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
        }
    }
}
const AWSSDKSigV4Signer = AwsSdkSigV4Signer;


/***/ }),

/***/ 6264:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  NODE_REGION_CONFIG_FILE_OPTIONS: () => (/* reexport */ NODE_REGION_CONFIG_FILE_OPTIONS),
  NODE_REGION_CONFIG_OPTIONS: () => (/* reexport */ NODE_REGION_CONFIG_OPTIONS),
  REGION_ENV_NAME: () => (/* reexport */ REGION_ENV_NAME),
  REGION_INI_NAME: () => (/* reexport */ REGION_INI_NAME),
  getAwsRegionExtensionConfiguration: () => (/* reexport */ getAwsRegionExtensionConfiguration),
  resolveAwsRegionExtensionConfiguration: () => (/* reexport */ resolveAwsRegionExtensionConfiguration),
  resolveRegionConfig: () => (/* reexport */ resolveRegionConfig)
});

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js
const getAwsRegionExtensionConfiguration = (runtimeConfig) => {
    return {
        setRegion(region) {
            runtimeConfig.region = region;
        },
        region() {
            return runtimeConfig.region;
        },
    };
};
const resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
    return {
        region: awsRegionExtensionConfiguration.region(),
    };
};

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
        throw new Error("Region is missing");
    },
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials",
};

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/isFipsRegion.js
const isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/getRealRegion.js

const getRealRegion = (region) => isFipsRegion(region)
    ? ["fips-aws-global", "aws-fips"].includes(region)
        ? "us-east-1"
        : region.replace(/fips-(dkr-|prod-)?|-fips/, "")
    : region;

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js


const resolveRegionConfig = (input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
        throw new Error("Region is missing");
    }
    return Object.assign(input, {
        region: async () => {
            if (typeof region === "string") {
                return getRealRegion(region);
            }
            const providedRegion = await region();
            return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
            const providedRegion = typeof region === "string" ? region : await region();
            if (isFipsRegion(providedRegion)) {
                return true;
            }
            return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        },
    });
};

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js



;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/index.js




/***/ }),

/***/ 6827:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  DEFAULT_UA_APP_ID: () => (/* reexport */ DEFAULT_UA_APP_ID),
  getUserAgentMiddlewareOptions: () => (/* reexport */ getUserAgentMiddlewareOptions),
  getUserAgentPlugin: () => (/* reexport */ getUserAgentPlugin),
  resolveUserAgentConfig: () => (/* reexport */ resolveUserAgentConfig),
  userAgentMiddleware: () => (/* reexport */ userAgentMiddleware)
});

// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/normalizeProvider.js
var normalizeProvider = __webpack_require__(4367);
;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js

const DEFAULT_UA_APP_ID = undefined;
function isValidUserAgentAppId(appId) {
    if (appId === undefined) {
        return true;
    }
    return typeof appId === "string" && appId.length <= 50;
}
function resolveUserAgentConfig(input) {
    const normalizedAppIdProvider = (0,normalizeProvider.normalizeProvider)(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
    const { customUserAgent } = input;
    return Object.assign(input, {
        customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
        userAgentAppId: async () => {
            const appId = await normalizedAppIdProvider();
            if (!isValidUserAgentAppId(appId)) {
                const logger = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
                if (typeof appId !== "string") {
                    logger?.warn("userAgentAppId must be a string or undefined.");
                }
                else if (appId.length > 50) {
                    logger?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
                }
            }
            return appId;
        },
    });
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js + 15 modules
var dist_es = __webpack_require__(643);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 7 modules
var protocol_http_dist_es = __webpack_require__(3608);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
var setFeature = __webpack_require__(3415);
;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js

const ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
async function checkFeatures(context, config, args) {
    const request = args.request;
    if (request?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
        (0,setFeature.setFeature)(context, "PROTOCOL_RPC_V2_CBOR", "M");
    }
    if (typeof config.retryStrategy === "function") {
        const retryStrategy = await config.retryStrategy();
        if (typeof retryStrategy.acquireInitialRetryToken === "function") {
            if (retryStrategy.constructor?.name?.includes("Adaptive")) {
                (0,setFeature.setFeature)(context, "RETRY_MODE_ADAPTIVE", "F");
            }
            else {
                (0,setFeature.setFeature)(context, "RETRY_MODE_STANDARD", "E");
            }
        }
        else {
            (0,setFeature.setFeature)(context, "RETRY_MODE_LEGACY", "D");
        }
    }
    if (typeof config.accountIdEndpointMode === "function") {
        const endpointV2 = context.endpointV2;
        if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
            (0,setFeature.setFeature)(context, "ACCOUNT_ID_ENDPOINT", "O");
        }
        switch (await config.accountIdEndpointMode?.()) {
            case "disabled":
                (0,setFeature.setFeature)(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
                break;
            case "preferred":
                (0,setFeature.setFeature)(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
                break;
            case "required":
                (0,setFeature.setFeature)(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
                break;
        }
    }
    const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
    if (identity?.$source) {
        const credentials = identity;
        if (credentials.accountId) {
            (0,setFeature.setFeature)(context, "RESOLVED_ACCOUNT_ID", "T");
        }
        for (const [key, value] of Object.entries(credentials.$source ?? {})) {
            (0,setFeature.setFeature)(context, key, value);
        }
    }
}

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
const USER_AGENT = "user-agent";
const X_AMZ_USER_AGENT = "x-amz-user-agent";
const SPACE = " ";
const UA_NAME_SEPARATOR = "/";
const UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
const UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
const UA_ESCAPE_CHAR = "-";

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js
const BYTE_LIMIT = 1024;
function encodeFeatures(features) {
    let buffer = "";
    for (const key in features) {
        const val = features[key];
        if (buffer.length + val.length + 1 <= BYTE_LIMIT) {
            if (buffer.length) {
                buffer += "," + val;
            }
            else {
                buffer += val;
            }
            continue;
        }
        break;
    }
    return buffer;
}

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js





const userAgentMiddleware = (options) => (next, context) => async (args) => {
    const { request } = args;
    if (!protocol_http_dist_es.HttpRequest.isInstance(request)) {
        return next(args);
    }
    const { headers } = request;
    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
    await checkFeatures(context, options, args);
    const awsContext = context;
    defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
    const appId = await options.userAgentAppId();
    if (appId) {
        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
    }
    const prefix = (0,dist_es.getUserAgentPrefix)();
    const sdkUserAgentValue = (prefix ? [prefix] : [])
        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])
        .join(SPACE);
    const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent,
    ].join(SPACE);
    if (options.runtime !== "browser") {
        if (normalUAValue) {
            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]
                ? `${headers[USER_AGENT]} ${normalUAValue}`
                : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
    }
    else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
    }
    return next({
        ...args,
        request,
    });
};
const escapeUserAgent = (userAgentPair) => {
    const name = userAgentPair[0]
        .split(UA_NAME_SEPARATOR)
        .map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR))
        .join(UA_NAME_SEPARATOR);
    const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
    const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") {
        uaName = uaName.toLowerCase();
    }
    return [prefix, uaName, version]
        .filter((item) => item && item.length > 0)
        .reduce((acc, item, index) => {
        switch (index) {
            case 0:
                return item;
            case 1:
                return `${acc}/${item}`;
            default:
                return `${acc}#${item}`;
        }
    }, "");
};
const getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: ["SET_USER_AGENT", "USER_AGENT"],
    override: true,
};
const getUserAgentPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    },
});

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js




/***/ }),

/***/ 6928:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 6982:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 7016:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 7042:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   ExecuteStatementCommand: () => (/* binding */ ExecuteStatementCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class ExecuteStatementCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep(_endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "ExecuteStatement", {})
    .n("DynamoDBClient", "ExecuteStatementCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_ExecuteStatementCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_ExecuteStatementCommand)
    .build() {
}


/***/ }),

/***/ 7051:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   commonParams: () => (/* binding */ commonParams),
/* harmony export */   resolveClientEndpointParameters: () => (/* binding */ resolveClientEndpointParameters)
/* harmony export */ });
const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "dynamodb",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    AccountId: { type: "builtInParams", name: "accountId" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
    AccountIdEndpointMode: { type: "builtInParams", name: "accountIdEndpointMode" },
};


/***/ }),

/***/ 7135:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  getSmithyContext: () => (/* reexport */ getSmithyContext),
  normalizeProvider: () => (/* reexport */ normalizeProvider)
});

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js

const getSmithyContext = (context) => context[dist_es.SMITHY_CONTEXT_KEY] || (context[dist_es.SMITHY_CONTEXT_KEY] = {});

;// ./node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js
const normalizeProvider = (input) => {
    if (typeof input === "function")
        return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
};

;// ./node_modules/@smithy/util-middleware/dist-es/index.js




/***/ }),

/***/ 7210:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   BatchExecuteStatementCommand: () => (/* binding */ BatchExecuteStatementCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class BatchExecuteStatementCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep(_endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "BatchExecuteStatement", {})
    .n("DynamoDBClient", "BatchExecuteStatementCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_BatchExecuteStatementCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_BatchExecuteStatementCommand)
    .build() {
}


/***/ }),

/***/ 7523:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  AlgorithmId: () => (/* reexport */ AlgorithmId),
  EndpointURLScheme: () => (/* reexport */ EndpointURLScheme),
  FieldPosition: () => (/* reexport */ FieldPosition),
  HttpApiKeyAuthLocation: () => (/* reexport */ HttpApiKeyAuthLocation),
  HttpAuthLocation: () => (/* reexport */ HttpAuthLocation),
  IniSectionType: () => (/* reexport */ IniSectionType),
  RequestHandlerProtocol: () => (/* reexport */ RequestHandlerProtocol),
  SMITHY_CONTEXT_KEY: () => (/* reexport */ SMITHY_CONTEXT_KEY),
  getDefaultClientConfiguration: () => (/* reexport */ getDefaultClientConfiguration),
  resolveDefaultRuntimeConfig: () => (/* reexport */ resolveDefaultRuntimeConfig)
});

;// ./node_modules/@smithy/types/dist-es/auth/auth.js
var HttpAuthLocation;
(function (HttpAuthLocation) {
    HttpAuthLocation["HEADER"] = "header";
    HttpAuthLocation["QUERY"] = "query";
})(HttpAuthLocation || (HttpAuthLocation = {}));

;// ./node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js
var HttpApiKeyAuthLocation;
(function (HttpApiKeyAuthLocation) {
    HttpApiKeyAuthLocation["HEADER"] = "header";
    HttpApiKeyAuthLocation["QUERY"] = "query";
})(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));

;// ./node_modules/@smithy/types/dist-es/auth/index.js







;// ./node_modules/@smithy/types/dist-es/endpoint.js
var EndpointURLScheme;
(function (EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme || (EndpointURLScheme = {}));

;// ./node_modules/@smithy/types/dist-es/extensions/checksum.js
var AlgorithmId;
(function (AlgorithmId) {
    AlgorithmId["MD5"] = "md5";
    AlgorithmId["CRC32"] = "crc32";
    AlgorithmId["CRC32C"] = "crc32c";
    AlgorithmId["SHA1"] = "sha1";
    AlgorithmId["SHA256"] = "sha256";
})(AlgorithmId || (AlgorithmId = {}));
const getChecksumConfiguration = (runtimeConfig) => {
    const checksumAlgorithms = [];
    if (runtimeConfig.sha256 !== undefined) {
        checksumAlgorithms.push({
            algorithmId: () => AlgorithmId.SHA256,
            checksumConstructor: () => runtimeConfig.sha256,
        });
    }
    if (runtimeConfig.md5 != undefined) {
        checksumAlgorithms.push({
            algorithmId: () => AlgorithmId.MD5,
            checksumConstructor: () => runtimeConfig.md5,
        });
    }
    return {
        addChecksumAlgorithm(algo) {
            checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
            return checksumAlgorithms;
        },
    };
};
const resolveChecksumRuntimeConfig = (clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
};

;// ./node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js

const getDefaultClientConfiguration = (runtimeConfig) => {
    return getChecksumConfiguration(runtimeConfig);
};
const resolveDefaultRuntimeConfig = (config) => {
    return resolveChecksumRuntimeConfig(config);
};

;// ./node_modules/@smithy/types/dist-es/extensions/index.js




;// ./node_modules/@smithy/types/dist-es/http.js
var FieldPosition;
(function (FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
})(FieldPosition || (FieldPosition = {}));

;// ./node_modules/@smithy/types/dist-es/middleware.js
const SMITHY_CONTEXT_KEY = "__smithy_context";

;// ./node_modules/@smithy/types/dist-es/profile.js
var IniSectionType;
(function (IniSectionType) {
    IniSectionType["PROFILE"] = "profile";
    IniSectionType["SSO_SESSION"] = "sso-session";
    IniSectionType["SERVICES"] = "services";
})(IniSectionType || (IniSectionType = {}));

;// ./node_modules/@smithy/types/dist-es/transfer.js
var RequestHandlerProtocol;
(function (RequestHandlerProtocol) {
    RequestHandlerProtocol["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol["TDS_8_0"] = "tds/8.0";
})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));

;// ./node_modules/@smithy/types/dist-es/index.js










































/***/ }),

/***/ 7610:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   DeleteItemCommand: () => (/* binding */ DeleteItemCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class DeleteItemCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArn: { type: "contextParams", name: "TableName" },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "DeleteItem", {})
    .n("DynamoDBClient", "DeleteItemCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_DeleteItemCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_DeleteItemCommand)
    .build() {
}


/***/ }),

/***/ 7648:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   TransactGetItemsCommand: () => (/* binding */ TransactGetItemsCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class TransactGetItemsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArnList: {
        type: "operationContextParams",
        get: (input) => input?.TransactItems?.map((obj) => obj?.Get?.TableName),
    },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "TransactGetItems", {})
    .n("DynamoDBClient", "TransactGetItemsCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_TransactGetItemsCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_TransactGetItemsCommand)
    .build() {
}


/***/ }),

/***/ 7735:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  CONFIG_USE_DUALSTACK_ENDPOINT: () => (/* reexport */ CONFIG_USE_DUALSTACK_ENDPOINT),
  CONFIG_USE_FIPS_ENDPOINT: () => (/* reexport */ CONFIG_USE_FIPS_ENDPOINT),
  DEFAULT_USE_DUALSTACK_ENDPOINT: () => (/* reexport */ DEFAULT_USE_DUALSTACK_ENDPOINT),
  DEFAULT_USE_FIPS_ENDPOINT: () => (/* reexport */ DEFAULT_USE_FIPS_ENDPOINT),
  ENV_USE_DUALSTACK_ENDPOINT: () => (/* reexport */ ENV_USE_DUALSTACK_ENDPOINT),
  ENV_USE_FIPS_ENDPOINT: () => (/* reexport */ ENV_USE_FIPS_ENDPOINT),
  NODE_REGION_CONFIG_FILE_OPTIONS: () => (/* reexport */ NODE_REGION_CONFIG_FILE_OPTIONS),
  NODE_REGION_CONFIG_OPTIONS: () => (/* reexport */ NODE_REGION_CONFIG_OPTIONS),
  NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => (/* reexport */ NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
  NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => (/* reexport */ NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
  REGION_ENV_NAME: () => (/* reexport */ REGION_ENV_NAME),
  REGION_INI_NAME: () => (/* reexport */ REGION_INI_NAME),
  getRegionInfo: () => (/* reexport */ getRegionInfo),
  resolveCustomEndpointsConfig: () => (/* reexport */ resolveCustomEndpointsConfig),
  resolveEndpointsConfig: () => (/* reexport */ resolveEndpointsConfig),
  resolveRegionConfig: () => (/* reexport */ resolveRegionConfig)
});

// EXTERNAL MODULE: ./node_modules/@smithy/util-config-provider/dist-es/index.js + 3 modules
var dist_es = __webpack_require__(8230);
;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js

const ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
const CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
const DEFAULT_USE_DUALSTACK_ENDPOINT = false;
const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0,dist_es.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, dist_es.SelectorType.ENV),
    configFileSelector: (profile) => (0,dist_es.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, dist_es.SelectorType.CONFIG),
    default: false,
};

;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js

const ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
const CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
const DEFAULT_USE_FIPS_ENDPOINT = false;
const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0,dist_es.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, dist_es.SelectorType.ENV),
    configFileSelector: (profile) => (0,dist_es.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, dist_es.SelectorType.CONFIG),
    default: false,
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js

const resolveCustomEndpointsConfig = (input) => {
    const { tls, endpoint, urlParser, useDualstackEndpoint } = input;
    return Object.assign(input, {
        tls: tls ?? true,
        endpoint: (0,util_middleware_dist_es.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0,util_middleware_dist_es.normalizeProvider)(useDualstackEndpoint ?? false),
    });
};

;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js
const getEndpointFromRegion = async (input) => {
    const { tls = true } = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
    }
    const useDualstackEndpoint = await input.useDualstackEndpoint();
    const useFipsEndpoint = await input.useFipsEndpoint();
    const { hostname } = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) ?? {};
    if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
    }
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
};

;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js


const resolveEndpointsConfig = (input) => {
    const useDualstackEndpoint = (0,util_middleware_dist_es.normalizeProvider)(input.useDualstackEndpoint ?? false);
    const { endpoint, useFipsEndpoint, urlParser, tls } = input;
    return Object.assign(input, {
        tls: tls ?? true,
        endpoint: endpoint
            ? (0,util_middleware_dist_es.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint)
            : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint,
    });
};

;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js





;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
        throw new Error("Region is missing");
    },
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials",
};

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js
const isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js

const getRealRegion = (region) => isFipsRegion(region)
    ? ["fips-aws-global", "aws-fips"].includes(region)
        ? "us-east-1"
        : region.replace(/fips-(dkr-|prod-)?|-fips/, "")
    : region;

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js


const resolveRegionConfig = (input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
        throw new Error("Region is missing");
    }
    return Object.assign(input, {
        region: async () => {
            if (typeof region === "string") {
                return getRealRegion(region);
            }
            const providedRegion = await region();
            return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
            const providedRegion = typeof region === "string" ? region : await region();
            if (isFipsRegion(providedRegion)) {
                return true;
            }
            return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        },
    });
};

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js



;// ./node_modules/@smithy/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js
const getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))?.hostname;

;// ./node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedHostname.js
const getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname
    ? regionHostname
    : partitionHostname
        ? partitionHostname.replace("{region}", resolvedRegion)
        : undefined;

;// ./node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedPartition.js
const getResolvedPartition = (region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws";

;// ./node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js
const getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
    if (signingRegion) {
        return signingRegion;
    }
    else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
            return regionRegexmatchArray[0].slice(1, -1);
        }
    }
};

;// ./node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js




const getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {
    const partition = getResolvedPartition(region, { partitionHash });
    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;
    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
    const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);
    const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);
    const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
    if (hostname === undefined) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
    }
    const signingRegion = getResolvedSigningRegion(hostname, {
        signingRegion: regionHash[resolvedRegion]?.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
    });
    return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(regionHash[resolvedRegion]?.signingService && {
            signingService: regionHash[resolvedRegion].signingService,
        }),
    };
};

;// ./node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js




;// ./node_modules/@smithy/config-resolver/dist-es/index.js





/***/ }),

/***/ 7809:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  calculateBodyLength: () => (/* reexport */ calculateBodyLength)
});

// EXTERNAL MODULE: external "fs"
var external_fs_ = __webpack_require__(9896);
;// ./node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js

const calculateBodyLength = (body) => {
    if (!body) {
        return 0;
    }
    if (typeof body === "string") {
        return Buffer.byteLength(body);
    }
    else if (typeof body.byteLength === "number") {
        return body.byteLength;
    }
    else if (typeof body.size === "number") {
        return body.size;
    }
    else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
    }
    else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0,external_fs_.lstatSync)(body.path).size;
    }
    else if (typeof body.fd === "number") {
        return (0,external_fs_.fstatSync)(body.fd).size;
    }
    throw new Error(`Body Length computation failed for ${body}`);
};

;// ./node_modules/@smithy/util-body-length-node/dist-es/index.js



/***/ }),

/***/ 7916:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extendedEncodeURIComponent: () => (/* binding */ extendedEncodeURIComponent)
/* harmony export */ });
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}


/***/ }),

/***/ 8004:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromHex: () => (/* binding */ fromHex),
/* harmony export */   toHex: () => (/* binding */ toHex)
/* harmony export */ });
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for (let i = 0; i < 256; i++) {
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
            out[i / 2] = HEX_TO_SHORT[encodedByte];
        }
        else {
            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
    }
    return out;
}
function toHex(bytes) {
    let out = "";
    for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
}


/***/ }),

/***/ 8112:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  CredentialsProviderError: () => (/* reexport */ CredentialsProviderError),
  ProviderError: () => (/* reexport */ ProviderError),
  TokenProviderError: () => (/* reexport */ TokenProviderError),
  chain: () => (/* reexport */ chain),
  fromStatic: () => (/* reexport */ fromStatic),
  memoize: () => (/* reexport */ memoize)
});

;// ./node_modules/@smithy/property-provider/dist-es/ProviderError.js
class ProviderError extends Error {
    constructor(message, options = true) {
        let logger;
        let tryNextLink = true;
        if (typeof options === "boolean") {
            logger = undefined;
            tryNextLink = options;
        }
        else if (options != null && typeof options === "object") {
            logger = options.logger;
            tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, ProviderError.prototype);
        logger?.debug?.(`@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
    }
    static from(error, options = true) {
        return Object.assign(new this(error.message, options), error);
    }
}

;// ./node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js

class CredentialsProviderError extends ProviderError {
    constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
    }
}

;// ./node_modules/@smithy/property-provider/dist-es/TokenProviderError.js

class TokenProviderError extends ProviderError {
    constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
    }
}

;// ./node_modules/@smithy/property-provider/dist-es/chain.js

const chain = (...providers) => async () => {
    if (providers.length === 0) {
        throw new ProviderError("No providers in chain");
    }
    let lastProviderError;
    for (const provider of providers) {
        try {
            const credentials = await provider();
            return credentials;
        }
        catch (err) {
            lastProviderError = err;
            if (err?.tryNextLink) {
                continue;
            }
            throw err;
        }
    }
    throw lastProviderError;
};

;// ./node_modules/@smithy/property-provider/dist-es/fromStatic.js
const fromStatic = (staticValue) => () => Promise.resolve(staticValue);

;// ./node_modules/@smithy/property-provider/dist-es/memoize.js
const memoize = (provider, isExpired, requiresRefresh) => {
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async () => {
        if (!pending) {
            pending = provider();
        }
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        }
        finally {
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) {
        return async (options) => {
            if (!hasResult || options?.forceRefresh) {
                resolved = await coalesceProvider();
            }
            return resolved;
        };
    }
    return async (options) => {
        if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider();
        }
        if (isConstant) {
            return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};

;// ./node_modules/@smithy/property-provider/dist-es/index.js








/***/ }),

/***/ 8218:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   collectBodyString: () => (/* binding */ collectBodyString)
/* harmony export */ });
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9764);

const collectBodyString = (streamBody, context) => (0,_smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));


/***/ }),

/***/ 8230:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  SelectorType: () => (/* reexport */ SelectorType),
  booleanSelector: () => (/* reexport */ booleanSelector),
  numberSelector: () => (/* reexport */ numberSelector)
});

;// ./node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js
const booleanSelector = (obj, key, type) => {
    if (!(key in obj))
        return undefined;
    if (obj[key] === "true")
        return true;
    if (obj[key] === "false")
        return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
};

;// ./node_modules/@smithy/util-config-provider/dist-es/numberSelector.js
const numberSelector = (obj, key, type) => {
    if (!(key in obj))
        return undefined;
    const numberValue = parseInt(obj[key], 10);
    if (Number.isNaN(numberValue)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
    }
    return numberValue;
};

;// ./node_modules/@smithy/util-config-provider/dist-es/types.js
var SelectorType;
(function (SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));

;// ./node_modules/@smithy/util-config-provider/dist-es/index.js





/***/ }),

/***/ 8257:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  credentialsTreatedAsExpired: () => (/* reexport */ credentialsTreatedAsExpired),
  credentialsWillNeedRefresh: () => (/* reexport */ credentialsWillNeedRefresh),
  defaultProvider: () => (/* reexport */ defaultProvider)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/credential-provider-env/dist-es/index.js + 1 modules
var dist_es = __webpack_require__(904);
// EXTERNAL MODULE: ./node_modules/@smithy/property-provider/dist-es/index.js + 6 modules
var property_provider_dist_es = __webpack_require__(8112);
// EXTERNAL MODULE: ./node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 14 modules
var shared_ini_file_loader_dist_es = __webpack_require__(3054);
;// ./node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js

const ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
const remoteProvider = async (init) => {
    const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await __webpack_require__.e(/* import() */ 897).then(__webpack_require__.bind(__webpack_require__, 7897));
    if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp } = await __webpack_require__.e(/* import() */ 610).then(__webpack_require__.bind(__webpack_require__, 3610));
        return (0,property_provider_dist_es.chain)(fromHttp(init), fromContainerMetadata(init));
    }
    if (process.env[ENV_IMDS_DISABLED] && process.env[ENV_IMDS_DISABLED] !== "false") {
        return async () => {
            throw new property_provider_dist_es.CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
    }
    init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
    return fromInstanceMetadata(init);
};

;// ./node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js




let multipleCredentialSourceWarningEmitted = false;
const defaultProvider = (init = {}) => (0,property_provider_dist_es.memoize)((0,property_provider_dist_es.chain)(async () => {
    const profile = init.profile ?? process.env[shared_ini_file_loader_dist_es.ENV_PROFILE];
    if (profile) {
        const envStaticCredentialsAreSet = process.env[dist_es.ENV_KEY] && process.env[dist_es.ENV_SECRET];
        if (envStaticCredentialsAreSet) {
            if (!multipleCredentialSourceWarningEmitted) {
                const warnFn = init.logger?.warn && init.logger?.constructor?.name !== "NoOpLogger" ? init.logger.warn : console.warn;
                warnFn(`@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`);
                multipleCredentialSourceWarningEmitted = true;
            }
        }
        throw new property_provider_dist_es.CredentialsProviderError("AWS_PROFILE is set, skipping fromEnv provider.", {
            logger: init.logger,
            tryNextLink: true,
        });
    }
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
    return (0,dist_es.fromEnv)(init)();
}, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        throw new property_provider_dist_es.CredentialsProviderError("Skipping SSO provider in default chain (inputs do not include SSO fields).", { logger: init.logger });
    }
    const { fromSSO } = await __webpack_require__.e(/* import() */ 791).then(__webpack_require__.bind(__webpack_require__, 9791));
    return fromSSO(init)();
}, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
    const { fromIni } = await __webpack_require__.e(/* import() */ 789).then(__webpack_require__.bind(__webpack_require__, 2789));
    return fromIni(init)();
}, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
    const { fromProcess } = await __webpack_require__.e(/* import() */ 109).then(__webpack_require__.bind(__webpack_require__, 5109));
    return fromProcess(init)();
}, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
    const { fromTokenFile } = await __webpack_require__.e(/* import() */ 819).then(__webpack_require__.bind(__webpack_require__, 7819));
    return fromTokenFile(init)();
}, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
    return (await remoteProvider(init))();
}, async () => {
    throw new property_provider_dist_es.CredentialsProviderError("Could not load credentials from any providers", {
        tryNextLink: false,
        logger: init.logger,
    });
}), credentialsTreatedAsExpired, credentialsWillNeedRefresh);
const credentialsWillNeedRefresh = (credentials) => credentials?.expiration !== undefined;
const credentialsTreatedAsExpired = (credentials) => credentials?.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000;

;// ./node_modules/@aws-sdk/credential-provider-node/dist-es/index.js



/***/ }),

/***/ 8377:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRecursionDetectionMiddlewareOptions: () => (/* binding */ addRecursionDetectionMiddlewareOptions),
/* harmony export */   getRecursionDetectionPlugin: () => (/* binding */ getRecursionDetectionPlugin),
/* harmony export */   recursionDetectionMiddleware: () => (/* binding */ recursionDetectionMiddleware)
/* harmony export */ });
/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3608);

const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = (options) => (next) => async (args) => {
    const { request } = args;
    if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request) || options.runtime !== "node") {
        return next(args);
    }
    const traceIdHeader = Object.keys(request.headers ?? {}).find((h) => h.toLowerCase() === TRACE_ID_HEADER_NAME.toLowerCase()) ??
        TRACE_ID_HEADER_NAME;
    if (request.headers.hasOwnProperty(traceIdHeader)) {
        return next(args);
    }
    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
    const traceId = process.env[ENV_TRACE_ID];
    const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
    }
    return next({
        ...args,
        request,
    });
};
const addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: ["RECURSION_DETECTION"],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low",
};
const getRecursionDetectionPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
    },
});


/***/ }),

/***/ 8394:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApproximateCreationDateTimePrecision: () => (/* binding */ ApproximateCreationDateTimePrecision),
/* harmony export */   AttributeAction: () => (/* binding */ AttributeAction),
/* harmony export */   AttributeValue: () => (/* binding */ AttributeValue),
/* harmony export */   BackupInUseException: () => (/* binding */ BackupInUseException),
/* harmony export */   BackupNotFoundException: () => (/* binding */ BackupNotFoundException),
/* harmony export */   BackupStatus: () => (/* binding */ BackupStatus),
/* harmony export */   BackupType: () => (/* binding */ BackupType),
/* harmony export */   BackupTypeFilter: () => (/* binding */ BackupTypeFilter),
/* harmony export */   BatchStatementErrorCodeEnum: () => (/* binding */ BatchStatementErrorCodeEnum),
/* harmony export */   BillingMode: () => (/* binding */ BillingMode),
/* harmony export */   ComparisonOperator: () => (/* binding */ ComparisonOperator),
/* harmony export */   ConditionalCheckFailedException: () => (/* binding */ ConditionalCheckFailedException),
/* harmony export */   ConditionalOperator: () => (/* binding */ ConditionalOperator),
/* harmony export */   ContinuousBackupsStatus: () => (/* binding */ ContinuousBackupsStatus),
/* harmony export */   ContinuousBackupsUnavailableException: () => (/* binding */ ContinuousBackupsUnavailableException),
/* harmony export */   ContributorInsightsAction: () => (/* binding */ ContributorInsightsAction),
/* harmony export */   ContributorInsightsStatus: () => (/* binding */ ContributorInsightsStatus),
/* harmony export */   DestinationStatus: () => (/* binding */ DestinationStatus),
/* harmony export */   DuplicateItemException: () => (/* binding */ DuplicateItemException),
/* harmony export */   ExportConflictException: () => (/* binding */ ExportConflictException),
/* harmony export */   ExportFormat: () => (/* binding */ ExportFormat),
/* harmony export */   ExportNotFoundException: () => (/* binding */ ExportNotFoundException),
/* harmony export */   ExportStatus: () => (/* binding */ ExportStatus),
/* harmony export */   ExportType: () => (/* binding */ ExportType),
/* harmony export */   ExportViewType: () => (/* binding */ ExportViewType),
/* harmony export */   GlobalTableAlreadyExistsException: () => (/* binding */ GlobalTableAlreadyExistsException),
/* harmony export */   GlobalTableNotFoundException: () => (/* binding */ GlobalTableNotFoundException),
/* harmony export */   GlobalTableStatus: () => (/* binding */ GlobalTableStatus),
/* harmony export */   IdempotentParameterMismatchException: () => (/* binding */ IdempotentParameterMismatchException),
/* harmony export */   ImportConflictException: () => (/* binding */ ImportConflictException),
/* harmony export */   ImportNotFoundException: () => (/* binding */ ImportNotFoundException),
/* harmony export */   ImportStatus: () => (/* binding */ ImportStatus),
/* harmony export */   IndexNotFoundException: () => (/* binding */ IndexNotFoundException),
/* harmony export */   IndexStatus: () => (/* binding */ IndexStatus),
/* harmony export */   InputCompressionType: () => (/* binding */ InputCompressionType),
/* harmony export */   InputFormat: () => (/* binding */ InputFormat),
/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),
/* harmony export */   InvalidEndpointException: () => (/* binding */ InvalidEndpointException),
/* harmony export */   InvalidExportTimeException: () => (/* binding */ InvalidExportTimeException),
/* harmony export */   InvalidRestoreTimeException: () => (/* binding */ InvalidRestoreTimeException),
/* harmony export */   ItemCollectionSizeLimitExceededException: () => (/* binding */ ItemCollectionSizeLimitExceededException),
/* harmony export */   KeyType: () => (/* binding */ KeyType),
/* harmony export */   LimitExceededException: () => (/* binding */ LimitExceededException),
/* harmony export */   MultiRegionConsistency: () => (/* binding */ MultiRegionConsistency),
/* harmony export */   PointInTimeRecoveryStatus: () => (/* binding */ PointInTimeRecoveryStatus),
/* harmony export */   PointInTimeRecoveryUnavailableException: () => (/* binding */ PointInTimeRecoveryUnavailableException),
/* harmony export */   PolicyNotFoundException: () => (/* binding */ PolicyNotFoundException),
/* harmony export */   ProjectionType: () => (/* binding */ ProjectionType),
/* harmony export */   ProvisionedThroughputExceededException: () => (/* binding */ ProvisionedThroughputExceededException),
/* harmony export */   ReplicaAlreadyExistsException: () => (/* binding */ ReplicaAlreadyExistsException),
/* harmony export */   ReplicaNotFoundException: () => (/* binding */ ReplicaNotFoundException),
/* harmony export */   ReplicaStatus: () => (/* binding */ ReplicaStatus),
/* harmony export */   ReplicatedWriteConflictException: () => (/* binding */ ReplicatedWriteConflictException),
/* harmony export */   RequestLimitExceeded: () => (/* binding */ RequestLimitExceeded),
/* harmony export */   ResourceInUseException: () => (/* binding */ ResourceInUseException),
/* harmony export */   ResourceNotFoundException: () => (/* binding */ ResourceNotFoundException),
/* harmony export */   ReturnConsumedCapacity: () => (/* binding */ ReturnConsumedCapacity),
/* harmony export */   ReturnItemCollectionMetrics: () => (/* binding */ ReturnItemCollectionMetrics),
/* harmony export */   ReturnValue: () => (/* binding */ ReturnValue),
/* harmony export */   ReturnValuesOnConditionCheckFailure: () => (/* binding */ ReturnValuesOnConditionCheckFailure),
/* harmony export */   S3SseAlgorithm: () => (/* binding */ S3SseAlgorithm),
/* harmony export */   SSEStatus: () => (/* binding */ SSEStatus),
/* harmony export */   SSEType: () => (/* binding */ SSEType),
/* harmony export */   ScalarAttributeType: () => (/* binding */ ScalarAttributeType),
/* harmony export */   Select: () => (/* binding */ Select),
/* harmony export */   StreamViewType: () => (/* binding */ StreamViewType),
/* harmony export */   TableAlreadyExistsException: () => (/* binding */ TableAlreadyExistsException),
/* harmony export */   TableClass: () => (/* binding */ TableClass),
/* harmony export */   TableInUseException: () => (/* binding */ TableInUseException),
/* harmony export */   TableNotFoundException: () => (/* binding */ TableNotFoundException),
/* harmony export */   TableStatus: () => (/* binding */ TableStatus),
/* harmony export */   TimeToLiveStatus: () => (/* binding */ TimeToLiveStatus),
/* harmony export */   TransactionCanceledException: () => (/* binding */ TransactionCanceledException),
/* harmony export */   TransactionConflictException: () => (/* binding */ TransactionConflictException),
/* harmony export */   TransactionInProgressException: () => (/* binding */ TransactionInProgressException),
/* harmony export */   WitnessStatus: () => (/* binding */ WitnessStatus)
/* harmony export */ });
/* harmony import */ var _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4007);

const ApproximateCreationDateTimePrecision = {
    MICROSECOND: "MICROSECOND",
    MILLISECOND: "MILLISECOND",
};
const AttributeAction = {
    ADD: "ADD",
    DELETE: "DELETE",
    PUT: "PUT",
};
const ScalarAttributeType = {
    B: "B",
    N: "N",
    S: "S",
};
const BackupStatus = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETED: "DELETED",
};
const BackupType = {
    AWS_BACKUP: "AWS_BACKUP",
    SYSTEM: "SYSTEM",
    USER: "USER",
};
const BillingMode = {
    PAY_PER_REQUEST: "PAY_PER_REQUEST",
    PROVISIONED: "PROVISIONED",
};
const KeyType = {
    HASH: "HASH",
    RANGE: "RANGE",
};
const ProjectionType = {
    ALL: "ALL",
    INCLUDE: "INCLUDE",
    KEYS_ONLY: "KEYS_ONLY",
};
const SSEType = {
    AES256: "AES256",
    KMS: "KMS",
};
const SSEStatus = {
    DISABLED: "DISABLED",
    DISABLING: "DISABLING",
    ENABLED: "ENABLED",
    ENABLING: "ENABLING",
    UPDATING: "UPDATING",
};
const StreamViewType = {
    KEYS_ONLY: "KEYS_ONLY",
    NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
    NEW_IMAGE: "NEW_IMAGE",
    OLD_IMAGE: "OLD_IMAGE",
};
const TimeToLiveStatus = {
    DISABLED: "DISABLED",
    DISABLING: "DISABLING",
    ENABLED: "ENABLED",
    ENABLING: "ENABLING",
};
class BackupInUseException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "BackupInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BackupInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BackupInUseException.prototype);
    }
}
class BackupNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "BackupNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BackupNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
    }
}
const BackupTypeFilter = {
    ALL: "ALL",
    AWS_BACKUP: "AWS_BACKUP",
    SYSTEM: "SYSTEM",
    USER: "USER",
};
const ReturnConsumedCapacity = {
    INDEXES: "INDEXES",
    NONE: "NONE",
    TOTAL: "TOTAL",
};
const ReturnValuesOnConditionCheckFailure = {
    ALL_OLD: "ALL_OLD",
    NONE: "NONE",
};
const BatchStatementErrorCodeEnum = {
    AccessDenied: "AccessDenied",
    ConditionalCheckFailed: "ConditionalCheckFailed",
    DuplicateItem: "DuplicateItem",
    InternalServerError: "InternalServerError",
    ItemCollectionSizeLimitExceeded: "ItemCollectionSizeLimitExceeded",
    ProvisionedThroughputExceeded: "ProvisionedThroughputExceeded",
    RequestLimitExceeded: "RequestLimitExceeded",
    ResourceNotFound: "ResourceNotFound",
    ThrottlingError: "ThrottlingError",
    TransactionConflict: "TransactionConflict",
    ValidationError: "ValidationError",
};
class InternalServerError extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "InternalServerError";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerError.prototype);
    }
}
class RequestLimitExceeded extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "RequestLimitExceeded";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RequestLimitExceeded",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
    }
}
class InvalidEndpointException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "InvalidEndpointException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidEndpointException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
    }
}
class ProvisionedThroughputExceededException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ProvisionedThroughputExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
    }
}
class ResourceNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
const ReturnItemCollectionMetrics = {
    NONE: "NONE",
    SIZE: "SIZE",
};
class ItemCollectionSizeLimitExceededException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ItemCollectionSizeLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ItemCollectionSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ItemCollectionSizeLimitExceededException.prototype);
    }
}
class ReplicatedWriteConflictException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ReplicatedWriteConflictException";
    $fault = "client";
    $retryable = {};
    constructor(opts) {
        super({
            name: "ReplicatedWriteConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ReplicatedWriteConflictException.prototype);
    }
}
const ComparisonOperator = {
    BEGINS_WITH: "BEGINS_WITH",
    BETWEEN: "BETWEEN",
    CONTAINS: "CONTAINS",
    EQ: "EQ",
    GE: "GE",
    GT: "GT",
    IN: "IN",
    LE: "LE",
    LT: "LT",
    NE: "NE",
    NOT_CONTAINS: "NOT_CONTAINS",
    NOT_NULL: "NOT_NULL",
    NULL: "NULL",
};
const ConditionalOperator = {
    AND: "AND",
    OR: "OR",
};
const ContinuousBackupsStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const PointInTimeRecoveryStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
class ContinuousBackupsUnavailableException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ContinuousBackupsUnavailableException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ContinuousBackupsUnavailableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ContinuousBackupsUnavailableException.prototype);
    }
}
const ContributorInsightsAction = {
    DISABLE: "DISABLE",
    ENABLE: "ENABLE",
};
const ContributorInsightsStatus = {
    DISABLED: "DISABLED",
    DISABLING: "DISABLING",
    ENABLED: "ENABLED",
    ENABLING: "ENABLING",
    FAILED: "FAILED",
};
class LimitExceededException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class TableInUseException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "TableInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TableInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TableInUseException.prototype);
    }
}
class TableNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "TableNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TableNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
    }
}
const GlobalTableStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    UPDATING: "UPDATING",
};
const IndexStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    UPDATING: "UPDATING",
};
const ReplicaStatus = {
    ACTIVE: "ACTIVE",
    ARCHIVED: "ARCHIVED",
    ARCHIVING: "ARCHIVING",
    CREATING: "CREATING",
    CREATION_FAILED: "CREATION_FAILED",
    DELETING: "DELETING",
    INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
    REGION_DISABLED: "REGION_DISABLED",
    REPLICATION_NOT_AUTHORIZED: "REPLICATION_NOT_AUTHORIZED",
    UPDATING: "UPDATING",
};
const TableClass = {
    STANDARD: "STANDARD",
    STANDARD_INFREQUENT_ACCESS: "STANDARD_INFREQUENT_ACCESS",
};
const TableStatus = {
    ACTIVE: "ACTIVE",
    ARCHIVED: "ARCHIVED",
    ARCHIVING: "ARCHIVING",
    CREATING: "CREATING",
    DELETING: "DELETING",
    INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
    REPLICATION_NOT_AUTHORIZED: "REPLICATION_NOT_AUTHORIZED",
    UPDATING: "UPDATING",
};
class GlobalTableAlreadyExistsException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "GlobalTableAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "GlobalTableAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, GlobalTableAlreadyExistsException.prototype);
    }
}
const WitnessStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
const MultiRegionConsistency = {
    EVENTUAL: "EVENTUAL",
    STRONG: "STRONG",
};
class ResourceInUseException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ResourceInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
const ReturnValue = {
    ALL_NEW: "ALL_NEW",
    ALL_OLD: "ALL_OLD",
    NONE: "NONE",
    UPDATED_NEW: "UPDATED_NEW",
    UPDATED_OLD: "UPDATED_OLD",
};
class TransactionConflictException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "TransactionConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TransactionConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
    }
}
class PolicyNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "PolicyNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PolicyNotFoundException.prototype);
    }
}
const ExportFormat = {
    DYNAMODB_JSON: "DYNAMODB_JSON",
    ION: "ION",
};
const ExportStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
const ExportType = {
    FULL_EXPORT: "FULL_EXPORT",
    INCREMENTAL_EXPORT: "INCREMENTAL_EXPORT",
};
const ExportViewType = {
    NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
    NEW_IMAGE: "NEW_IMAGE",
};
const S3SseAlgorithm = {
    AES256: "AES256",
    KMS: "KMS",
};
class ExportNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ExportNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExportNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
    }
}
class GlobalTableNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "GlobalTableNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "GlobalTableNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
    }
}
const ImportStatus = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
const InputCompressionType = {
    GZIP: "GZIP",
    NONE: "NONE",
    ZSTD: "ZSTD",
};
const InputFormat = {
    CSV: "CSV",
    DYNAMODB_JSON: "DYNAMODB_JSON",
    ION: "ION",
};
class ImportNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ImportNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ImportNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ImportNotFoundException.prototype);
    }
}
const DestinationStatus = {
    ACTIVE: "ACTIVE",
    DISABLED: "DISABLED",
    DISABLING: "DISABLING",
    ENABLE_FAILED: "ENABLE_FAILED",
    ENABLING: "ENABLING",
    UPDATING: "UPDATING",
};
class DuplicateItemException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "DuplicateItemException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DuplicateItemException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
    }
}
class IdempotentParameterMismatchException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "IdempotentParameterMismatchException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
    }
}
class TransactionInProgressException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "TransactionInProgressException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TransactionInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
    }
}
class ExportConflictException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ExportConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExportConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExportConflictException.prototype);
    }
}
class InvalidExportTimeException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "InvalidExportTimeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidExportTimeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
    }
}
class PointInTimeRecoveryUnavailableException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "PointInTimeRecoveryUnavailableException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PointInTimeRecoveryUnavailableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PointInTimeRecoveryUnavailableException.prototype);
    }
}
class ImportConflictException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ImportConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ImportConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ImportConflictException.prototype);
    }
}
const Select = {
    ALL_ATTRIBUTES: "ALL_ATTRIBUTES",
    ALL_PROJECTED_ATTRIBUTES: "ALL_PROJECTED_ATTRIBUTES",
    COUNT: "COUNT",
    SPECIFIC_ATTRIBUTES: "SPECIFIC_ATTRIBUTES",
};
class TableAlreadyExistsException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "TableAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TableAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
    }
}
class InvalidRestoreTimeException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "InvalidRestoreTimeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidRestoreTimeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
    }
}
class ReplicaAlreadyExistsException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ReplicaAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ReplicaAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
    }
}
class ReplicaNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ReplicaNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ReplicaNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
    }
}
class IndexNotFoundException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "IndexNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "IndexNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
    }
}
var AttributeValue;
(function (AttributeValue) {
    AttributeValue.visit = (value, visitor) => {
        if (value.S !== undefined)
            return visitor.S(value.S);
        if (value.N !== undefined)
            return visitor.N(value.N);
        if (value.B !== undefined)
            return visitor.B(value.B);
        if (value.SS !== undefined)
            return visitor.SS(value.SS);
        if (value.NS !== undefined)
            return visitor.NS(value.NS);
        if (value.BS !== undefined)
            return visitor.BS(value.BS);
        if (value.M !== undefined)
            return visitor.M(value.M);
        if (value.L !== undefined)
            return visitor.L(value.L);
        if (value.NULL !== undefined)
            return visitor.NULL(value.NULL);
        if (value.BOOL !== undefined)
            return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AttributeValue || (AttributeValue = {}));
class ConditionalCheckFailedException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "ConditionalCheckFailedException";
    $fault = "client";
    Item;
    constructor(opts) {
        super({
            name: "ConditionalCheckFailedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
        this.Item = opts.Item;
    }
}
class TransactionCanceledException extends _DynamoDBServiceException__WEBPACK_IMPORTED_MODULE_0__.DynamoDBServiceException {
    name = "TransactionCanceledException";
    $fault = "client";
    Message;
    CancellationReasons;
    constructor(opts) {
        super({
            name: "TransactionCanceledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
    }
}


/***/ }),

/***/ 8545:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  EndpointCache: () => (/* reexport */ EndpointCache),
  EndpointError: () => (/* reexport */ EndpointError),
  customEndpointFunctions: () => (/* reexport */ customEndpointFunctions),
  isIpAddress: () => (/* reexport */ isIpAddress),
  isValidHostLabel: () => (/* reexport */ isValidHostLabel),
  resolveEndpoint: () => (/* reexport */ resolveEndpoint)
});

;// ./node_modules/@smithy/util-endpoints/dist-es/cache/EndpointCache.js
class EndpointCache {
    constructor({ size, params }) {
        this.data = new Map();
        this.parameters = [];
        this.capacity = size ?? 50;
        if (params) {
            this.parameters = params;
        }
    }
    get(endpointParams, resolver) {
        const key = this.hash(endpointParams);
        if (key === false) {
            return resolver();
        }
        if (!this.data.has(key)) {
            if (this.data.size > this.capacity + 10) {
                const keys = this.data.keys();
                let i = 0;
                while (true) {
                    const { value, done } = keys.next();
                    this.data.delete(value);
                    if (done || ++i > 10) {
                        break;
                    }
                }
            }
            this.data.set(key, resolver());
        }
        return this.data.get(key);
    }
    size() {
        return this.data.size;
    }
    hash(endpointParams) {
        let buffer = "";
        const { parameters } = this;
        if (parameters.length === 0) {
            return false;
        }
        for (const param of parameters) {
            const val = String(endpointParams[param] ?? "");
            if (val.includes("|;")) {
                return false;
            }
            buffer += val + "|;";
        }
        return buffer;
    }
}

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js
const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
const isIpAddress = (value) => IP_V4_REGEX.test(value) || (value.startsWith("[") && value.endsWith("]"));

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js
const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
const isValidHostLabel = (value, allowSubDomains = false) => {
    if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
    }
    const labels = value.split(".");
    for (const label of labels) {
        if (!isValidHostLabel(label)) {
            return false;
        }
    }
    return true;
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js
const customEndpointFunctions = {};

;// ./node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js
const debugId = "endpoints";

;// ./node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js
function toDebugString(input) {
    if (typeof input !== "object" || input == null) {
        return input;
    }
    if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
    }
    if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    }
    return JSON.stringify(input, null, 2);
}

;// ./node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js
class EndpointError extends Error {
    constructor(message) {
        super(message);
        this.name = "EndpointError";
    }
}

;// ./node_modules/@smithy/util-endpoints/dist-es/types/index.js








;// ./node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js
const booleanEquals = (value1, value2) => value1 === value2;

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js

const getAttrPathList = (path) => {
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
            if (part.indexOf("]") !== part.length - 1) {
                throw new EndpointError(`Path: '${path}' does not end with ']'`);
            }
            const arrayIndex = part.slice(squareBracketIndex + 1, -1);
            if (Number.isNaN(parseInt(arrayIndex))) {
                throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
            }
            if (squareBracketIndex !== 0) {
                pathList.push(part.slice(0, squareBracketIndex));
            }
            pathList.push(arrayIndex);
        }
        else {
            pathList.push(part);
        }
    }
    return pathList;
};

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js


const getAttr = (value, path) => getAttrPathList(path).reduce((acc, index) => {
    if (typeof acc !== "object") {
        throw new EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
    }
    else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
    }
    return acc[index];
}, value);

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js
const isSet = (value) => value != null;

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/not.js
const not = (value) => !value;

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js


const DEFAULT_PORTS = {
    [dist_es.EndpointURLScheme.HTTP]: 80,
    [dist_es.EndpointURLScheme.HTTPS]: 443,
};
const parseURL = (value) => {
    const whatwgURL = (() => {
        try {
            if (value instanceof URL) {
                return value;
            }
            if (typeof value === "object" && "hostname" in value) {
                const { hostname, port, protocol = "", path = "", query = {} } = value;
                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
                url.search = Object.entries(query)
                    .map(([k, v]) => `${k}=${v}`)
                    .join("&");
                return url;
            }
            return new URL(value);
        }
        catch (error) {
            return null;
        }
    })();
    if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
    }
    const urlString = whatwgURL.href;
    const { host, hostname, pathname, protocol, search } = whatwgURL;
    if (search) {
        return null;
    }
    const scheme = protocol.slice(0, -1);
    if (!Object.values(dist_es.EndpointURLScheme).includes(scheme)) {
        return null;
    }
    const isIp = isIpAddress(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||
        (typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp,
    };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js
const stringEquals = (value1, value2) => value1 === value2;

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/substring.js
const substring = (input, start, stop, reverse) => {
    if (start >= stop || input.length < stop) {
        return null;
    }
    if (!reverse) {
        return input.substring(start, stop);
    }
    return input.substring(input.length - stop, input.length - start);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js
const uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/index.js










;// ./node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js

const endpointFunctions = {
    booleanEquals: booleanEquals,
    getAttr: getAttr,
    isSet: isSet,
    isValidHostLabel: isValidHostLabel,
    not: not,
    parseURL: parseURL,
    stringEquals: stringEquals,
    substring: substring,
    uriEncode: uriEncode,
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js

const evaluateTemplate = (template, options) => {
    const evaluatedTemplateArr = [];
    const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord,
    };
    let currentIndex = 0;
    while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(currentIndex));
            break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex));
            break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
            currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
            const [refName, attrName] = parameterName.split("#");
            evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        }
        else {
            evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js
const getReferenceValue = ({ ref }, options) => {
    const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord,
    };
    return referenceRecord[ref];
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js




const evaluateExpression = (obj, keyName, options) => {
    if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
    }
    else if (obj["fn"]) {
        return callFunction(obj, options);
    }
    else if (obj["ref"]) {
        return getReferenceValue(obj, options);
    }
    throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js



const callFunction = ({ fn, argv }, options) => {
    const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
    const fnSegments = fn.split(".");
    if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
    }
    return endpointFunctions[fn](...evaluatedArgs);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js



const evaluateCondition = ({ assign, ...fnArgs }, options) => {
    if (assign && assign in options.referenceRecord) {
        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);
    }
    const value = callFunction(fnArgs, options);
    options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
    return {
        result: value === "" ? true : !!value,
        ...(assign != null && { toAssign: { name: assign, value } }),
    };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js


const evaluateConditions = (conditions = [], options) => {
    const conditionsReferenceRecord = {};
    for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
            ...options,
            referenceRecord: {
                ...options.referenceRecord,
                ...conditionsReferenceRecord,
            },
        });
        if (!result) {
            return { result };
        }
        if (toAssign) {
            conditionsReferenceRecord[toAssign.name] = toAssign.value;
            options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
    }
    return { result: true, referenceRecord: conditionsReferenceRecord };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js


const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
    ...acc,
    [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
            throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
    }),
}), {});

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js



const getEndpointProperty = (property, options) => {
    if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
    }
    switch (typeof property) {
        case "string":
            return evaluateTemplate(property, options);
        case "object":
            if (property === null) {
                throw new EndpointError(`Unexpected endpoint property: ${property}`);
            }
            return getEndpointProperties(property, options);
        case "boolean":
            return property;
        default:
            throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);
    }
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js

const getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
    ...acc,
    [propertyKey]: getEndpointProperty(propertyVal, options),
}), {});

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js


const getEndpointUrl = (endpointUrl, options) => {
    const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") {
        try {
            return new URL(expression);
        }
        catch (error) {
            console.error(`Failed to construct URL with ${expression}`, error);
            throw error;
        }
    }
    throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js





const evaluateEndpointRule = (endpointRule, options) => {
    const { conditions, endpoint } = endpointRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
        return;
    }
    const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    };
    const { url, properties, headers } = endpoint;
    options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
    return {
        ...(headers != undefined && {
            headers: getEndpointHeaders(headers, endpointRuleOptions),
        }),
        ...(properties != undefined && {
            properties: getEndpointProperties(properties, endpointRuleOptions),
        }),
        url: getEndpointUrl(url, endpointRuleOptions),
    };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js



const evaluateErrorRule = (errorRule, options) => {
    const { conditions, error } = errorRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
        return;
    }
    throw new EndpointError(evaluateExpression(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    }));
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js


const evaluateTreeRule = (treeRule, options) => {
    const { conditions, rules } = treeRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
        return;
    }
    return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    });
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js




const evaluateRules = (rules, options) => {
    for (const rule of rules) {
        if (rule.type === "endpoint") {
            const endpointOrUndefined = evaluateEndpointRule(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        }
        else if (rule.type === "error") {
            evaluateErrorRule(rule, options);
        }
        else if (rule.type === "tree") {
            const endpointOrUndefined = evaluateTreeRule(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        }
        else {
            throw new EndpointError(`Unknown endpoint rule: ${rule}`);
        }
    }
    throw new EndpointError(`Rules evaluation failed`);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/index.js



;// ./node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js



const resolveEndpoint = (ruleSetObject, options) => {
    const { endpointParams, logger } = options;
    const { parameters, rules } = ruleSetObject;
    options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters)
        .filter(([, v]) => v.default != null)
        .map(([k, v]) => [k, v.default]);
    if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
            endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
    }
    const requiredParams = Object.entries(parameters)
        .filter(([, v]) => v.required)
        .map(([k]) => k);
    for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
            throw new EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
    }
    const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });
    options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
    return endpoint;
};

;// ./node_modules/@smithy/util-endpoints/dist-es/index.js








/***/ }),

/***/ 8611:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 8822:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   BatchWriteItemCommand: () => (/* binding */ BatchWriteItemCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class BatchWriteItemCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArnList: { type: "operationContextParams", get: (input) => Object.keys(input?.RequestItems ?? {}) },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "BatchWriteItem", {})
    .n("DynamoDBClient", "BatchWriteItemCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_BatchWriteItemCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_BatchWriteItemCommand)
    .build() {
}


/***/ }),

/***/ 9023:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 9032:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.handler = void 0;
const client_dynamodb_1 = __webpack_require__(4055);
const lib_dynamodb_1 = __webpack_require__(3832);
const client_cognito_identity_provider_1 = __webpack_require__(4735);
const uuid_1 = __webpack_require__(2587);
const response_1 = __webpack_require__(4640);
const USERS_TABLE = process.env.USERS_TABLE;
const BUSINESSES_TABLE = process.env.BUSINESSES_TABLE;
const USER_POOL_ID = process.env.COGNITO_USER_POOL_ID;
const CLIENT_ID = process.env.COGNITO_CLIENT_ID;
function buildRequestContext(event) {
    const requestId = event?.requestContext?.requestId || event?.headers?.['x-request-id'] || `req-${Date.now()}`;
    const correlationId = event?.headers?.['x-correlation-id'] || event?.headers?.['x-correlationid'] || requestId;
    return {
        requestId,
        correlationId,
        rawPath: event?.rawPath || event?.path,
        httpMethod: event?.httpMethod
    };
}
function logCTX(ctx, msg, extra) {
    const base = `CTX | requestId=${ctx.requestId} corrId=${ctx.correlationId}` +
        (ctx.rawPath ? ` path=${ctx.rawPath}` : '') +
        (ctx.httpMethod ? ` method=${ctx.httpMethod}` : '');
    if (extra) {
        console.log(base + ' | ' + msg, extra);
    }
    else {
        console.log(base + ' | ' + msg);
    }
}
function logBizResolution(stage, details) {
    console.log(`BUSINESS_RESOLUTION | stage=${stage} |`, details);
}
const handler = async (event, context) => {
    const ctx = buildRequestContext(event);
    logCTX(ctx, `Processing auth request`);
    console.log(`Processing ${event.httpMethod} ${event.path}`);
    let body;
    try {
        let requestBody = event.body;
        if (event.isBase64Encoded && requestBody) {
            requestBody = Buffer.from(requestBody, 'base64').toString('utf-8');
            logCTX(ctx, 'Decoded Base64 body');
        }
        body = typeof requestBody === 'string' ? JSON.parse(requestBody || '{}') : requestBody;
    }
    catch (e) {
        console.error('Failed to parse request body:', e);
        body = event.body;
    }
    body = body || {};
    try {
        switch (`${event.httpMethod} ${event.path}`) {
            case 'POST /auth/register-with-business':
                logCTX(ctx, 'Route matched register-with-business');
                return await handleRegisterWithBusiness(body);
            case 'POST /auth/confirm':
                logCTX(ctx, 'Route matched confirm');
                return await handleConfirmSignup(body);
            case 'POST /auth/check-email':
                logCTX(ctx, 'Route matched check-email');
                return await handleCheckEmail(body);
            case 'POST /auth/signin':
                logCTX(ctx, 'Route matched signin');
                return await handleSignin(body, ctx);
            case 'POST /auth/signout':
                logCTX(ctx, 'Route matched signout');
                return (0, response_1.createResponse)(200, { success: true, message: 'Signed out (stateless).' });
            case 'POST /auth/resend-code':
                logCTX(ctx, 'Route matched resend-code');
                return await handleResendCode(body);
            case 'GET /auth/user-businesses':
                logCTX(ctx, 'Route matched user-businesses');
                try {
                    console.log('DEBUG_AUTH_HEADER', {
                        auth: event.headers?.Authorization || event.headers?.authorization
                    });
                }
                catch (_) { }
                return await handleGetUserBusinesses(event, ctx);
            case 'GET /auth/health':
                logCTX(ctx, 'Route matched health');
                return handleHealth();
            default:
                logCTX(ctx, 'No route matched');
                return (0, response_1.createResponse)(404, {
                    success: false,
                    message: 'Endpoint not found',
                    requestId: ctx.requestId
                });
        }
    }
    catch (error) {
        console.error('Unexpected error in handler:', error);
        return (0, response_1.createResponse)(500, {
            success: false,
            message: 'Internal server error',
            requestId: ctx.requestId
        });
    }
};
exports.handler = handler;
module.exports = { handler: exports.handler };
async function handleRegisterWithBusiness(body) {
    const cognitoClient = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: process.env.COGNITO_REGION || 'us-east-1'
    });
    const dynamoDbClient = new client_dynamodb_1.DynamoDBClient({
        region: process.env.DYNAMODB_REGION || 'us-east-1'
    });
    const dynamodb = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoDbClient);
    const { email: rawEmail, password, businessName, business_name, businessType, business_type = 'restaurant', phoneNumber, phone_number, firstName = '', lastName = '', ownerName, address, city: directCity = '', district: directDistrict = '', country: directCountry = 'Iraq', street: directStreet = '', businessPhotoUrl, businessSubcategories } = body;
    let addressObj;
    let city, district, country, street;
    if (address && typeof address === 'object') {
        addressObj = address;
        city = address.city || directCity;
        district = address.district || directDistrict;
        country = address.country || directCountry || 'Iraq';
        street = address.street || directStreet;
        console.log('✅ Address parsed from structured object:', { city, district, country, street });
    }
    else {
        city = directCity;
        district = directDistrict;
        country = directCountry;
        street = directStreet;
        addressObj = address || '';
        console.log('⚠️ Address using direct fields (fallback):', { city, district, country, street });
    }
    const email = rawEmail ? rawEmail.toLowerCase().trim() : '';
    const finalBusinessName = businessName || business_name;
    const finalPhoneNumber = phoneNumber || phone_number;
    const finalBusinessType = businessType || business_type;
    const finalOwnerName = ownerName || `${firstName} ${lastName}`.trim();
    if (!email || !password || !finalBusinessName) {
        return (0, response_1.createResponse)(400, {
            success: false,
            message: 'Email, password, and business name are required.'
        });
    }
    try {
        const userAttributes = [
            { Name: 'email', Value: email }
        ];
        if (finalOwnerName) {
            userAttributes.push({ Name: 'name', Value: String(finalOwnerName) });
        }
        else {
            const fallbackName = `${firstName || ''} ${lastName || ''}`.trim() || 'User';
            userAttributes.push({ Name: 'name', Value: fallbackName });
        }
        if (firstName) {
            userAttributes.push({ Name: 'given_name', Value: String(firstName) });
        }
        if (lastName) {
            userAttributes.push({ Name: 'family_name', Value: String(lastName) });
        }
        const formattedAddressParts = [street, city, district, country]
            .filter(Boolean)
            .join(', ');
        const addressObjForCognito = {
            formatted: formattedAddressParts || undefined,
            street_address: street || undefined,
            locality: city || undefined,
            region: district || undefined,
            country: country || undefined,
        };
        const cleanedAddressObj = Object.fromEntries(Object.entries(addressObjForCognito).filter(([_, v]) => v !== undefined && v !== ''));
        if (Object.keys(cleanedAddressObj).length > 0) {
            try {
                const addressString = JSON.stringify(cleanedAddressObj);
                console.log('🏠 Address attribute to be set:', addressString);
                userAttributes.push({ Name: 'address', Value: addressString });
            }
            catch (addrErr) {
                console.error('⚠️ Failed to stringify address, skipping address attribute:', addrErr);
            }
        }
        console.log('👤 User attributes to be sent to Cognito:', JSON.stringify(userAttributes, null, 2));
        const signUpParams = {
            ClientId: CLIENT_ID,
            Username: email,
            Password: password,
            UserAttributes: userAttributes,
        };
        const signUpCommand = new client_cognito_identity_provider_1.SignUpCommand(signUpParams);
        const signUpResult = await cognitoClient.send(signUpCommand);
        console.log('Cognito SignUp successful:', signUpResult.UserSub);
        const businessId = (0, uuid_1.v4)();
        const timestamp = new Date().toISOString();
        const business = {
            id: businessId,
            ownerId: signUpResult.UserSub,
            name: finalBusinessName,
            description: '',
            category: finalBusinessType,
            address: typeof addressObj === 'string' ? addressObj : JSON.stringify(addressObj),
            phone: finalPhoneNumber || '',
            email: email,
            isOnline: false,
            isApproved: false,
            createdAt: timestamp,
            updatedAt: timestamp,
            settings: {
                acceptsOnlineOrders: true,
                deliveryRadius: 5,
                minimumOrder: 0,
                estimatedDeliveryTime: 30
            }
        };
        await dynamodb.send(new lib_dynamodb_1.PutCommand({
            TableName: BUSINESSES_TABLE,
            Item: business
        }));
        const user = {
            id: signUpResult.UserSub,
            email: email,
            hashedPassword: '',
            role: 'business_owner',
            businessId: businessId,
            createdAt: timestamp,
            updatedAt: timestamp,
            isActive: false,
            profile: {
                firstName: firstName || '',
                lastName: lastName || '',
                phone: finalPhoneNumber || ''
            }
        };
        await dynamodb.send(new lib_dynamodb_1.PutCommand({
            TableName: USERS_TABLE,
            Item: user
        }));
        return (0, response_1.successResponse)({
            message: 'Registration successful. Please check your email for confirmation code.',
            userId: signUpResult.UserSub,
            businessId: businessId,
            email: email
        }, 201);
    }
    catch (error) {
        console.error('Registration error:', error);
        if (error.name === 'UsernameExistsException') {
            return (0, response_1.errorResponse)('An account with this email already exists', 409);
        }
        return (0, response_1.errorResponse)('Registration failed. Please try again.', 500);
    }
}
async function handleConfirmSignup(body) {
    const cognitoClient = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: process.env.COGNITO_REGION || 'us-east-1'
    });
    const dynamoDbClient = new client_dynamodb_1.DynamoDBClient({
        region: process.env.DYNAMODB_REGION || 'us-east-1'
    });
    const dynamodb = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoDbClient);
    const { email, confirmationCode } = body;
    if (!email || !confirmationCode) {
        return (0, response_1.errorResponse)('Email and confirmation code are required', 400);
    }
    try {
        const confirmParams = {
            ClientId: CLIENT_ID,
            Username: email.toLowerCase().trim(),
            ConfirmationCode: confirmationCode,
        };
        await cognitoClient.send(new client_cognito_identity_provider_1.ConfirmSignUpCommand(confirmParams));
        const getUserResult = await cognitoClient.send(new client_cognito_identity_provider_1.AdminGetUserCommand({
            UserPoolId: USER_POOL_ID,
            Username: email.toLowerCase().trim()
        }));
        if (getUserResult.Username) {
            await dynamodb.send(new lib_dynamodb_1.UpdateCommand({
                TableName: USERS_TABLE,
                Key: { id: getUserResult.Username },
                UpdateExpression: 'SET isActive = :active, updatedAt = :updatedAt',
                ExpressionAttributeValues: {
                    ':active': true,
                    ':updatedAt': new Date().toISOString()
                }
            }));
        }
        return (0, response_1.successResponse)({
            message: 'Email confirmed successfully. You can now sign in.',
            confirmed: true
        });
    }
    catch (error) {
        console.error('Confirmation error:', error);
        if (error.name === 'CodeMismatchException') {
            return (0, response_1.errorResponse)('Invalid confirmation code', 400);
        }
        if (error.name === 'ExpiredCodeException') {
            return (0, response_1.errorResponse)('Confirmation code has expired', 400);
        }
        return (0, response_1.errorResponse)('Confirmation failed. Please try again.', 500);
    }
}
async function handleCheckEmail(body) {
    const { email } = body;
    if (!email) {
        return (0, response_1.errorResponse)('Email is required', 400);
    }
    try {
        const cognitoClient = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
            region: process.env.COGNITO_REGION || 'us-east-1'
        });
        await cognitoClient.send(new client_cognito_identity_provider_1.AdminGetUserCommand({
            UserPoolId: USER_POOL_ID,
            Username: email.toLowerCase().trim()
        }));
        return (0, response_1.successResponse)({ exists: true });
    }
    catch (error) {
        if (error.name === 'UserNotFoundException') {
            return (0, response_1.successResponse)({ exists: false });
        }
        console.error('Check email error:', error);
        return (0, response_1.errorResponse)('Failed to check email', 500);
    }
}
async function handleSignin(body, ctx) {
    const cognitoClient = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: process.env.COGNITO_REGION || 'us-east-1'
    });
    const dynamoDbClient = new client_dynamodb_1.DynamoDBClient({
        region: process.env.DYNAMODB_REGION || 'us-east-1'
    });
    const dynamodb = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoDbClient);
    const { email, password } = body;
    if (!email || !password) {
        return (0, response_1.errorResponse)('Email and password are required', 400);
    }
    try {
        const authParams = {
            AuthFlow: 'USER_PASSWORD_AUTH',
            ClientId: CLIENT_ID,
            AuthParameters: {
                USERNAME: email.toLowerCase().trim(),
                PASSWORD: password,
            },
        };
        const authResult = await cognitoClient.send(new client_cognito_identity_provider_1.InitiateAuthCommand(authParams));
        if (!authResult.AuthenticationResult) {
            return (0, response_1.errorResponse)('Authentication failed', 401);
        }
        const { AccessToken, RefreshToken, IdToken } = authResult.AuthenticationResult;
        const userResult = await cognitoClient.send(new client_cognito_identity_provider_1.GetUserCommand({
            AccessToken: AccessToken
        }));
        const userId = userResult.Username;
        const userRecord = await dynamodb.send(new lib_dynamodb_1.GetCommand({
            TableName: USERS_TABLE,
            Key: { id: userId }
        }));
        let businessData = null;
        if (userRecord.Item?.businessId) {
            const businessResult = await dynamodb.send(new lib_dynamodb_1.GetCommand({
                TableName: BUSINESSES_TABLE,
                Key: { id: userRecord.Item.businessId }
            }));
            businessData = businessResult.Item;
        }
        logCTX(ctx, 'Sign-in successful', { userId, businessId: userRecord.Item?.businessId });
        return (0, response_1.successResponse)({
            message: 'Sign-in successful',
            user: {
                id: userId,
                email: email,
                role: userRecord.Item?.role || 'customer',
                businessId: userRecord.Item?.businessId
            },
            business: businessData,
            tokens: {
                accessToken: AccessToken,
                refreshToken: RefreshToken,
                idToken: IdToken
            }
        });
    }
    catch (error) {
        console.error('Sign-in error:', error);
        logCTX(ctx, 'Sign-in failed', { error: error.name });
        if (error.name === 'NotAuthorizedException') {
            return (0, response_1.errorResponse)('Invalid email or password', 401);
        }
        if (error.name === 'UserNotConfirmedException') {
            return (0, response_1.errorResponse)('Please confirm your email before signing in', 400);
        }
        return (0, response_1.errorResponse)('Sign-in failed. Please try again.', 500);
    }
}
async function handleResendCode(body) {
    const { email } = body;
    if (!email) {
        return (0, response_1.errorResponse)('Email is required', 400);
    }
    try {
        const cognitoClient = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
            region: process.env.COGNITO_REGION || 'us-east-1'
        });
        await cognitoClient.send(new client_cognito_identity_provider_1.ResendConfirmationCodeCommand({
            ClientId: CLIENT_ID,
            Username: email.toLowerCase().trim()
        }));
        return (0, response_1.successResponse)({
            message: 'Confirmation code resent successfully'
        });
    }
    catch (error) {
        console.error('Resend code error:', error);
        if (error.name === 'UserNotFoundException') {
            return (0, response_1.errorResponse)('User not found', 404);
        }
        if (error.name === 'InvalidParameterException') {
            return (0, response_1.errorResponse)('User is already confirmed', 400);
        }
        return (0, response_1.errorResponse)('Failed to resend confirmation code', 500);
    }
}
async function handleGetUserBusinesses(event, ctx) {
    const dynamoDbClient = new client_dynamodb_1.DynamoDBClient({
        region: process.env.DYNAMODB_REGION || 'us-east-1'
    });
    const dynamodb = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoDbClient);
    const cognitoClient = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: process.env.COGNITO_REGION || 'us-east-1'
    });
    async function resolveEmailFromCognitoUserId(cognitoUserId) {
        if (!cognitoUserId)
            return null;
        logBizResolution('get_user_businesses_resolve_email_start', { cognitoUserId });
        const queryParams = {
            TableName: USERS_TABLE,
            IndexName: 'cognitoUserId-index',
            KeyConditionExpression: 'cognitoUserId = :cid',
            ExpressionAttributeValues: { ':cid': cognitoUserId }
        };
        try {
            const q = await dynamodb.send(new lib_dynamodb_1.QueryCommand(queryParams));
            const item = q.Items && q.Items[0];
            if (item && (item.email || item.Email)) {
                logBizResolution('get_user_businesses_resolve_email_query_hit', { viaIndex: true });
                return (item.email || item.Email).toLowerCase();
            }
            logBizResolution('get_user_businesses_resolve_email_query_empty', { viaIndex: true });
        }
        catch (e) {
            if (e.name === 'ValidationException') {
                logBizResolution('get_user_businesses_resolve_email_index_missing', { index: 'cognitoUserId-index' });
            }
            else {
                logBizResolution('get_user_businesses_resolve_email_query_error', { error: e.name, message: e.message });
            }
        }
        try {
            const scanParams = {
                TableName: USERS_TABLE,
                FilterExpression: 'cognitoUserId = :cid',
                ExpressionAttributeValues: { ':cid': cognitoUserId },
                ProjectionExpression: 'email, cognitoUserId'
            };
            const s = await dynamodb.send(new lib_dynamodb_1.ScanCommand(scanParams));
            const item = s.Items && s.Items[0];
            if (item && item.email) {
                logBizResolution('get_user_businesses_resolve_email_scan_hit', { count: s.Count });
                return item.email.toLowerCase();
            }
            logBizResolution('get_user_businesses_resolve_email_scan_empty', { count: s.Count });
        }
        catch (scanErr) {
            logBizResolution('get_user_businesses_resolve_email_scan_error', { error: scanErr.name, message: scanErr.message });
        }
        return null;
    }
    try {
        const claims = event.requestContext.authorizer?.claims;
        let email = claims?.email || claims?.Email;
        let tokenUseClaim = claims?.token_use;
        let cognitoUserId = claims?.sub || claims?.['cognito:username'] || claims?.username;
        const authHeader = event.headers?.Authorization || event.headers?.authorization;
        let rawToken;
        if (authHeader && authHeader.startsWith('Bearer ')) {
            rawToken = authHeader.slice(7);
            try {
                const { jwtDecode } = __webpack_require__(1278);
                const decoded = jwtDecode(rawToken);
                tokenUseClaim = tokenUseClaim || decoded.token_use;
                email = email || decoded.email || decoded.Email;
                cognitoUserId = cognitoUserId || decoded.sub || decoded['cognito:username'] || decoded.username;
                logBizResolution('get_user_businesses_local_decode', {
                    tokenUse: decoded.token_use,
                    hasEmail: !!email,
                    hasSub: !!cognitoUserId
                });
                const currentTime = Math.floor(Date.now() / 1000);
                if (decoded.exp && decoded.exp < currentTime) {
                    logBizResolution('get_user_businesses_token_expired', {
                        exp: decoded.exp,
                        current: currentTime,
                        expired: true
                    });
                    return (0, response_1.createResponse)(401, {
                        success: false,
                        message: 'The incoming token has expired',
                        requestId: ctx.requestId
                    });
                }
            }
            catch (e) {
                logBizResolution('get_user_businesses_local_decode_failed', { message: e.message });
                return (0, response_1.createResponse)(401, {
                    success: false,
                    message: 'Invalid token format',
                    requestId: ctx.requestId
                });
            }
        }
        else {
            logBizResolution('get_user_businesses_no_auth_header', { hasAuthHeader: !!authHeader });
            return (0, response_1.createResponse)(401, {
                success: false,
                message: 'Authorization header missing',
                requestId: ctx.requestId
            });
        }
        if (!email && cognitoUserId) {
            email = await resolveEmailFromCognitoUserId(cognitoUserId);
            if (email) {
                logBizResolution('get_user_businesses_email_resolved_from_sub', { cognitoUserId });
            }
        }
        logBizResolution('get_user_businesses_claims', {
            claims: claims ? 'present' : 'absent',
            emailFound: !!email,
            tokenUse: tokenUseClaim,
            hasCognitoUserId: !!cognitoUserId
        });
        if (!email) {
            logBizResolution('get_user_businesses_error', {
                error: 'MISSING_EMAIL',
                message: 'Email not found in token or database resolution failed'
            });
            return (0, response_1.createResponse)(401, {
                success: false,
                message: 'Email not found in user token',
                requestId: ctx.requestId
            });
        }
        const normalizedEmail = email.toLowerCase().trim();
        logBizResolution('get_user_businesses_start', { email: normalizedEmail, tokenUse: tokenUseClaim || 'unknown' });
        const queryParams = {
            TableName: BUSINESSES_TABLE,
            IndexName: 'email-index',
            KeyConditionExpression: 'email = :email',
            ExpressionAttributeValues: { ':email': normalizedEmail }
        };
        let result;
        try {
            result = await dynamodb.send(new lib_dynamodb_1.QueryCommand(queryParams));
        }
        catch (qErr) {
            logBizResolution('get_user_businesses_error', {
                email: normalizedEmail,
                error: qErr.name,
                message: qErr.message
            });
            console.error('❌ Error querying businesses by email:', qErr);
            if (qErr.name === 'ValidationException' && /specified index: email-index/i.test(qErr.message || '')) {
                return (0, response_1.createResponse)(500, {
                    success: false,
                    message: `Missing GSI 'email-index' on ${BUSINESSES_TABLE}. Please create the index on attribute 'email'.`,
                    requestId: ctx.requestId
                });
            }
            return (0, response_1.createResponse)(500, {
                success: false,
                message: 'Failed to fetch user businesses',
                requestId: ctx.requestId
            });
        }
        const Items = result.Items;
        logBizResolution('get_user_businesses_result', {
            email: normalizedEmail,
            count: Items ? Items.length : 0
        });
        if (Items && Items.length > 0) {
            return (0, response_1.createResponse)(200, {
                success: true,
                businesses: Items,
                message: `Found ${Items.length} business(es)`,
                requestId: ctx.requestId
            });
        }
        else {
            return (0, response_1.createResponse)(200, {
                success: true,
                businesses: [],
                message: 'No businesses found for this user',
                requestId: ctx.requestId
            });
        }
    }
    catch (error) {
        console.error('Error fetching user businesses:', error);
        logBizResolution('get_user_businesses_exception', { message: error.message, name: error.name });
        if (error.name === 'NotAuthorizedException') {
            return (0, response_1.createResponse)(401, {
                success: false,
                message: 'Invalid or expired access token',
                requestId: ctx.requestId
            });
        }
        return (0, response_1.createResponse)(500, {
            success: false,
            message: 'Failed to fetch user businesses',
            requestId: ctx.requestId
        });
    }
}
function handleHealth() {
    return (0, response_1.successResponse)({
        status: 'healthy',
        service: 'auth-service',
        timestamp: new Date().toISOString()
    });
}


/***/ }),

/***/ 9051:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Command: () => (/* reexport safe */ _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   BatchGetItemCommand: () => (/* binding */ BatchGetItemCommand)
/* harmony export */ });
/* harmony import */ var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(427);
/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1208);
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9764);
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7051);
/* harmony import */ var _protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6021);






class BatchGetItemCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command
    .classBuilder()
    .ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_3__.commonParams,
    ResourceArnList: { type: "operationContextParams", get: (input) => Object.keys(input?.RequestItems ?? {}) },
})
    .m(function (Command, cs, config, o) {
    return [
        (0,_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0,_smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DynamoDB_20120810", "BatchGetItem", {})
    .n("DynamoDBClient", "BatchGetItemCommand")
    .f(void 0, void 0)
    .ser(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.se_BatchGetItemCommand)
    .de(_protocols_Aws_json1_0__WEBPACK_IMPORTED_MODULE_4__.de_BatchGetItemCommand)
    .build() {
}


/***/ }),

/***/ 9290:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromArrayBuffer: () => (/* binding */ fromArrayBuffer),
/* harmony export */   fromString: () => (/* binding */ fromString)
/* harmony export */ });
/* harmony import */ var _smithy_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3695);
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(181);
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__);


const fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
    if (!(0,_smithy_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
    }
    return buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(input, offset, length);
};
const fromString = (input, encoding) => {
    if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
    }
    return encoding ? buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(input, encoding) : buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(input);
};


/***/ }),

/***/ 9359:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  getLoggerPlugin: () => (/* reexport */ getLoggerPlugin),
  loggerMiddleware: () => (/* reexport */ loggerMiddleware),
  loggerMiddlewareOptions: () => (/* reexport */ loggerMiddlewareOptions)
});

;// ./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
const loggerMiddleware = () => (next, context) => async (args) => {
    try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger?.info?.({
            clientName,
            commandName,
            input: inputFilterSensitiveLog(args.input),
            output: outputFilterSensitiveLog(outputWithoutMetadata),
            metadata: $metadata,
        });
        return response;
    }
    catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        logger?.error?.({
            clientName,
            commandName,
            input: inputFilterSensitiveLog(args.input),
            error,
            metadata: error.$metadata,
        });
        throw error;
    }
};
const loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: ["LOGGER"],
    step: "initialize",
    override: true,
};
const getLoggerPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    },
});

;// ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js



/***/ }),

/***/ 9764:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Client: () => (/* reexport */ Client),
  Command: () => (/* reexport */ Command),
  LazyJsonString: () => (/* reexport */ LazyJsonString),
  NoOpLogger: () => (/* reexport */ NoOpLogger),
  NumericValue: () => (/* reexport */ NumericValue),
  SENSITIVE_STRING: () => (/* reexport */ SENSITIVE_STRING),
  ServiceException: () => (/* reexport */ ServiceException),
  _json: () => (/* reexport */ _json),
  collectBody: () => (/* reexport */ collectBody),
  convertMap: () => (/* reexport */ convertMap),
  copyDocumentWithTransform: () => (/* reexport */ copyDocumentWithTransform),
  createAggregatedClient: () => (/* reexport */ createAggregatedClient),
  dateToUtcString: () => (/* reexport */ dateToUtcString),
  decorateServiceException: () => (/* reexport */ decorateServiceException),
  emitWarningIfUnsupportedVersion: () => (/* reexport */ emitWarningIfUnsupportedVersion),
  expectBoolean: () => (/* reexport */ expectBoolean),
  expectByte: () => (/* reexport */ expectByte),
  expectFloat32: () => (/* reexport */ expectFloat32),
  expectInt: () => (/* reexport */ expectInt),
  expectInt32: () => (/* reexport */ expectInt32),
  expectLong: () => (/* reexport */ expectLong),
  expectNonNull: () => (/* reexport */ expectNonNull),
  expectNumber: () => (/* reexport */ expectNumber),
  expectObject: () => (/* reexport */ expectObject),
  expectShort: () => (/* reexport */ expectShort),
  expectString: () => (/* reexport */ expectString),
  expectUnion: () => (/* reexport */ expectUnion),
  extendedEncodeURIComponent: () => (/* reexport */ extended_encode_uri_component.extendedEncodeURIComponent),
  generateIdempotencyToken: () => (/* reexport */ esm_node_v4),
  getArrayIfSingleItem: () => (/* reexport */ getArrayIfSingleItem),
  getDefaultClientConfiguration: () => (/* reexport */ getDefaultClientConfiguration),
  getDefaultExtensionConfiguration: () => (/* reexport */ getDefaultExtensionConfiguration),
  getValueFromTextNode: () => (/* reexport */ getValueFromTextNode),
  handleFloat: () => (/* reexport */ handleFloat),
  isSerializableHeaderValue: () => (/* reexport */ isSerializableHeaderValue),
  limitedParseDouble: () => (/* reexport */ limitedParseDouble),
  limitedParseFloat: () => (/* reexport */ limitedParseFloat),
  limitedParseFloat32: () => (/* reexport */ limitedParseFloat32),
  loadConfigsForDefaultMode: () => (/* reexport */ loadConfigsForDefaultMode),
  logger: () => (/* reexport */ logger),
  map: () => (/* reexport */ map),
  nv: () => (/* reexport */ nv),
  parseBoolean: () => (/* reexport */ parseBoolean),
  parseEpochTimestamp: () => (/* reexport */ parseEpochTimestamp),
  parseRfc3339DateTime: () => (/* reexport */ parseRfc3339DateTime),
  parseRfc3339DateTimeWithOffset: () => (/* reexport */ parseRfc3339DateTimeWithOffset),
  parseRfc7231DateTime: () => (/* reexport */ parseRfc7231DateTime),
  quoteHeader: () => (/* reexport */ quoteHeader),
  resolveDefaultRuntimeConfig: () => (/* reexport */ resolveDefaultRuntimeConfig),
  resolvedPath: () => (/* reexport */ resolve_path.resolvedPath),
  serializeDateTime: () => (/* reexport */ serializeDateTime),
  serializeFloat: () => (/* reexport */ serializeFloat),
  splitEvery: () => (/* reexport */ splitEvery),
  splitHeader: () => (/* reexport */ splitHeader),
  strictParseByte: () => (/* reexport */ strictParseByte),
  strictParseDouble: () => (/* reexport */ strictParseDouble),
  strictParseFloat: () => (/* reexport */ strictParseFloat),
  strictParseFloat32: () => (/* reexport */ strictParseFloat32),
  strictParseInt: () => (/* reexport */ strictParseInt),
  strictParseInt32: () => (/* reexport */ strictParseInt32),
  strictParseLong: () => (/* reexport */ strictParseLong),
  strictParseShort: () => (/* reexport */ strictParseShort),
  take: () => (/* reexport */ take),
  throwDefaultError: () => (/* reexport */ throwDefaultError),
  withBaseException: () => (/* reexport */ withBaseException)
});

;// ./node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js
const getAllAliases = (name, aliases) => {
    const _aliases = [];
    if (name) {
        _aliases.push(name);
    }
    if (aliases) {
        for (const alias of aliases) {
            _aliases.push(alias);
        }
    }
    return _aliases;
};
const getMiddlewareNameWithAliases = (name, aliases) => {
    return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
};
const constructStack = () => {
    let absoluteEntries = [];
    let relativeEntries = [];
    let identifyOnResolve = false;
    const entriesNameSet = new Set();
    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||
        priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
            const aliases = getAllAliases(entry.name, entry.aliases);
            if (aliases.includes(toRemove)) {
                isRemoved = true;
                for (const alias of aliases) {
                    entriesNameSet.delete(alias);
                }
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
            if (entry.middleware === toRemove) {
                isRemoved = true;
                for (const alias of getAllAliases(entry.name, entry.aliases)) {
                    entriesNameSet.delete(alias);
                }
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
            toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
            toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
    };
    const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            }
            else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            }
            else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
            const normalizedEntry = {
                ...entry,
                before: [],
                after: [],
            };
            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
                normalizedEntriesNameMap[alias] = normalizedEntry;
            }
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
            const normalizedEntry = {
                ...entry,
                before: [],
                after: [],
            };
            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
                normalizedEntriesNameMap[alias] = normalizedEntry;
            }
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
            if (entry.toMiddleware) {
                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) {
                    if (debug) {
                        return;
                    }
                    throw new Error(`${entry.toMiddleware} is not found when adding ` +
                        `${getMiddlewareNameWithAliases(entry.name, entry.aliases)} ` +
                        `middleware ${entry.relation} ${entry.toMiddleware}`);
                }
                if (entry.relation === "after") {
                    toMiddleware.after.push(entry);
                }
                if (entry.relation === "before") {
                    toMiddleware.before.push(entry);
                }
            }
        });
        const mainChain = sort(normalizedAbsoluteEntries)
            .map(expandRelativeMiddlewareList)
            .reduce((wholeList, expandedMiddlewareList) => {
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
        }, []);
        return mainChain;
    };
    const stack = {
        add: (middleware, options = {}) => {
            const { name, override, aliases: _aliases } = options;
            const entry = {
                step: "initialize",
                priority: "normal",
                middleware,
                ...options,
            };
            const aliases = getAllAliases(name, _aliases);
            if (aliases.length > 0) {
                if (aliases.some((alias) => entriesNameSet.has(alias))) {
                    if (!override)
                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
                    for (const alias of aliases) {
                        const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));
                        if (toOverrideIndex === -1) {
                            continue;
                        }
                        const toOverride = absoluteEntries[toOverrideIndex];
                        if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                            throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ` +
                                `${toOverride.priority} priority in ${toOverride.step} step cannot ` +
                                `be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ` +
                                `${entry.priority} priority in ${entry.step} step.`);
                        }
                        absoluteEntries.splice(toOverrideIndex, 1);
                    }
                }
                for (const alias of aliases) {
                    entriesNameSet.add(alias);
                }
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
            const { name, override, aliases: _aliases } = options;
            const entry = {
                middleware,
                ...options,
            };
            const aliases = getAllAliases(name, _aliases);
            if (aliases.length > 0) {
                if (aliases.some((alias) => entriesNameSet.has(alias))) {
                    if (!override)
                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
                    for (const alias of aliases) {
                        const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));
                        if (toOverrideIndex === -1) {
                            continue;
                        }
                        const toOverride = relativeEntries[toOverrideIndex];
                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                            throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ` +
                                `${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` +
                                `by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} ` +
                                `"${entry.toMiddleware}" middleware.`);
                        }
                        relativeEntries.splice(toOverrideIndex, 1);
                    }
                }
                for (const alias of aliases) {
                    entriesNameSet.add(alias);
                }
            }
            relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
            plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
            if (typeof toRemove === "string")
                return removeByName(toRemove);
            else
                return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
            let isRemoved = false;
            const filterCb = (entry) => {
                const { tags, name, aliases: _aliases } = entry;
                if (tags && tags.includes(toRemove)) {
                    const aliases = getAllAliases(name, _aliases);
                    for (const alias of aliases) {
                        entriesNameSet.delete(alias);
                    }
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: (from) => {
            const cloned = cloneTo(constructStack());
            cloned.use(from);
            cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
            return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
            return getMiddlewareList(true).map((mw) => {
                const step = mw.step ??
                    mw.relation +
                        " " +
                        mw.toMiddleware;
                return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
            });
        },
        identifyOnResolve(toggle) {
            if (typeof toggle === "boolean")
                identifyOnResolve = toggle;
            return identifyOnResolve;
        },
        resolve: (handler, context) => {
            for (const middleware of getMiddlewareList()
                .map((entry) => entry.middleware)
                .reverse()) {
                handler = middleware(handler, context);
            }
            if (identifyOnResolve) {
                console.log(stack.identify());
            }
            return handler;
        },
    };
    return stack;
};
const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1,
};
const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1,
};

;// ./node_modules/@smithy/middleware-stack/dist-es/index.js


;// ./node_modules/@smithy/smithy-client/dist-es/client.js

class Client {
    constructor(config) {
        this.config = config;
        this.middlewareStack = constructStack();
    }
    send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const useHandlerCache = options === undefined && this.config.cacheMiddleware === true;
        let handler;
        if (useHandlerCache) {
            if (!this.handlers) {
                this.handlers = new WeakMap();
            }
            const handlers = this.handlers;
            if (handlers.has(command.constructor)) {
                handler = handlers.get(command.constructor);
            }
            else {
                handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
                handlers.set(command.constructor, handler);
            }
        }
        else {
            delete this.handlers;
            handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
            handler(command)
                .then((result) => callback(null, result.output), (err) => callback(err))
                .catch(() => { });
        }
        else {
            return handler(command).then((result) => result.output);
        }
    }
    destroy() {
        this.config?.requestHandler?.destroy?.();
        delete this.handlers;
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/util-stream/dist-es/index.js + 23 modules
var dist_es = __webpack_require__(2701);
;// ./node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js

const collectBody = async (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return dist_es.Uint8ArrayBlobAdapter.mutate(streamBody);
    }
    if (!streamBody) {
        return dist_es.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
    }
    const fromContext = context.streamCollector(streamBody);
    return dist_es.Uint8ArrayBlobAdapter.mutate(await fromContext);
};

;// ./node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js


// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var types_dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/smithy-client/dist-es/command.js


class Command {
    constructor() {
        this.middlewareStack = constructStack();
    }
    static classBuilder() {
        return new ClassBuilder();
    }
    resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor, }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
            this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog,
            outputFilterSensitiveLog,
            [types_dist_es.SMITHY_CONTEXT_KEY]: {
                commandInstance: this,
                ...smithyContext,
            },
            ...additionalContext,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
}
class ClassBuilder {
    constructor() {
        this._init = () => { };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_) => _;
        this._outputFilterSensitiveLog = (_) => _;
        this._serializer = null;
        this._deserializer = null;
    }
    init(cb) {
        this._init = cb;
    }
    ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
    }
    m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
    }
    s(service, operation, smithyContext = {}) {
        this._smithyContext = {
            service,
            operation,
            ...smithyContext,
        };
        return this;
    }
    c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
    }
    n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
    }
    f(inputFilter = (_) => _, outputFilter = (_) => _) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
    }
    ser(serializer) {
        this._serializer = serializer;
        return this;
    }
    de(deserializer) {
        this._deserializer = deserializer;
        return this;
    }
    sc(operation) {
        this._operationSchema = operation;
        this._smithyContext.operationSchema = operation;
        return this;
    }
    build() {
        const closure = this;
        let CommandRef;
        return (CommandRef = class extends Command {
            static getEndpointParameterInstructions() {
                return closure._ep;
            }
            constructor(...[input]) {
                super();
                this.serialize = closure._serializer;
                this.deserialize = closure._deserializer;
                this.input = input ?? {};
                closure._init(this);
                this.schema = closure._operationSchema;
            }
            resolveMiddleware(stack, configuration, options) {
                return this.resolveMiddlewareWithContext(stack, configuration, options, {
                    CommandCtor: CommandRef,
                    middlewareFn: closure._middlewareFn,
                    clientName: closure._clientName,
                    commandName: closure._commandName,
                    inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
                    outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
                    smithyContext: closure._smithyContext,
                    additionalContext: closure._additionalContext,
                });
            }
        });
    }
}

;// ./node_modules/@smithy/smithy-client/dist-es/constants.js
const SENSITIVE_STRING = "***SensitiveInformation***";

;// ./node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js
const createAggregatedClient = (commands, Client) => {
    for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function (args, optionsOrCb, cb) {
            const command = new CommandCtor(args);
            if (typeof optionsOrCb === "function") {
                this.send(command, optionsOrCb);
            }
            else if (typeof cb === "function") {
                if (typeof optionsOrCb !== "object")
                    throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
                this.send(command, optionsOrCb || {}, cb);
            }
            else {
                return this.send(command, optionsOrCb);
            }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
    }
};

;// ./node_modules/@smithy/smithy-client/dist-es/exceptions.js
class ServiceException extends Error {
    constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
    }
    static isInstance(value) {
        if (!value)
            return false;
        const candidate = value;
        return (ServiceException.prototype.isPrototypeOf(candidate) ||
            (Boolean(candidate.$fault) &&
                Boolean(candidate.$metadata) &&
                (candidate.$fault === "client" || candidate.$fault === "server")));
    }
    static [Symbol.hasInstance](instance) {
        if (!instance)
            return false;
        const candidate = instance;
        if (this === ServiceException) {
            return ServiceException.isInstance(instance);
        }
        if (ServiceException.isInstance(instance)) {
            if (candidate.name && this.name) {
                return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;
            }
            return this.prototype.isPrototypeOf(instance);
        }
        return false;
    }
}
const decorateServiceException = (exception, additions = {}) => {
    Object.entries(additions)
        .filter(([, v]) => v !== undefined)
        .forEach(([k, v]) => {
        if (exception[k] == undefined || exception[k] === "") {
            exception[k] = v;
        }
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
};

;// ./node_modules/@smithy/smithy-client/dist-es/default-error-handler.js

const throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata,
    });
    throw decorateServiceException(response, parsedBody);
};
const withBaseException = (ExceptionCtor) => {
    return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});

;// ./node_modules/@smithy/smithy-client/dist-es/defaults-mode.js
const loadConfigsForDefaultMode = (mode) => {
    switch (mode) {
        case "standard":
            return {
                retryMode: "standard",
                connectionTimeout: 3100,
            };
        case "in-region":
            return {
                retryMode: "standard",
                connectionTimeout: 1100,
            };
        case "cross-region":
            return {
                retryMode: "standard",
                connectionTimeout: 3100,
            };
        case "mobile":
            return {
                retryMode: "standard",
                connectionTimeout: 30000,
            };
        default:
            return {};
    }
};

;// ./node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js
let warningEmitted = false;
const emitWarningIfUnsupportedVersion = (version) => {
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 16) {
        warningEmitted = true;
    }
};

// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js
var extended_encode_uri_component = __webpack_require__(7916);
;// ./node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js


;// ./node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js


const getChecksumConfiguration = (runtimeConfig) => {
    const checksumAlgorithms = [];
    for (const id in types_dist_es.AlgorithmId) {
        const algorithmId = types_dist_es.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === undefined) {
            continue;
        }
        checksumAlgorithms.push({
            algorithmId: () => algorithmId,
            checksumConstructor: () => runtimeConfig[algorithmId],
        });
    }
    return {
        addChecksumAlgorithm(algo) {
            checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
            return checksumAlgorithms;
        },
    };
};
const resolveChecksumRuntimeConfig = (clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
};

;// ./node_modules/@smithy/smithy-client/dist-es/extensions/retry.js
const getRetryConfiguration = (runtimeConfig) => {
    return {
        setRetryStrategy(retryStrategy) {
            runtimeConfig.retryStrategy = retryStrategy;
        },
        retryStrategy() {
            return runtimeConfig.retryStrategy;
        },
    };
};
const resolveRetryRuntimeConfig = (retryStrategyConfiguration) => {
    const runtimeConfig = {};
    runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
    return runtimeConfig;
};

;// ./node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js


const getDefaultExtensionConfiguration = (runtimeConfig) => {
    return Object.assign(getChecksumConfiguration(runtimeConfig), getRetryConfiguration(runtimeConfig));
};
const getDefaultClientConfiguration = getDefaultExtensionConfiguration;
const resolveDefaultRuntimeConfig = (config) => {
    return Object.assign(resolveChecksumRuntimeConfig(config), resolveRetryRuntimeConfig(config));
};

;// ./node_modules/@smithy/smithy-client/dist-es/extensions/index.js


;// ./node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js
const getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];

;// ./node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js
const getValueFromTextNode = (obj) => {
    const textNodeName = "#text";
    for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {
            obj[key] = obj[key][textNodeName];
        }
        else if (typeof obj[key] === "object" && obj[key] !== null) {
            obj[key] = getValueFromTextNode(obj[key]);
        }
    }
    return obj;
};

;// ./node_modules/@smithy/smithy-client/dist-es/is-serializable-header-value.js
const isSerializableHeaderValue = (value) => {
    return value != null;
};

;// ./node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js
class NoOpLogger {
    trace() { }
    debug() { }
    info() { }
    warn() { }
    error() { }
}

;// ./node_modules/@smithy/smithy-client/dist-es/object-mapping.js
function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
    }
    else {
        target = arg0;
        if (typeof arg1 === "function") {
            filter = arg1;
            instructions = arg2;
            return mapWithFilter(target, filter, instructions);
        }
        else {
            instructions = arg1;
        }
    }
    for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
            target[key] = instructions[key];
            continue;
        }
        applyInstruction(target, null, instructions, key);
    }
    return target;
}
const convertMap = (target) => {
    const output = {};
    for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
    }
    return output;
};
const take = (source, instructions) => {
    const out = {};
    for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
    }
    return out;
};
const mapWithFilter = (target, filter, instructions) => {
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
            _instructions[key] = value;
        }
        else {
            if (typeof value === "function") {
                _instructions[key] = [filter, value()];
            }
            else {
                _instructions[key] = [filter, value];
            }
        }
        return _instructions;
    }, {}));
};
const applyInstruction = (target, source, instructions, targetKey) => {
    if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
            instruction = [, instruction];
        }
        const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if ((typeof filter === "function" && filter(source[sourceKey])) || (typeof filter !== "function" && !!filter)) {
            target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === undefined && (_value = value()) != null;
        const customFilterPassed = (typeof filter === "function" && !!filter(void 0)) || (typeof filter !== "function" && !!filter);
        if (defaultFilterPassed) {
            target[targetKey] = _value;
        }
        else if (customFilterPassed) {
            target[targetKey] = value();
        }
    }
    else {
        const defaultFilterPassed = filter === undefined && value != null;
        const customFilterPassed = (typeof filter === "function" && !!filter(value)) || (typeof filter !== "function" && !!filter);
        if (defaultFilterPassed || customFilterPassed) {
            target[targetKey] = value;
        }
    }
};
const nonNullish = (_) => _ != null;
const pass = (_) => _;

// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js
var resolve_path = __webpack_require__(3351);
;// ./node_modules/@smithy/smithy-client/dist-es/resolve-path.js


;// ./node_modules/@smithy/smithy-client/dist-es/ser-utils.js
const serializeFloat = (value) => {
    if (value !== value) {
        return "NaN";
    }
    switch (value) {
        case Infinity:
            return "Infinity";
        case -Infinity:
            return "-Infinity";
        default:
            return value;
    }
};
const serializeDateTime = (date) => date.toISOString().replace(".000Z", "Z");

;// ./node_modules/@smithy/smithy-client/dist-es/serde-json.js
const _json = (obj) => {
    if (obj == null) {
        return {};
    }
    if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null).map(_json);
    }
    if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
            if (obj[key] == null) {
                continue;
            }
            target[key] = _json(obj[key]);
        }
        return target;
    }
    return obj;
};

;// ./node_modules/@smithy/core/dist-es/submodules/serde/copyDocumentWithTransform.js
const copyDocumentWithTransform = (source, schemaRef, transform = (_) => _) => source;

;// ./node_modules/@smithy/core/dist-es/submodules/serde/parse-utils.js
const parseBoolean = (value) => {
    switch (value) {
        case "true":
            return true;
        case "false":
            return false;
        default:
            throw new Error(`Unable to parse boolean value "${value}"`);
    }
};
const expectBoolean = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "number") {
        if (value === 0 || value === 1) {
            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
            return false;
        }
        if (value === 1) {
            return true;
        }
    }
    if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
            return false;
        }
        if (lower === "true") {
            return true;
        }
    }
    if (typeof value === "boolean") {
        return value;
    }
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
};
const expectNumber = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
            if (String(parsed) !== String(value)) {
                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
            }
            return parsed;
        }
    }
    if (typeof value === "number") {
        return value;
    }
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
};
const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
const expectFloat32 = (value) => {
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
            throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
    }
    return expected;
};
const expectLong = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
    }
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
};
const expectInt = expectLong;
const expectInt32 = (value) => expectSizedInt(value, 32);
const expectShort = (value) => expectSizedInt(value, 16);
const expectByte = (value) => expectSizedInt(value, 8);
const expectSizedInt = (value, size) => {
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    }
    return expected;
};
const castInt = (value, size) => {
    switch (size) {
        case 32:
            return Int32Array.of(value)[0];
        case 16:
            return Int16Array.of(value)[0];
        case 8:
            return Int8Array.of(value)[0];
    }
};
const expectNonNull = (value, location) => {
    if (value === null || value === undefined) {
        if (location) {
            throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
    }
    return value;
};
const expectObject = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "object" && !Array.isArray(value)) {
        return value;
    }
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
};
const expectString = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        return value;
    }
    if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
};
const expectUnion = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject)
        .filter(([, v]) => v != null)
        .map(([k]) => k);
    if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    }
    if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    }
    return asObject;
};
const strictParseDouble = (value) => {
    if (typeof value == "string") {
        return expectNumber(parseNumber(value));
    }
    return expectNumber(value);
};
const strictParseFloat = strictParseDouble;
const strictParseFloat32 = (value) => {
    if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
    }
    return expectFloat32(value);
};
const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
const parseNumber = (value) => {
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
    }
    return parseFloat(value);
};
const limitedParseDouble = (value) => {
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return expectNumber(value);
};
const handleFloat = limitedParseDouble;
const limitedParseFloat = limitedParseDouble;
const limitedParseFloat32 = (value) => {
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return expectFloat32(value);
};
const parseFloatString = (value) => {
    switch (value) {
        case "NaN":
            return NaN;
        case "Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            throw new Error(`Unable to parse float value: ${value}`);
    }
};
const strictParseLong = (value) => {
    if (typeof value === "string") {
        return expectLong(parseNumber(value));
    }
    return expectLong(value);
};
const strictParseInt = strictParseLong;
const strictParseInt32 = (value) => {
    if (typeof value === "string") {
        return expectInt32(parseNumber(value));
    }
    return expectInt32(value);
};
const strictParseShort = (value) => {
    if (typeof value === "string") {
        return expectShort(parseNumber(value));
    }
    return expectShort(value);
};
const strictParseByte = (value) => {
    if (typeof value === "string") {
        return expectByte(parseNumber(value));
    }
    return expectByte(value);
};
const stackTraceWarning = (message) => {
    return String(new TypeError(message).stack || message)
        .split("\n")
        .slice(0, 5)
        .filter((s) => !s.includes("stackTraceWarning"))
        .join("\n");
};
const logger = {
    warn: console.warn,
};

;// ./node_modules/@smithy/core/dist-es/submodules/serde/date-utils.js

const DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
const MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
const RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
const parseRfc3339DateTime = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339.exec(value);
    if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
};
const RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
const parseRfc3339DateTimeWithOffset = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    }
    return date;
};
const IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
const parseRfc7231DateTime = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
    }
    let match = IMF_FIXDATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds,
        }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
};
const parseEpochTimestamp = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    let valueAsDouble;
    if (typeof value === "number") {
        valueAsDouble = value;
    }
    else if (typeof value === "string") {
        valueAsDouble = strictParseDouble(value);
    }
    else if (typeof value === "object" && value.tag === 1) {
        valueAsDouble = value.value;
    }
    else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    }
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    }
    return new Date(Math.round(valueAsDouble * 1000));
};
const buildDate = (year, month, day, time) => {
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
const parseTwoDigitYear = (value) => {
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
    }
    return valueInThisCentury;
};
const FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;
const adjustRfc850Year = (input) => {
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    }
    return input;
};
const parseMonthByShortName = (value) => {
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
    }
    return monthIdx + 1;
};
const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const validateDayOfMonth = (year, month, day) => {
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
    }
    if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
    }
};
const isLeapYear = (year) => {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
const parseDateValue = (value, type, lower, upper) => {
    const dateVal = strictParseByte(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    }
    return dateVal;
};
const parseMilliseconds = (value) => {
    if (value === null || value === undefined) {
        return 0;
    }
    return strictParseFloat32("0." + value) * 1000;
};
const parseOffsetToMilliseconds = (value) => {
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") {
        direction = 1;
    }
    else if (directionStr == "-") {
        direction = -1;
    }
    else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    }
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60 * 1000;
};
const stripLeadingZeroes = (value) => {
    let idx = 0;
    while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
    }
    if (idx === 0) {
        return value;
    }
    return value.slice(idx);
};

// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6982);
var external_crypto_default = /*#__PURE__*/__webpack_require__.n(external_crypto_);
;// ./node_modules/@smithy/core/node_modules/uuid/dist/esm-node/native.js

/* harmony default export */ const esm_node_native = ({
  randomUUID: (external_crypto_default()).randomUUID
});
;// ./node_modules/@smithy/core/node_modules/uuid/dist/esm-node/rng.js

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    external_crypto_default().randomFillSync(rnds8Pool);
    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
;// ./node_modules/@smithy/core/node_modules/uuid/dist/esm-node/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);
;// ./node_modules/@smithy/core/node_modules/uuid/dist/esm-node/validate.js


function validate(uuid) {
  return typeof uuid === 'string' && regex.test(uuid);
}

/* harmony default export */ const esm_node_validate = (validate);
;// ./node_modules/@smithy/core/node_modules/uuid/dist/esm-node/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!esm_node_validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_node_stringify = (stringify);
;// ./node_modules/@smithy/core/node_modules/uuid/dist/esm-node/v4.js




function v4(options, buf, offset) {
  if (esm_node_native.randomUUID && !buf && !options) {
    return esm_node_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/* harmony default export */ const esm_node_v4 = (v4);
;// ./node_modules/@smithy/core/dist-es/submodules/serde/generateIdempotencyToken.js



;// ./node_modules/@smithy/core/dist-es/submodules/serde/lazy-json.js
const LazyJsonString = function LazyJsonString(val) {
    const str = Object.assign(new String(val), {
        deserializeJSON() {
            return JSON.parse(String(val));
        },
        toString() {
            return String(val);
        },
        toJSON() {
            return String(val);
        },
    });
    return str;
};
LazyJsonString.from = (object) => {
    if (object && typeof object === "object" && (object instanceof LazyJsonString || "deserializeJSON" in object)) {
        return object;
    }
    else if (typeof object === "string" || Object.getPrototypeOf(object) === String.prototype) {
        return LazyJsonString(String(object));
    }
    return LazyJsonString(JSON.stringify(object));
};
LazyJsonString.fromObject = LazyJsonString.from;

;// ./node_modules/@smithy/core/dist-es/submodules/serde/quote-header.js
function quoteHeader(part) {
    if (part.includes(",") || part.includes('"')) {
        part = `"${part.replace(/"/g, '\\"')}"`;
    }
    return part;
}

;// ./node_modules/@smithy/core/dist-es/submodules/serde/split-every.js
function splitEvery(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    }
    const segments = value.split(delimiter);
    if (numDelimiters === 1) {
        return segments;
    }
    const compoundSegments = [];
    let currentSegment = "";
    for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
            currentSegment = segments[i];
        }
        else {
            currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
            compoundSegments.push(currentSegment);
            currentSegment = "";
        }
    }
    if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
    }
    return compoundSegments;
}

;// ./node_modules/@smithy/core/dist-es/submodules/serde/split-header.js
const splitHeader = (value) => {
    const z = value.length;
    const values = [];
    let withinQuotes = false;
    let prevChar = undefined;
    let anchor = 0;
    for (let i = 0; i < z; ++i) {
        const char = value[i];
        switch (char) {
            case `"`:
                if (prevChar !== "\\") {
                    withinQuotes = !withinQuotes;
                }
                break;
            case ",":
                if (!withinQuotes) {
                    values.push(value.slice(anchor, i));
                    anchor = i + 1;
                }
                break;
            default:
        }
        prevChar = char;
    }
    values.push(value.slice(anchor));
    return values.map((v) => {
        v = v.trim();
        const z = v.length;
        if (z < 2) {
            return v;
        }
        if (v[0] === `"` && v[z - 1] === `"`) {
            v = v.slice(1, z - 1);
        }
        return v.replace(/\\"/g, '"');
    });
};

;// ./node_modules/@smithy/core/dist-es/submodules/serde/value/NumericValue.js
class NumericValue {
    constructor(string, type) {
        this.string = string;
        this.type = type;
        let dot = 0;
        for (let i = 0; i < string.length; ++i) {
            const char = string.charCodeAt(i);
            if (i === 0 && char === 45) {
                continue;
            }
            if (char === 46) {
                if (dot) {
                    throw new Error("@smithy/core/serde - NumericValue must contain at most one decimal point.");
                }
                dot = 1;
                continue;
            }
            if (char < 48 || char > 57) {
                throw new Error(`@smithy/core/serde - NumericValue must only contain [0-9], at most one decimal point ".", and an optional negation prefix "-".`);
            }
        }
    }
    toString() {
        return this.string;
    }
    static [Symbol.hasInstance](object) {
        if (!object || typeof object !== "object") {
            return false;
        }
        const _nv = object;
        const prototypeMatch = NumericValue.prototype.isPrototypeOf(object.constructor?.prototype);
        if (prototypeMatch) {
            return prototypeMatch;
        }
        if (typeof _nv.string === "string" && typeof _nv.type === "string" && _nv.constructor?.name === "NumericValue") {
            return true;
        }
        return prototypeMatch;
    }
}
function nv(input) {
    return new NumericValue(String(input), "bigDecimal");
}

;// ./node_modules/@smithy/core/dist-es/submodules/serde/index.js










;// ./node_modules/@smithy/smithy-client/dist-es/index.js






















/***/ }),

/***/ 9896:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 9938:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * Mnemonist Iterable Function
 * ============================
 *
 * Harmonized iteration helpers over mixed iterable targets.
 */
var forEach = __webpack_require__(156);

var typed = __webpack_require__(5384);

/**
 * Function used to determine whether the given object supports array-like
 * random access.
 *
 * @param  {any} target - Target object.
 * @return {boolean}
 */
function isArrayLike(target) {
  return Array.isArray(target) || typed.isTypedArray(target);
}

/**
 * Function used to guess the length of the structure over which we are going
 * to iterate.
 *
 * @param  {any} target - Target object.
 * @return {number|undefined}
 */
function guessLength(target) {
  if (typeof target.length === 'number')
    return target.length;

  if (typeof target.size === 'number')
    return target.size;

  return;
}

/**
 * Function used to convert an iterable to an array.
 *
 * @param  {any}   target - Iteration target.
 * @return {array}
 */
function toArray(target) {
  var l = guessLength(target);

  var array = typeof l === 'number' ? new Array(l) : [];

  var i = 0;

  // TODO: we could optimize when given target is array like
  forEach(target, function(value) {
    array[i++] = value;
  });

  return array;
}

/**
 * Same as above but returns a supplementary indices array.
 *
 * @param  {any}   target - Iteration target.
 * @return {array}
 */
function toArrayWithIndices(target) {
  var l = guessLength(target);

  var IndexArray = typeof l === 'number' ?
    typed.getPointerArray(l) :
    Array;

  var array = typeof l === 'number' ? new Array(l) : [];
  var indices = typeof l === 'number' ? new IndexArray(l) : [];

  var i = 0;

  // TODO: we could optimize when given target is array like
  forEach(target, function(value) {
    array[i] = value;
    indices[i] = i++;
  });

  return [array, indices];
}

/**
 * Exporting.
 */
exports.isArrayLike = isArrayLike;
exports.guessLength = guessLength;
exports.toArray = toArray;
exports.toArrayWithIndices = toArrayWithIndices;


/***/ }),

/***/ 9987:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  loadConfig: () => (/* reexport */ loadConfig)
});

// EXTERNAL MODULE: ./node_modules/@smithy/property-provider/dist-es/index.js + 6 modules
var dist_es = __webpack_require__(8112);
;// ./node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js
function getSelectorName(functionString) {
    try {
        const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
        constants.delete("CONFIG");
        constants.delete("CONFIG_PREFIX_SEPARATOR");
        constants.delete("ENV");
        return [...constants].join(", ");
    }
    catch (e) {
        return functionString;
    }
}

;// ./node_modules/@smithy/node-config-provider/dist-es/fromEnv.js


const fromEnv = (envVarSelector, options) => async () => {
    try {
        const config = envVarSelector(process.env, options);
        if (config === undefined) {
            throw new Error();
        }
        return config;
    }
    catch (e) {
        throw new dist_es.CredentialsProviderError(e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`, { logger: options?.logger });
    }
};

// EXTERNAL MODULE: ./node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 14 modules
var shared_ini_file_loader_dist_es = __webpack_require__(3054);
;// ./node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js



const fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
    const profile = (0,shared_ini_file_loader_dist_es.getProfileName)(init);
    const { configFile, credentialsFile } = await (0,shared_ini_file_loader_dist_es.loadSharedConfigFiles)(init);
    const profileFromCredentials = credentialsFile[profile] || {};
    const profileFromConfig = configFile[profile] || {};
    const mergedProfile = preferredFile === "config"
        ? { ...profileFromCredentials, ...profileFromConfig }
        : { ...profileFromConfig, ...profileFromCredentials };
    try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === undefined) {
            throw new Error();
        }
        return configValue;
    }
    catch (e) {
        throw new dist_es.CredentialsProviderError(e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, { logger: init.logger });
    }
};

;// ./node_modules/@smithy/node-config-provider/dist-es/fromStatic.js

const isFunction = (func) => typeof func === "function";
const fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0,dist_es.fromStatic)(defaultValue);

;// ./node_modules/@smithy/node-config-provider/dist-es/configLoader.js




const loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => {
    const { signingName, logger } = configuration;
    const envOptions = { signingName, logger };
    return (0,dist_es.memoize)((0,dist_es.chain)(fromEnv(environmentVariableSelector, envOptions), fromSharedConfigFiles(configFileSelector, configuration), fromStatic(defaultValue)));
};

;// ./node_modules/@smithy/node-config-provider/dist-es/index.js



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			893: 1
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 		
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("../../" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(9032);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;