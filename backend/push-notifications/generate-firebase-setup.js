#!/usr/bin/env node

/**
 * Firebase Project Setup Guide
 * 
 * This script provides step-by-step instructions for setting up Firebase
 * for the Order Receiver App push notifications
 */

const fs = require('fs');
const path = require('path');

function generateFirebaseOptionsTemplate() {
    return `// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// \`\`\`dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// \`\`\`
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'YOUR_ANDROID_API_KEY',
    appId: 'YOUR_ANDROID_APP_ID',
    messagingSenderId: 'YOUR_MESSAGE_SENDER_ID',
    projectId: 'YOUR_PROJECT_ID',
    storageBucket: 'YOUR_PROJECT_ID.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'YOUR_IOS_API_KEY',
    appId: 'YOUR_IOS_APP_ID',
    messagingSenderId: 'YOUR_MESSAGE_SENDER_ID',
    projectId: 'YOUR_PROJECT_ID',
    storageBucket: 'YOUR_PROJECT_ID.appspot.com',
    iosBundleId: 'com.orderreceiver.merchantapp',
  );
}`;
}

function generateSetupInstructions() {
    const instructions = `
# Firebase Setup Instructions for Order Receiver App

## Prerequisites
1. Google/Firebase account
2. Firebase CLI installed: \`npm install -g firebase-tools\`
3. FlutterFire CLI installed: \`dart pub global activate flutterfire_cli\`

## Step 1: Create Firebase Project
1. Go to https://console.firebase.google.com
2. Click "Create a project"
3. Enter project name: "order-receiver-app" (or your preferred name)
4. Enable Google Analytics (optional)
5. Wait for project creation

## Step 2: Enable Cloud Messaging
1. In Firebase Console, go to Project Settings (gear icon)
2. Navigate to "Cloud Messaging" tab
3. Note the "Server key" - you'll need this for backend Lambda functions
4. Note the "Sender ID" - you'll need this for Flutter app

## Step 3: Add Android App
1. In Firebase Console, click "Add app" and select Android
2. Enter package name: \`com.orderreceiver.merchantapp\`
3. Download \`google-services.json\`
4. Place it in: \`frontend/android/app/google-services.json\`

## Step 4: Add iOS App (if supporting iOS)
1. In Firebase Console, click "Add app" and select iOS
2. Enter bundle ID: \`com.orderreceiver.merchantapp\`
3. Download \`GoogleService-Info.plist\`
4. Place it in: \`frontend/ios/Runner/GoogleService-Info.plist\`

## Step 5: Configure Flutter App
1. Navigate to the frontend directory: \`cd frontend\`
2. Configure Firebase: \`flutterfire configure\`
3. Select your Firebase project
4. Select platforms (Android, iOS)
5. This will update \`firebase_options.dart\` with real configuration

## Step 6: Update Environment Variables
Add these to your environment:

\`\`\`bash
# Firebase Configuration
export FCM_SERVER_KEY="YOUR_FCM_SERVER_KEY_FROM_STEP_2"
export FIREBASE_PROJECT_ID="your-project-id"
export FIREBASE_SENDER_ID="your-sender-id"
\`\`\`

## Step 7: Deploy Backend
1. Navigate to backend: \`cd backend/push-notifications\`
2. Install dependencies: \`npm install\`
3. Set FCM_SERVER_KEY environment variable
4. Deploy: \`npm run deploy\`

## Step 8: Test Push Notifications
1. Run the Flutter app
2. Register a device token
3. Send a test notification from Firebase Console or Lambda function

## Files Created/Updated:
- \`frontend/firebase_options.dart\` (generated by flutterfire configure)
- \`frontend/android/app/google-services.json\` (downloaded from Firebase)
- \`frontend/ios/Runner/GoogleService-Info.plist\` (downloaded from Firebase)

## Security Notes:
- Keep \`google-services.json\` and \`GoogleService-Info.plist\` secure
- Don't commit FCM Server Key to version control
- Use environment variables for sensitive configuration
`;

    return instructions;
}

async function main() {
    console.log('üî• Firebase Setup Guide Generator\n');

    try {
        // Create setup instructions
        const instructions = generateSetupInstructions();
        fs.writeFileSync(path.join(__dirname, 'FIREBASE_SETUP.md'), instructions);
        
        // Create template firebase_options.dart (will be replaced by flutterfire configure)
        const firebaseOptionsPath = path.join(__dirname, '../../frontend/lib/firebase_options_template.dart');
        const firebaseOptionsTemplate = generateFirebaseOptionsTemplate();
        fs.writeFileSync(firebaseOptionsPath, firebaseOptionsTemplate);

        console.log('‚úÖ Firebase setup files created:');
        console.log('- FIREBASE_SETUP.md (setup instructions)');
        console.log('- frontend/lib/firebase_options_template.dart (template file)');
        console.log('');
        console.log('üìñ Please read FIREBASE_SETUP.md for detailed setup instructions');
        console.log('');
        console.log('üöÄ Quick start:');
        console.log('1. Create Firebase project at https://console.firebase.google.com');
        console.log('2. Enable Cloud Messaging and get Server Key');
        console.log('3. Add Android/iOS apps and download config files');
        console.log('4. Run: cd frontend && flutterfire configure');
        console.log('5. Set FCM_SERVER_KEY environment variable');
        console.log('6. Deploy backend with: cd backend/push-notifications && npm run deploy');

    } catch (error) {
        console.error('‚ùå Error creating setup files:', error);
        process.exit(1);
    }
}

// Run the generator
if (require.main === module) {
    main();
}

module.exports = {
    generateFirebaseOptionsTemplate,
    generateSetupInstructions
};
