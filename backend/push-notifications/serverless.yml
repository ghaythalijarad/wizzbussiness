service: push-notifications
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    DEVICE_TOKENS_TABLE: ${self:service}-${self:provider.stage}-device-tokens
    PUSH_LOGS_TABLE: ${self:service}-${self:provider.stage}-push-logs
    FCM_SERVER_KEY: ${env:FCM_SERVER_KEY}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEVICE_TOKENS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PUSH_LOGS_TABLE}"
        - Effect: Allow
          Action:
            - sns:CreatePlatformEndpoint
            - sns:DeleteEndpoint
            - sns:Publish
            - sns:GetEndpointAttributes
            - sns:SetEndpointAttributes
          Resource: "*"

functions:
  registerDeviceToken:
    handler: handlers/registerDeviceToken.handler
    events:
      - http:
          path: /notifications/register-token
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  sendPushNotification:
    handler: handlers/sendPushNotification.handler
    events:
      - http:
          path: /notifications/send
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  # This function will be triggered when new orders are created
  onNewOrder:
    handler: handlers/onNewOrder.handler
    events:
      - eventBridge:
          pattern:
            source:
              - "order.service"
            detail-type:
              - "Order Created"

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPoolAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/us-east-1_bDqnKdrqo

    DeviceTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DEVICE_TOKENS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: merchantId
            AttributeType: S
          - AttributeName: deviceToken
            AttributeType: S
        KeySchema:
          - AttributeName: merchantId
            KeyType: HASH
          - AttributeName: deviceToken
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    PushLogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PUSH_LOGS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: logId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: logId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-api-id
    
    ApiGatewayRestApiUrl:
      Value: 
        Fn::Sub: "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url
    
    DeviceTokensTableName:
      Value:
        Ref: DeviceTokensTable
      Export:
        Name: ${self:service}-${self:provider.stage}-device-tokens-table
    
    PushLogsTableName:
      Value:
        Ref: PushLogsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-push-logs-table

plugins:
  - serverless-offline
