service: order-receiver-api

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 29
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  environment:
    ENVIRONMENT: ${self:provider.stage}
    USERS_TABLE: order-receiver-users-dev
    BUSINESSES_TABLE: order-receiver-businesses-dev
    PRODUCTS_TABLE: order-receiver-products-dev
    CATEGORIES_TABLE: order-receiver-categories-dev
    DISCOUNTS_TABLE: order-receiver-discounts-dev
    BUSINESS_SETTINGS_TABLE: order-receiver-business-settings-dev
    BUSINESS_WORKING_HOURS_TABLE: order-receiver-business-working-hours-dev
    POS_LOGS_TABLE: order-receiver-pos-logs-dev
    BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev
    ORDERS_TABLE: ${self:custom.ordersTable}
    MERCHANT_ENDPOINTS_TABLE: ${self:custom.merchantEndpointsTable}
    # Use dynamic WebSocket endpoint reference - will be updated post-deployment
    WEBSOCKET_ENDPOINT: !Sub "wss://${WebsocketsApi}.execute-api.${aws:region}.amazonaws.com/${self:provider.stage}"
    ORDER_EVENTS_TOPIC_ARN: !Ref OrderEventsTopic
    # SNS_FCM_ARN: !Ref FCMPlatformApplication  # Commented out temporarily
    # SNS_APNS_ARN: !Ref APNSPlatformApplication  # Commented out temporarily
    SNS_FCM_ARN: "arn:aws:sns:${self:provider.region}:${aws:accountId}:placeholder-fcm"
    SNS_APNS_ARN: "arn:aws:sns:${self:provider.region}:${aws:accountId}:placeholder-apns"
    COGNITO_USER_POOL_ID: us-east-1_bDqnKdrqo
    COGNITO_CLIENT_ID: 6n752vrmqmbss6nmlg6be2nn9a
    COGNITO_REGION: us-east-1
    DYNAMODB_REGION: us-east-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
          Resource:
            # us-east-1 tables (where existing data is)
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-users-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-users-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-businesses-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-businesses-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-products-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-products-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-categories-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-categories-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-discounts-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-discounts-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-settings-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-settings-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-working-hours-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-working-hours-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-pos-logs-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-pos-logs-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/${self:custom.ordersTable}"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/${self:custom.ordersTable}/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/${self:custom.merchantEndpointsTable}"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/${self:custom.merchantEndpointsTable}/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/${self:custom.productsTable}"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/${self:custom.categoriesTable}"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/${self:custom.productsTable}/index/BusinessIdIndex"
        - Effect: "Allow"
          Action:
            - "sns:Publish"
            - "events:PutEvents"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "execute-api:ManageConnections"
          Resource: "arn:aws:execute-api:*:*:*"
        - Effect: "Allow"
          Action:
            - "cognito-idp:AdminGetUser"
            - "cognito-idp:AdminCreateUser"
            - "cognito-idp:AdminDeleteUser"
            - "cognito-idp:AdminUpdateUserAttributes"
            - "cognito-idp:SignUp"
            - "cognito-idp:ConfirmSignUp"
            - "cognito-idp:InitiateAuth"
            - "cognito-idp:ResendConfirmationCode"
          Resource: "arn:aws:cognito-idp:us-east-1:${aws:accountId}:userpool/us-east-1_bDqnKdrqo"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
            - "s3:PutObjectAcl"
          Resource: "arn:aws:s3:::order-receiver-business-photos-dev/*"

functions:
  unifiedAuth:
    handler: functions/auth/unified_auth_handler.handler
    name: order-receiver-${self:provider.stage}-unified-auth-v2-sls
    events:
      - http:
          path: /auth/register-with-business
          method: post
          cors: true
      - http:
          path: /auth/confirm
          method: post
          cors: true
      - http:
          path: /auth/check-email
          method: post
          cors: true
      - http:
          path: /auth/signin
          method: post
          cors: true
      - http:
          path: /auth/resend-code
          method: post
          cors: true
      - http:
          path: /auth/user-businesses
          method: get
          cors: true
      - http:
          path: /auth/health
          method: get
          cors: true
  orderManagement:
    handler: functions/orders/order_management_handler.handler
    name: order-receiver-${self:provider.stage}-order-management-v1-sls
    events:
      # Order endpoints
      - http:
          path: /orders
          method: post
          cors: true
          authorizer: aws_iam
  productManagement:
    handler: functions/products/product_management_handler.handler
    name: order-receiver-${self:provider.stage}-product-management-v1-sls
    events:
      # Product endpoints
      - http:
          path: /products
          method: get
          cors: true
      - http:
          path: /products/search
          method: get
          cors: true
      - http:
          path: /products
          method: post
          cors: true
      - http:
          path: /products/{productId}
          method: get
          cors: true
      - http:
          path: /products/{productId}
          method: put
          cors: true
      - http:
          path: /products/{productId}
          method: delete
          cors: true
      # Category endpoints
      - http:
          path: /categories
          method: get
          cors: true
      - http:
          path: /categories/business-type/{businessType}
          method: get
          cors: true
  merchantOrderManagement:
    handler: functions/orders/merchant_order_handler.handler
    name: order-receiver-${self:provider.stage}-merchant-orders-v1-sls
    events:
      # Merchant Order Management endpoints (restructured to avoid path conflicts)
      - http:
          path: /merchant/orders/{businessId}
          method: get
          cors: true
      - http:
          path: /merchant/order/{orderId}/confirm
          method: put
          cors: true
      - http:
          path: /merchant/order/{orderId}/reject
          method: put
          cors: true
      - http:
          path: /merchant/order/{orderId}/status
          method: put
          cors: true
      - http:
          path: /merchants/{merchantId}/device-token
          method: post
          cors: true
      # Webhook for receiving orders from Central Platform
      - http:
          path: /webhooks/orders
          method: post
          cors: true
  discountManagement:
    handler: functions/discounts/discount_management_handler.handler
    name: order-receiver-${self:provider.stage}-discount-management-v1-sls
    events:
      # Discount endpoints
      - http:
          path: /discounts
          method: get
          cors: true
      - http:
          path: /discounts
          method: post
          cors: true
      - http:
          path: /discounts/{discountId}
          method: get
          cors: true
      - http:
          path: /discounts/{discountId}
          method: put
          cors: true
      - http:
          path: /discounts/{discountId}
          method: delete
          cors: true
      - http:
          path: /discounts/{discountId}/toggle-status
          method: patch
          cors: true
      - http:
          path: /discounts/validate-discount
          method: post
          cors: true
      - http:
          path: /discounts/apply-discount
          method: post
          cors: true
      - http:
          path: /discounts/stats
          method: get
          cors: true
  health:
    handler: functions/health_check.handler
    name: order-receiver-${self:provider.stage}-health-v2-sls
    events:
      - http:
          path: /health
          method: get
          cors: true
  imageUpload:
    handler: functions/upload/image_upload_handler.handler
    name: order-receiver-${self:provider.stage}-image-upload-v1-sls
    events:
      - http:
          path: /upload/product-image
          method: post
          cors: true
      - http:
          path: /upload/product-image
          method: delete
          cors: true
      - http:
          path: /upload/business-photo
          method: post
          cors: true
      - http:
          path: /upload/business-license
          method: post
          cors: true
      - http:
          path: /upload/owner-identity
          method: post
          cors: true
      - http:
          path: /upload/health-certificate
          method: post
          cors: true
      - http:
          path: /upload/owner-photo
          method: post
          cors: true
  posSettings:
    handler: functions/pos/pos_settings_handler.handler
    name: order-receiver-${self:provider.stage}-pos-settings-v1-sls
    events:
      # POS Settings endpoints
      - http:
          path: /businesses/{businessId}/pos-settings
          method: get
          cors: true
      - http:
          path: /businesses/{businessId}/pos-settings
          method: put
          cors: true
      - http:
          path: /businesses/{businessId}/pos-settings/test-connection
          method: post
          cors: true
      - http:
          path: /businesses/{businessId}/pos-settings/sync-logs
          method: get
          cors: true

  locationSettings:
    handler: functions/location_settings_handler.handler
    name: order-receiver-${self:provider.stage}-location-settings-v1-sls
    events:
      # Location Settings endpoints
      - http:
          path: /businesses/{businessId}/location-settings
          method: get
          cors: true
      - http:
          path: /businesses/{businessId}/location-settings
          method: put
          cors: true
      - http:
          path: /businesses/{businessId}/working-hours
          method: get
          cors: true
      - http:
          path: /businesses/{businessId}/working-hours
          method: put
          cors: true

  adminManagement:
    handler: functions/admin/admin_management_handler.handler
    name: order-receiver-${self:provider.stage}-admin-management-v1-sls
    events:
      - http:
          path: /admin/businesses
          method: get
          cors: true
      - http:
          path: /admin/businesses/{businessId}/approve
          method: post
          cors: true
      - http:
          path: /admin/businesses/{businessId}/reject
          method: post
          cors: true

  orderStreamHandler:
    handler: functions/streams/order_stream_handler.handler
    name: order-receiver-${self:provider.stage}-order-stream-v1-sls
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - OrdersTable
              - StreamArn
          batchSize: 1
          startingPosition: LATEST

  websocketHandler:
    handler: functions/websocket/websocket_handler.handler
    name: order-receiver-${self:provider.stage}-websocket-v1-sls
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  ordersTable: order-receiver-orders-${sls:stage}
  merchantEndpointsTable: order-receiver-merchant-endpoints-${sls:stage}
  productsTable: order-receiver-products-${sls:stage}
  categoriesTable: order-receiver-categories-${sls:stage}

resources:
  Resources:
    # Note: Using existing DynamoDB tables in us-east-1
    # The GSI definitions have been removed from here to prevent deployment errors.
    # Ensure that the 'BusinessIdIndex' on the Products table and
    # 'BusinessTypeIndex' on the Categories table exist in DynamoDB.

    # Tables are not created here as they already exist
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.ordersTable}
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: businessId
            AttributeType: S
          - AttributeName: storeId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: BusinessIdIndex
            KeySchema:
              - AttributeName: businessId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: StoreIdIndex
            KeySchema:
              - AttributeName: storeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    MerchantEndpointsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.merchantEndpointsTable}
        AttributeDefinitions:
          - AttributeName: merchantId
            AttributeType: S
          - AttributeName: endpointType
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: merchantId
            KeyType: HASH
          - AttributeName: endpointType
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ConnectionIdIndex
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    OrderEventsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-order-events-${self:provider.stage}
        DisplayName: Order Events Topic
    
    # FCM Platform Application (Android) - Commented out temporarily due to placeholder values
    # FCMPlatformApplication:
    #   Type: AWS::SNS::PlatformApplication
    #   Properties:
    #     Name: ${self:service}-fcm-${self:provider.stage}
    #     Platform: GCM
    #     Attributes:
    #       # You'll need to add your FCM server key here
    #       # PlatformCredential: "YOUR_FCM_SERVER_KEY"
    #       PlatformCredential: "PLACEHOLDER_FCM_SERVER_KEY"
    
    # APNS Platform Application (iOS) - Commented out temporarily due to placeholder values
    # APNSPlatformApplication:
    #   Type: AWS::SNS::PlatformApplication
    #   Properties:
    #     Name: ${self:service}-apns-${self:provider.stage}
    #     Platform: APNS_SANDBOX  # Use APNS for production
    #     Attributes:
    #       # You'll need to add your APNS certificate or key here
    #       # For certificate-based auth:
    #       # PlatformCredential: "YOUR_APNS_CERTIFICATE"
    #       # PlatformPrincipal: "YOUR_APNS_PRIVATE_KEY"
    #       # For token-based auth:
    #       # PlatformCredential: "YOUR_APNS_AUTH_KEY"
    #       # PlatformPrincipal: "YOUR_TEAM_ID.YOUR_KEY_ID"
    #       PlatformCredential: "PLACEHOLDER_APNS_CREDENTIAL"
    #       PlatformPrincipal: "PLACEHOLDER_APNS_PRINCIPAL"
    
outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${aws:region}.amazonaws.com/${self:provider.stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  WebSocketEndpoint:
    Description: "WebSocket API endpoint URL"
    Value: !Sub "wss://${WebsocketsApi}.execute-api.${aws:region}.amazonaws.com/${self:provider.stage}"
    Export:
      Name: !Sub "${AWS::StackName}-WebSocketEndpoint"
  
  OrderEventsTopicArn:
    Description: "SNS Topic ARN for Order Events"
    Value: !Ref OrderEventsTopic
    Export:
      Name: !Sub "${AWS::StackName}-OrderEventsTopic"
  
  FCMPlatformApplicationArn:
    Description: "FCM Platform Application ARN"
    Value: !Ref FCMPlatformApplication
    Export:
      Name: !Sub "${AWS::StackName}-FCMPlatformApp"
  
  APNSPlatformApplicationArn:
    Description: "APNS Platform Application ARN" 
    Value: !Ref APNSPlatformApplication
    Export:
      Name: !Sub "${AWS::StackName}-APNSPlatformApp"
