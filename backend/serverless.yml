service: order-receiver-api

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 29
  environment:
    ENVIRONMENT: ${self:provider.stage}
    USERS_TABLE: order-receiver-users-dev
    BUSINESSES_TABLE: order-receiver-businesses-dev
    PRODUCTS_TABLE: order-receiver-products-dev
    CATEGORIES_TABLE: order-receiver-categories-dev
    DISCOUNTS_TABLE: order-receiver-discounts-dev
    BUSINESS_SETTINGS_TABLE: order-receiver-business-settings-dev
    BUSINESS_WORKING_HOURS_TABLE: order-receiver-business-working-hours-dev
    POS_LOGS_TABLE: order-receiver-pos-logs-dev
    BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev
    COGNITO_USER_POOL_ID: ${self:params.CognitoUserPoolId}
    COGNITO_CLIENT_ID: ${self:params.CognitoClientId}
    COGNITO_REGION: us-east-1
    DYNAMODB_REGION: us-east-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
          Resource:
            # us-east-1 tables (where existing data is)
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-users-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-users-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-businesses-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-businesses-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-products-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-products-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-categories-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-categories-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-discounts-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-discounts-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-settings-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-settings-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-working-hours-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-business-working-hours-dev/index/*"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-pos-logs-dev"
            - "arn:aws:dynamodb:us-east-1:${aws:accountId}:table/order-receiver-pos-logs-dev/index/*"
        - Effect: "Allow"
          Action:
            - "cognito-idp:AdminGetUser"
            - "cognito-idp:AdminCreateUser"
            - "cognito-idp:AdminDeleteUser"
            - "cognito-idp:AdminUpdateUserAttributes"
            - "cognito-idp:SignUp"
            - "cognito-idp:ConfirmSignUp"
            - "cognito-idp:InitiateAuth"
            - "cognito-idp:ResendConfirmationCode"
          Resource: "arn:aws:cognito-idp:us-east-1:${aws:accountId}:userpool/${self:params.CognitoUserPoolId}"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
            - "s3:PutObjectAcl"
          Resource: "arn:aws:s3:::order-receiver-business-photos-dev/*"

params:
  CognitoUserPoolId: us-east-1_bDqnKdrqo
  CognitoClientId: 6n752vrmqmbss6nmlg6be2nn9a

functions:
  unifiedAuth:
    handler: functions/auth/unified_auth_handler.handler
    name: order-receiver-${self:provider.stage}-unified-auth-v2-sls
    events:
      - http:
          path: /auth/register-with-business
          method: post
          cors: true
      - http:
          path: /auth/confirm
          method: post
          cors: true
      - http:
          path: /auth/check-email
          method: post
          cors: true
      - http:
          path: /auth/signin
          method: post
          cors: true
      - http:
          path: /auth/resend-code
          method: post
          cors: true
      - http:
          path: /auth/user-businesses
          method: get
          cors: true
      - http:
          path: /auth/health
          method: get
          cors: true
  orderManagement:
    handler: functions/orders/order_management_handler.handler
    name: order-receiver-${self:provider.stage}-order-management-v1-sls
    events:
      # Product endpoints
      - http:
          path: /products
          method: get
          cors: true
      - http:
          path: /products/search
          method: get
          cors: true
      - http:
          path: /products
          method: post
          cors: true
      - http:
          path: /products/{productId}
          method: get
          cors: true
      - http:
          path: /products/{productId}
          method: put
          cors: true
      - http:
          path: /products/{productId}
          method: delete
          cors: true
      # Category endpoints
      - http:
          path: /categories
          method: get
          cors: true
      - http:
          path: /categories/business-type/{businessType}
          method: get
          cors: true
  discountManagement:
    handler: functions/discounts/discount_management_handler.handler
    name: order-receiver-${self:provider.stage}-discount-management-v1-sls
    events:
      # Discount endpoints
      - http:
          path: /discounts
          method: get
          cors: true
      - http:
          path: /discounts
          method: post
          cors: true
      - http:
          path: /discounts/{discountId}
          method: get
          cors: true
      - http:
          path: /discounts/{discountId}
          method: put
          cors: true
      - http:
          path: /discounts/{discountId}
          method: delete
          cors: true
      - http:
          path: /discounts/{discountId}/toggle-status
          method: patch
          cors: true
      - http:
          path: /discounts/validate-discount
          method: post
          cors: true
      - http:
          path: /discounts/apply-discount
          method: post
          cors: true
      - http:
          path: /discounts/stats
          method: get
          cors: true
  health:
    handler: functions/health_check.handler
    name: order-receiver-${self:provider.stage}-health-v2-sls
    events:
      - http:
          path: /health
          method: get
          cors: true
  imageUpload:
    handler: functions/upload/image_upload_handler.handler
    name: order-receiver-${self:provider.stage}-image-upload-v1-sls
    events:
      - http:
          path: /upload/product-image
          method: post
          cors: true
      - http:
          path: /upload/product-image
          method: delete
          cors: true
      - http:
          path: /upload/business-photo
          method: post
          cors: true
  posSettings:
    handler: functions/pos/pos_settings_handler.handler
    name: order-receiver-${self:provider.stage}-pos-settings-v1-sls
    events:
      # POS Settings endpoints
      - http:
          path: /businesses/{businessId}/pos-settings
          method: get
          cors: true
      - http:
          path: /businesses/{businessId}/pos-settings
          method: put
          cors: true
      - http:
          path: /businesses/{businessId}/pos-settings/test-connection
          method: post
          cors: true
      - http:
          path: /businesses/{businessId}/pos-settings/sync-logs
          method: get
          cors: true

  locationSettings:
    handler: functions/location_settings_handler.handler
    name: order-receiver-${self:provider.stage}-location-settings-v1-sls
    events:
      # Location Settings endpoints
      - http:
          path: /businesses/{businessId}/location-settings
          method: get
          cors: true
      - http:
          path: /businesses/{businessId}/location-settings
          method: put
          cors: true
      - http:
          path: /businesses/{businessId}/working-hours
          method: get
          cors: true
      - http:
          path: /businesses/{businessId}/working-hours
          method: put
          cors: true

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

build:
  esbuild: false

resources:
  Resources:
    # Note: Using existing DynamoDB tables in us-east-1
    # Tables are not created here as they already exist
    
outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${aws:region}.amazonaws.com/${self:provider.stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
