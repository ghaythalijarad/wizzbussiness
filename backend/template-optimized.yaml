AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Order Receiver API - Optimized Template

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage
  CognitoUserPoolId:
    Type: String
    Default: us-east-1_PHPkG78b5
    Description: Cognito User Pool ID
  CognitoClientId:
    Type: String
    Default: 1tl9g7nk2k2chtj5fg960fgdth
    Description: Cognito App Client ID
  CacheVersion:
    Type: String
    Default: "v3"
    Description: Cache busting version

Globals:
  Function:
    Runtime: nodejs20.x
    MemorySize: 512
    Timeout: 29
    Environment:
      Variables:
        ENVIRONMENT: !Ref Stage
        USERS_TABLE: WhizzMerchants_Users
        BUSINESSES_TABLE: WhizzMerchants_Businesses
        PRODUCTS_TABLE: WhizzMerchants_Products
        CATEGORIES_TABLE: WhizzMerchants_Categories
        BUSINESS_SUBCATEGORIES_TABLE: WhizzMerchants_BusinessSubcategories
        DISCOUNTS_TABLE: WhizzMerchants_Discounts
        BUSINESS_SETTINGS_TABLE: WhizzMerchants_BusinessSettings
        BUSINESS_WORKING_HOURS_TABLE: WhizzMerchants_BusinessWorkingHours
        POS_LOGS_TABLE: WhizzMerchants_PosLogs
        BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev-1755170214
        ORDERS_TABLE: WhizzMerchants_Orders
        WEBSOCKET_CONNECTIONS_TABLE: order-receiver-websocket-connections-dev-v2
        TIMEOUT_LOGS_TABLE: WhizzMerchants_TimeoutLogs
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        COGNITO_CLIENT_ID: !Ref CognitoClientId
        COGNITO_REGION: !Ref AWS::Region
        DYNAMODB_REGION: !Ref AWS::Region
        SNS_FCM_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:placeholder-fcm"
        SNS_APNS_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:placeholder-apns"
        LAMBDA_CONFIG_VERSION: "2025-08-15T10:00:00Z"
    Tracing: Active
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  # Regional API Gateway
  RegionalRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "order-receiver-regional-${Stage}"
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Lambda Functions
  UnifiedAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-unified-auth-v4-sam'
      CodeUri: functions/auth/
      Handler: unified_auth_handler.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Users
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Businesses
        - DynamoDBCrudPolicy:
            TableName: !Sub 'order-receiver-websocket-connections-${Stage}-v2'
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:*
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Events:
        AuthSignin:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/signin
            Method: post
            Auth:
              Authorizer: NONE
        AuthRegister:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/register-with-business
            Method: post
            Auth:
              Authorizer: NONE
        AuthConfirm:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/confirm
            Method: post
            Auth:
              Authorizer: NONE
        AuthRefresh:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/refresh
            Method: post
            Auth:
              Authorizer: NONE
        AuthResendCode:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/resend-code
            Method: post
            Auth:
              Authorizer: NONE
        AuthCheckEmail:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/check-email
            Method: post
            Auth:
              Authorizer: NONE
        AuthHealth:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/health
            Method: get
            Auth:
              Authorizer: NONE
        AuthUserBusinesses:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/user-businesses
            Method: get
        AuthTrackLogin:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/track-login
            Method: post
        AuthTrackLogout:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /auth/track-logout
            Method: post

  ProductManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-product-management-v4-sam'
      CodeUri: functions/products/
      Handler: product_management_handler.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Products
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Categories
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_BusinessSubcategories
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Businesses
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Events:
        ProductsGet:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /products
            Method: get
            Auth:
              Authorizer: NONE
        ProductsPost:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /products
            Method: post
            Auth:
              Authorizer: NONE
        ProductSearch:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /products/search
            Method: get
            Auth:
              Authorizer: NONE
        ProductById:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /products/{productId}
            Method: any
            Auth:
              Authorizer: NONE
        Categories:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /categories
            Method: get
            Auth:
              Authorizer: NONE
        CategoriesByBusinessType:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /categories/business-type/{businessType}
            Method: get
            Auth:
              Authorizer: NONE

  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-image-upload-v1-sam'
      CodeUri: functions/upload/
      Handler: image_upload_handler.handler
      Environment:
        Variables:
          BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev-1755170214
      Policies:
        - S3CrudPolicy:
            BucketName: order-receiver-business-photos-dev-1755170214
      Events:
        UploadProductImage:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /upload/product-image
            Method: post
            Auth:
              Authorizer: NONE
        UploadBusinessLicense:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /upload/business-license
            Method: post
            Auth:
              Authorizer: NONE
        UploadBusinessPhoto:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /upload/business-photo
            Method: post
            Auth:
              Authorizer: NONE
        UploadOwnerIdentity:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /upload/owner-identity
            Method: post
            Auth:
              Authorizer: NONE
        UploadOwnerPhoto:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /upload/owner-photo
            Method: post
            Auth:
              Authorizer: NONE
        UploadHealthCertificate:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /upload/health-certificate
            Method: post
            Auth:
              Authorizer: NONE

  BusinessProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-business-profile-v4-sam'
      CodeUri: functions/business/
      Handler: business_profile_handler.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Businesses
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Users
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Events:
        BusinessProfile:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /businesses/{businessId}/profile
            Method: any

  BusinessDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-business-details-v1-sam'
      CodeUri: functions/business/
      Handler: business_details_handler.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: WhizzMerchants_Businesses
        - DynamoDBReadPolicy:
            TableName: WhizzMerchants_Users
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Events:
        BusinessDetails:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /business/details
            Method: get

  LocationSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-location-settings-v1-sam'
      CodeUri: functions/business/
      Handler: location_settings_handler.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Businesses
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Users
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_BusinessWorkingHours
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Events:
        LocationSettings:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /businesses/{businessId}/location-settings
            Method: any
        WorkingHours:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /businesses/{businessId}/working-hours
            Method: any

  # WebSocket Management Functions
  WebSocketHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-websocket-${Stage}-handler-v2-sam'
      CodeUri: functions/websocket/
      Handler: websocket_handler.handler
      Environment:
        Variables:
          WEBSOCKET_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
          MERCHANT_ENDPOINTS_TABLE: !Sub 'wizzgo-${Stage}-merchant-endpoints'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 'order-receiver-websocket-connections-${Stage}-v2'
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Businesses
        - DynamoDBCrudPolicy:
            TableName: !Sub 'wizzgo-${Stage}-merchant-endpoints'
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  WebSocketConnectionManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-websocket-${Stage}-connection-manager-v2-sam'
      CodeUri: functions/websocket/
      Handler: websocket_connection_manager.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 'order-receiver-websocket-connections-${Stage}-v2'
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Businesses
      Events:
        VirtualConnection:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /websocket/virtual-connection
            Method: post
        BusinessConnections:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /websocket/business-connections
            Method: any
        BusinessStatus:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /websocket/business-status
            Method: get

  BusinessOnlineStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-business-${Stage}-status-v2-sam'
      CodeUri: functions/business/
      Handler: business_online_status_handler.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 'order-receiver-websocket-connections-${Stage}-v2'
        - DynamoDBCrudPolicy:
            TableName: WhizzMerchants_Businesses
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Events:
        BusinessStatus:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /businesses/{businessId}/status
            Method: any
        BusinessHeartbeat:
          Type: Api
          Properties:
            RestApiId: !Ref RegionalRestApi
            Path: /businesses/{businessId}/heartbeat
            Method: post

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'order-receiver-websocket-api-${Stage}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub 'integrations/${WebSocketDisconnectIntegration}'

  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      Target: !Sub 'integrations/${WebSocketDefaultIntegration}'

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  WebSocketDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
      - WebSocketDefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref Stage
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  # WebSocket Connections Table
  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'order-receiver-websocket-connections-${Stage}-v2'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Service
          Value: OrderReceiver

  # DynamoDB Tables
  BusinessWorkingHoursTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WhizzMerchants_BusinessWorkingHours
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: businessId
          AttributeType: S
        - AttributeName: weekday
          AttributeType: S
      KeySchema:
        - AttributeName: businessId
          KeyType: HASH
        - AttributeName: weekday
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Service
          Value: WhizzMerchants

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RegionalRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  WebSocketUrl:
    Description: "WebSocket API Gateway URL"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
    Export:
      Name: !Sub "${AWS::StackName}-WebSocketUrl"
  
  WebSocketConnectionsTable:
    Description: "WebSocket Connections Table Name"
    Value: !Ref WebSocketConnectionsTable
    Export:
      Name: !Sub "${AWS::StackName}-WebSocketConnectionsTable"
  
  BusinessWorkingHoursTableName:
    Description: "Business Working Hours Table Name"
    Value: !Ref BusinessWorkingHoursTable
    Export:
      Name: !Sub "${AWS::StackName}-BusinessWorkingHoursTable"
