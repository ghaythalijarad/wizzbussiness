AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Order Receiver Serverless API - Pure Lambda + API Gateway'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment
  
  CorsOrigins:
    Type: String
    Default: "*"
    Description: Allowed CORS origins (use specific domains in production)

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE_NAME: !Ref BusinessesTable
        LOG_LEVEL: INFO
  
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: !Ref CorsOrigins

Resources:
  # API Gateway
  OrderReceiverApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      TracingConfig:
        TracingEnabled: true
      ThrottleConfig:
        BurstLimit: !If 
          - IsProd
          - 10000
          - 1000
        RateLimit: !If
          - IsProd
          - 5000
          - 500
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: !If
            - IsProd
            - 10000
            - 1000
          ThrottlingRateLimit: !If
            - IsProd
            - 5000
            - 500

  # Lambda Functions
  RootFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-root-${Environment}'
      CodeUri: lambda_functions/
      Handler: health_lambda.root
      Description: Root endpoint handler
      Events:
        RootApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderReceiverApi
            Path: /
            Method: GET

  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-health-${Environment}'
      CodeUri: lambda_functions/
      Handler: health_lambda.health
      Description: Health check endpoint handler
      Events:
        HealthApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderReceiverApi
            Path: /health
            Method: GET

  HealthDetailedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-health-detailed-${Environment}'
      CodeUri: lambda_functions/
      Handler: health_lambda.health_detailed
      Description: Detailed health check endpoint handler
      Events:
        HealthDetailedApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderReceiverApi
            Path: /health/detailed
            Method: GET

  AuthHealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-auth-health-${Environment}'
      CodeUri: lambda_functions/
      Handler: auth_lambda.auth_health
      Description: Auth service health check handler
      Events:
        AuthHealthApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderReceiverApi
            Path: /auth/health
            Method: GET

  RegisterBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-register-business-${Environment}'
      CodeUri: lambda_functions/
      Handler: auth_lambda.register_business
      Description: Business registration handler
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        RegisterBusinessApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderReceiverApi
            Path: /auth/register-business
            Method: POST

  # DynamoDB Table
  BusinessesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'order-receiver-businesses-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: business_id
          AttributeType: S
        - AttributeName: cognito_user_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: business_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: cognito-user-index
          KeySchema:
            - AttributeName: cognito_user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If
          - IsProd
          - true
          - false
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: order-receiver
        - Key: Component
          Value: database

  # CloudWatch Log Groups
  RootFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/order-receiver-root-${Environment}'
      RetentionInDays: !If
        - IsProd
        - 30
        - 7

  HealthFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/order-receiver-health-${Environment}'
      RetentionInDays: !If
        - IsProd
        - 30
        - 7

  AuthHealthFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/order-receiver-auth-health-${Environment}'
      RetentionInDays: !If
        - IsProd
        - 30
        - 7

  RegisterBusinessFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/order-receiver-register-business-${Environment}'
      RetentionInDays: !If
        - IsProd
        - 30
        - 7

Conditions:
  IsProd: !Equals [!Ref Environment, prod]

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${OrderReceiverApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  BusinessesTableName:
    Description: 'DynamoDB table name for businesses'
    Value: !Ref BusinessesTable
    Export:
      Name: !Sub '${AWS::StackName}-BusinessesTable'

  BusinessesTableArn:
    Description: 'DynamoDB table ARN for businesses'
    Value: !GetAtt BusinessesTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BusinessesTableArn'
