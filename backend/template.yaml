AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Order Receiver API - Serverless Application Model Template v2.3

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage
  CognitoUserPoolId:
    Type: String
    Default: us-east-1_PHPkG78b5
    Description: Cognito User Pool ID
  CognitoClientId:
    Type: String
    Default: 1tl9g7nk2k2chtj5fg960fgdth
    Description: Cognito App Client ID
  CacheVersion:
    Type: String
    Default: "v2"
    Description: Cache busting version

Globals:
  Function:
    Runtime: nodejs20.x
    MemorySize: 512
    Timeout: 29
    Environment:
      Variables:
        ENVIRONMENT: !Ref Stage
        USERS_TABLE: WhizzMerchants_Users
        BUSINESSES_TABLE: WhizzMerchants_Businesses
        PRODUCTS_TABLE: WhizzMerchants_Products
        CATEGORIES_TABLE: WhizzMerchants_Categories
        BUSINESS_SUBCATEGORIES_TABLE: WhizzMerchants_BusinessSubcategories
        DISCOUNTS_TABLE: WhizzMerchants_Discounts
        BUSINESS_SETTINGS_TABLE: WhizzMerchants_BusinessSettings
        BUSINESS_WORKING_HOURS_TABLE: WhizzMerchants_BusinessWorkingHours
        POS_LOGS_TABLE: WhizzMerchants_PosLogs
        BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev-1755170214
        ORDERS_TABLE: WhizzMerchants_Orders
        WEBSOCKET_CONNECTIONS_TABLE: order-receiver-websocket-connections-dev
        TIMEOUT_LOGS_TABLE: WhizzMerchants_TimeoutLogs
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        COGNITO_CLIENT_ID: !Ref CognitoClientId
        COGNITO_REGION: !Ref AWS::Region
        DYNAMODB_REGION: !Ref AWS::Region
        SNS_FCM_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:placeholder-fcm"
        SNS_APNS_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:placeholder-apns"
        LAMBDA_CONFIG_VERSION: "2025-08-15T10:00:00Z"
    Tracing: Active

Resources:
  # New Regional API to bypass CloudFront 403s
  RegionalRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "order-receiver-regional-${Stage}"
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      DefinitionBody:
        'Fn::Sub': |
          openapi: 3.0.1
          info:
            title: Order Receiver API
            description: Regional API Gateway with AWS Lambda integrations
            version: "1.0"
          components:
            securitySchemes:
              CognitoAuthorizer:
                type: apiKey
                name: Authorization
                in: header
                x-amazon-apigateway-authtype: cognito_user_pools
                x-amazon-apigateway-authorizer:
                  type: cognito_user_pools
                  providerARNs:
                    - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
          paths:
            # Auth endpoints (public)
            /auth/signin:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/health:
              get:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/refresh:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/register-with-business:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/confirm:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/check-email:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/resend-code:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/track-login:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/track-logout:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/user-businesses:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /categories:
              get:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # Categories by business type endpoint (public)
            /categories/business-type/{businessType}:
              get:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            # Products endpoints (internal auth)
            /products:
              get:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              post:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # NEW: Product search endpoint (internal auth)
            /products/search:
              get:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            # NEW: Product by ID endpoints (internal auth)
            /products/{productId}:
              get:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              put:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              delete:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /businesses/{businessId}/profile:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessProfileFunction.Arn}/invocations
              put:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessProfileFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /business/details:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessDetailsFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # Upload endpoints (internal auth)
            /upload/product-image:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/business-photo:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # Document upload endpoints (public for registration)
            /upload/business-license:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/owner-identity:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/health-certificate:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/owner-photo:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

  # Explicit Lambda permissions to break circular dependency
  UnifiedAuthFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UnifiedAuthFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  ProductManagementFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductManagementFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  ImageUploadFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageUploadFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  BusinessProfileFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BusinessProfileFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  BusinessDetailsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BusinessDetailsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  UnifiedAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-unified-auth-v4-sam'
      CodeUri: functions/auth/
      Handler: unified_auth_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/wizzgo-dev-wss-onconnect"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/wizzgo-dev-wss-onconnect/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:SignUp
                - cognito-idp:ConfirmSignUp
                - cognito-idp:InitiateAuth
                - cognito-idp:GetUser
                - cognito-idp:ResendConfirmationCode
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  ProductManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-product-management-v4-sam'
      CodeUri: functions/products/
      Handler: product_management_handler.handler
      Environment:
        Variables:
          PRODUCTS_TABLE: WhizzMerchants_Products
          CATEGORIES_TABLE: WhizzMerchants_Categories
          BUSINESSES_TABLE: WhizzMerchants_Businesses
          DYNAMODB_REGION: !Ref AWS::Region
          COGNITO_REGION: !Ref AWS::Region
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Products"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Products/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Categories"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Categories/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_BusinessSubcategories"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_BusinessSubcategories/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-image-upload-v1-sam'
      CodeUri: functions/upload/
      Handler: image_upload_handler.handler
      Environment:
        Variables:
          BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev-1755170214
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::order-receiver-business-photos-dev-1755170214/*"

  BusinessProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-business-profile-v4-sam'
      CodeUri: functions/business/
      Handler: business_profile_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  BusinessDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-business-details-v1-sam'
      CodeUri: functions/business/
      Handler: business_details_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RegionalRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"