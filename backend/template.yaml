AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Order Receiver API - Serverless Application Model Template v2.3

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage
  CognitoUserPoolId:
    Type: String
    Default: us-east-1_PHPkG78b5
    Description: Cognito User Pool ID
  CognitoClientId:
    Type: String
    Default: 1tl9g7nk2k2chtj5fg960fgdth
    Description: Cognito App Client ID
  CacheVersion:
    Type: String
    Default: "v3"
    Description: Cache busting version
  SharedWebSocketApiId:
    Type: String
    Default: lwk0wf6rpl
    Description: Shared WebSocket API ID (WizzUser-WebSocket-dev)
  SharedWebSocketUrl:
    Type: String  
    Default: wss://lwk0wf6rpl.execute-api.us-east-1.amazonaws.com/dev
    Description: Shared WebSocket URL for ecosystem integration

Globals:
  Function:
    Runtime: nodejs20.x
    MemorySize: 512
    Timeout: 29
    Environment:
      Variables:
        ENVIRONMENT: !Ref Stage
        USERS_TABLE: WhizzMerchants_Users
        BUSINESSES_TABLE: WhizzMerchants_Businesses
        PRODUCTS_TABLE: WhizzMerchants_Products
        CATEGORIES_TABLE: WhizzMerchants_Categories
        BUSINESS_SUBCATEGORIES_TABLE: WhizzMerchants_BusinessSubcategories
        DISCOUNTS_TABLE: WhizzMerchants_Discounts
        BUSINESS_SETTINGS_TABLE: WhizzMerchants_BusinessSettings
        BUSINESS_WORKING_HOURS_TABLE: WhizzMerchants_BusinessWorkingHours
        POS_LOGS_TABLE: WhizzMerchants_PosLogs
        BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev-1755170214
        ORDERS_TABLE: WhizzMerchants_Orders
        WEBSOCKET_CONNECTIONS_TABLE: WizzUser_websocket_connections_dev
        WEBSOCKET_SUBSCRIPTIONS_TABLE: WizzUser_websocket_subscriptions_dev
        TIMEOUT_LOGS_TABLE: WhizzMerchants_TimeoutLogs
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        COGNITO_CLIENT_ID: !Ref CognitoClientId
        COGNITO_REGION: !Ref AWS::Region
        DYNAMODB_REGION: !Ref AWS::Region
        SNS_FCM_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:placeholder-fcm"
        SNS_APNS_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:placeholder-apns"
        LAMBDA_CONFIG_VERSION: "2025-08-15T10:00:00Z"
    Tracing: Active

Resources:
  # New Regional API to bypass CloudFront 403s
  RegionalRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "order-receiver-regional-${Stage}"
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      DefinitionBody:
        'Fn::Sub': |
          openapi: 3.0.1
          info:
            title: Order Receiver API
            description: Regional API Gateway with AWS Lambda integrations (Fixed Cognito Auth)
            version: "1.0"
          components:
            securitySchemes:
              CognitoAuthorizer:
                type: apiKey
                name: Authorization
                in: header
                x-amazon-apigateway-authtype: cognito_user_pools
                x-amazon-apigateway-authorizer:
                  type: cognito_user_pools
                  providerARNs:
                    - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
          paths:
            # Auth endpoints (public)
            /auth/signin:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/health:
              get:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/refresh:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/register-with-business:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/confirm:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/check-email:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/resend-code:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/track-login:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/track-logout:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /auth/user-businesses:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UnifiedAuthFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            /categories:
              get:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # Categories by business type endpoint (public)
            /categories/business-type/{businessType}:
              get:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            # Products endpoints (internal auth)
            /products:
              get:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              post:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # NEW: Product search endpoint (internal auth)
            /products/search:
              get:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            # NEW: Product by ID endpoints (internal auth)
            /products/{productId}:
              get:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              put:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              delete:
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ProductManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /businesses/{businessId}/profile:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessProfileFunction.Arn}/invocations
              put:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessProfileFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /businesses/{businessId}/location-settings:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LocationSettingsFunction.Arn}/invocations
              put:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LocationSettingsFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /businesses/{businessId}/working-hours:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LocationSettingsFunction.Arn}/invocations
              put:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LocationSettingsFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /business/details:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessDetailsFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # Upload endpoints (internal auth)
            /upload/product-image:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/business-photo:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # Document upload endpoints (public for registration)
            /upload/business-license:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/owner-identity:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/health-certificate:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /upload/owner-photo:
              post:
                security: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ImageUploadFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # WebSocket Management endpoints
            /websocket/virtual-connection:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${WebSocketConnectionManagerFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /websocket/business-connections:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${WebSocketConnectionManagerFunction.Arn}/invocations
              delete:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${WebSocketConnectionManagerFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /websocket/business-status:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${WebSocketConnectionManagerFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            # Business Status Management endpoints
            /businesses/{businessId}/status:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessOnlineStatusFunction.Arn}/invocations
              put:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessOnlineStatusFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            
            /businesses/{businessId}/heartbeat:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BusinessOnlineStatusFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            # Discount Management endpoints
            /discounts:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            /discounts/{discountId}:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              put:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              delete:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            /discounts/{discountId}/toggle-status:
              patch:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            /discounts/validate-discount:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            /discounts/apply-discount:
              post:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

            /discounts/stats:
              get:
                security:
                  - CognitoAuthorizer: []
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  httpMethod: POST
                  uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DiscountManagementFunction.Arn}/invocations
              options:
                security: []
                responses:
                  '200':
                    description: CORS preflight response
                    headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: string
                      Access-Control-Allow-Methods:
                        schema:
                          type: string
                      Access-Control-Allow-Headers:
                        schema:
                          type: string
                x-amazon-apigateway-integration:
                  type: mock
                  requestTemplates:
                    application/json: '{"statusCode": 200}'
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"

  # Explicit Lambda permissions to break circular dependency
  UnifiedAuthFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UnifiedAuthFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  ProductManagementFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductManagementFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  ImageUploadFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageUploadFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  BusinessProfileFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BusinessProfileFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  BusinessDetailsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BusinessDetailsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  LocationSettingsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LocationSettingsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  WebSocketConnectionManagerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketConnectionManagerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  BusinessOnlineStatusFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BusinessOnlineStatusFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  DiscountManagementFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DiscountManagementFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RegionalRestApi}/*/*"

  UnifiedAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-unified-auth-v4-sam'
      CodeUri: functions/auth/
      Handler: unified_auth_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_connections_dev"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_connections_dev/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_subscriptions_dev"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_subscriptions_dev/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:SignUp
                - cognito-idp:ConfirmSignUp
                - cognito-idp:InitiateAuth
                - cognito-idp:GetUser
                - cognito-idp:ResendConfirmationCode
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  ProductManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-product-management-v4-sam'
      CodeUri: functions/products/
      Handler: product_management_handler.handler
      Environment:
        Variables:
          PRODUCTS_TABLE: WhizzMerchants_Products
          CATEGORIES_TABLE: WhizzMerchants_Categories
          BUSINESSES_TABLE: WhizzMerchants_Businesses
          DYNAMODB_REGION: !Ref AWS::Region
          COGNITO_REGION: !Ref AWS::Region
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Products"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Products/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Categories"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Categories/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_BusinessSubcategories"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_BusinessSubcategories/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-image-upload-v1-sam'
      CodeUri: functions/upload/
      Handler: image_upload_handler.handler
      Environment:
        Variables:
          BUSINESS_PHOTOS_BUCKET: order-receiver-business-photos-dev-1755170214
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::order-receiver-business-photos-dev-1755170214/*"

  BusinessProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-business-profile-v4-sam'
      CodeUri: functions/business/
      Handler: business_profile_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  BusinessDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-business-details-v1-sam'
      CodeUri: functions/business/
      Handler: business_details_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  LocationSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-location-settings-v1-sam'
      CodeUri: functions/business/
      Handler: location_settings_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Users/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_BusinessWorkingHours"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_BusinessWorkingHours/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  # WebSocket Management Functions
  WebSocketHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-websocket-${Stage}-handler-v1-sam'
      CodeUri: functions/websocket/
      Handler: websocket_handler.handler
      Environment:
        Variables:
          WEBSOCKET_ENDPOINT: !Ref SharedWebSocketUrl
          SHARED_WEBSOCKET_API_ID: !Ref SharedWebSocketApiId
          MERCHANT_ENDPOINTS_TABLE: !Sub 'wizzgo-${Stage}-merchant-endpoints'
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_connections_dev"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_connections_dev/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_subscriptions_dev"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_subscriptions_dev/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/wizzgo-${Stage}-merchant-endpoints"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/wizzgo-${Stage}-merchant-endpoints/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SharedWebSocketApiId}/*"

  WebSocketConnectionManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-websocket-${Stage}-connection-manager-v1-sam'
      CodeUri: functions/websocket/
      Handler: websocket_connection_manager.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_connections_dev"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_connections_dev/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_subscriptions_dev"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WizzUser_websocket_subscriptions_dev/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"

  BusinessOnlineStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-business-${Stage}-status-v1-sam'
      CodeUri: functions/business/
      Handler: business_online_status_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/order-receiver-websocket-connections-${Stage}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/order-receiver-websocket-connections-${Stage}/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  DiscountManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'order-receiver-regional-${Stage}-discount-management-v1-sam'
      CodeUri: functions/discounts/
      Handler: discount_management_handler.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Discounts"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Discounts/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/WhizzMerchants_Businesses/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  # ========================================================================
  # INDIVIDUAL WEBSOCKET API RESOURCES - COMMENTED OUT FOR SHARED MIGRATION
  # ========================================================================
  # Migrated to shared WebSocket infrastructure: WizzUser-WebSocket-dev
  # API ID: lwk0wf6rpl
  # URL: wss://lwk0wf6rpl.execute-api.us-east-1.amazonaws.com/dev
  # ========================================================================
  
  # WebSocket API
  # WebSocketApi:
  #   Type: AWS::ApiGatewayV2::Api
  #   Properties:
  #     Name: !Sub 'order-receiver-websocket-api-${Stage}'
  #     ProtocolType: WEBSOCKET
  #     RouteSelectionExpression: "$request.body.action"

  # WebSocketConnectRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref WebSocketApi
  #     RouteKey: $connect
  #     Target: !Sub 'integrations/${WebSocketConnectIntegration}'

  # WebSocketDisconnectRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref WebSocketApi
  #     RouteKey: $disconnect
  #     Target: !Sub 'integrations/${WebSocketDisconnectIntegration}'

  # WebSocketDefaultRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref WebSocketApi
  #     RouteKey: $default
  #     Target: !Sub 'integrations/${WebSocketDefaultIntegration}'

  # WebSocketConnectIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref WebSocketApi
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  # WebSocketDisconnectIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref WebSocketApi
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  # WebSocketDefaultIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref WebSocketApi
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  # WebSocketDeployment:
  #   Type: AWS::ApiGatewayV2::Deployment
  #   DependsOn:
  #     - WebSocketConnectRoute
  #     - WebSocketDisconnectRoute
  #     - WebSocketDefaultRoute
  #   Properties:
  #     ApiId: !Ref WebSocketApi

  # WebSocketStage:
  #   Type: AWS::ApiGatewayV2::Stage
  #   Properties:
  #     StageName: !Ref Stage
  #     ApiId: !Ref WebSocketApi
  #     DeploymentId: !Ref WebSocketDeployment

  # NOTE: Lambda permissions will be handled by the shared WebSocket API infrastructure

  # WebSocket Connections Table - Using shared tables instead
  # WebSocketConnectionsTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: !Sub 'order-receiver-websocket-connections-${Stage}'
  #     BillingMode: PAY_PER_REQUEST
  #     AttributeDefinitions:
  #       - AttributeName: PK
  #         AttributeType: S
  #       - AttributeName: SK
  #         AttributeType: S
  #       - AttributeName: GSI1PK
  #         AttributeType: S
  #       - AttributeName: GSI1SK
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: PK
  #         KeyType: HASH
  #       - AttributeName: SK
  #         KeyType: RANGE
  #     GlobalSecondaryIndexes:
  #       - IndexName: GSI1
  #         KeySchema:
  #           - AttributeName: GSI1PK
  #             KeyType: HASH
  #           - AttributeName: GSI1SK
  #             KeyType: RANGE
  #         Projection:
  #           ProjectionType: ALL
  #     TimeToLiveSpecification:
  #       AttributeName: ttl
  #       Enabled: true
  #     Tags:
  #       - Key: Environment
  #         Value: !Ref Stage
  #       - Key: Service
  #         Value: OrderReceiver
  #       - Key: Purpose
  #         Value: websocket-connections

  # DynamoDB Tables
  BusinessWorkingHoursTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WhizzMerchants_BusinessWorkingHours
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: businessId
          AttributeType: S
        - AttributeName: weekday
          AttributeType: S
      KeySchema:
        - AttributeName: businessId
          KeyType: HASH
        - AttributeName: weekday
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Service
          Value: WhizzMerchants
        - Key: Purpose
          Value: business-working-hours

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RegionalRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  WebSocketUrl:
    Description: "Shared WebSocket API Gateway URL for ecosystem integration"
    Value: !Ref SharedWebSocketUrl
    Export:
      Name: !Sub "${AWS::StackName}-WebSocketUrl"
  
  SharedWebSocketApiId:
    Description: "Shared WebSocket API ID (WizzUser-WebSocket-dev)"
    Value: !Ref SharedWebSocketApiId
    Export:
      Name: !Sub "${AWS::StackName}-SharedWebSocketApiId"
  
  # NOTE: Using shared tables - individual table output commented out
  # WebSocketConnectionsTable:
  #   Description: "WebSocket Connections Table Name"
  #   Value: !Ref WebSocketConnectionsTable
  #   Export:
  #     Name: !Sub "${AWS::StackName}-WebSocketConnectionsTable"
  
  BusinessWorkingHoursTableName:
    Description: "Business Working Hours Table Name"
    Value: !Ref BusinessWorkingHoursTable
    Export:
      Name: !Sub "${AWS::StackName}-BusinessWorkingHoursTable"