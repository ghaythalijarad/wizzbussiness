AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Order Receiver Serverless Application - DynamoDB with Lambda and Cognito'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'production']
    Description: 'Deployment environment'
  
  SecretKey:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: 'Application secret key for JWT tokens'
  
  CorsOrigins:
    Type: String
    Default: '*'
    Description: 'CORS allowed origins (comma-separated)'
  
  DynamoDBTableName:
    Type: String
    Default: 'order-receiver-data'
    Description: 'DynamoDB table name for application data'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        SECRET_KEY: !Ref SecretKey
        CORS_ORIGINS: !Ref CorsOrigins
        COGNITO_USER_POOL_ID: !Ref CognitoUserPool
        COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
        DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
        AWS_DEFAULT_REGION: !Ref AWS::Region
    Layers:
      - !Ref DependenciesLayer
    Tracing: Active
  
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: !Sub "'${CorsOrigins}'"

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Resources:
  # DynamoDB Table for application data
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1_PK
          AttributeType: S
        - AttributeName: GSI1_SK
          AttributeType: S
        - AttributeName: GSI2_PK
          AttributeType: S
        - AttributeName: GSI2_SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1_PK
              KeyType: HASH
            - AttributeName: GSI1_SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2_PK
              KeyType: HASH
            - AttributeName: GSI2_SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProduction, true, false]
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-dynamodb'
        - Key: Environment
          Value: !Ref Environment

  # Cognito User Pool for authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-user-pool'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: false
          Mutable: true
        - Name: family_name
          Required: false
          Mutable: true
        - Name: phone_number
          Required: false
          Mutable: true
      UserPoolTags:
        Name: !Sub '${AWS::StackName}-user-pool'
        Environment: !Ref Environment

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-user-pool-client'
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - 'http://localhost:3000/auth/callback'
        - !Sub 'https://${CloudFrontDistribution.DomainName}/auth/callback'
      LogoutURLs:
        - 'http://localhost:3000/auth/logout'
        - !Sub 'https://${CloudFrontDistribution.DomainName}/auth/logout'
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub '${AWS::StackName}-${AWS::AccountId}'
      UserPoolId: !Ref CognitoUserPool

  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-dependencies'
      Description: 'Python dependencies for Order Receiver app'
      ContentUri: './layers/dependencies/'
      CompatibleRuntimes:
        - python3.11
    Metadata:
      BuildMethod: python3.11

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      StageName: !Ref Environment
      Description: 'API Gateway for Order Receiver application'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization
              ReauthorizeEvery: 0

  # Main API Lambda Function
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-api'
      CodeUri: './lambda/api/'
      Handler: main.lambda_handler
      Description: 'Main FastAPI application for Order Receiver'
      Events:
        ApiGatewayEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGateway
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE
        RootPath:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                - 'dynamodb:DeleteItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:BatchGetItem'
                - 'dynamodb:BatchWriteItem'
              Resource: 
                - !GetAtt DynamoDBTable.Arn
                - !Sub '${DynamoDBTable.Arn}/index/*'
            - Effect: Allow
              Action:
                - 'cognito-idp:AdminCreateUser'
                - 'cognito-idp:AdminSetUserPassword'
                - 'cognito-idp:AdminGetUser'
                - 'cognito-idp:AdminInitiateAuth'
                - 'cognito-idp:AdminRespondToAuthChallenge'
                - 'cognito-idp:ListUsers'
                - 'cognito-idp:AdminConfirmSignUp'
                - 'cognito-idp:AdminDeleteUser'
              Resource: !GetAtt CognitoUserPool.Arn

  # Authentication Lambda Function
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-auth'
      CodeUri: './lambda/auth/'
      Handler: auth.lambda_handler
      Description: 'Authentication service for Order Receiver'
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /auth/{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:Query'
              Resource: 
                - !GetAtt DynamoDBTable.Arn
                - !Sub '${DynamoDBTable.Arn}/index/*'
            - Effect: Allow
              Action:
                - 'cognito-idp:AdminCreateUser'
                - 'cognito-idp:AdminSetUserPassword'
                - 'cognito-idp:AdminGetUser'
                - 'cognito-idp:AdminInitiateAuth'
                - 'cognito-idp:AdminRespondToAuthChallenge'
                - 'cognito-idp:ListUsers'
                - 'cognito-idp:AdminConfirmSignUp'
                - 'cognito-idp:AdminDeleteUser'
              Resource: !GetAtt CognitoUserPool.Arn

  # Order Processing Lambda Function
  OrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-orders'
      CodeUri: './lambda/orders/'
      Handler: orders.lambda_handler
      Description: 'Order processing service for Order Receiver'
      Events:
        OrderApi:
          Type: Api
          Properties:
            Path: /api/orders/{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGateway
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                - 'dynamodb:DeleteItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:BatchGetItem'
                - 'dynamodb:BatchWriteItem'
              Resource: 
                - !GetAtt DynamoDBTable.Arn
                - !Sub '${DynamoDBTable.Arn}/index/*'

  # S3 Bucket for frontend hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-frontend-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'index.html'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-frontend'

  # S3 Bucket Policy for public access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${FrontendBucket}/*'

  # CloudFront Distribution for global CDN
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: !Sub 'S3-${FrontendBucket}'
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: 'index.html'
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3-${FrontendBucket}'
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        Comment: !Sub '${AWS::StackName} Frontend Distribution'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-distribution'

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  FrontendUrl:
    Description: 'CloudFront distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-frontend-url'

  DynamoDBTableName:
    Description: 'DynamoDB table name'
    Value: !Ref DynamoDBTable
    Export:
      Name: !Sub '${AWS::StackName}-dynamodb-table'

  CognitoUserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub '${AWS::StackName}-user-pool-id'

  CognitoUserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-user-pool-client-id'

  S3BucketName:
    Description: 'S3 bucket name for frontend'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-bucket-name'
